"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.literal = exports.lazy = exports.intersection = exports.instanceof = exports.function = exports.enum = exports.effect = exports.date = exports.boolean = exports.bigint = exports.array = exports.any = exports.ZodFirstPartyTypeKind = exports.late = exports.ZodSchema = exports.Schema = exports.custom = exports.ZodDefault = exports.ZodNullable = exports.ZodOptional = exports.ZodTransformer = exports.ZodEffects = exports.ZodPromise = exports.ZodNativeEnum = exports.ZodEnum = exports.ZodLiteral = exports.ZodLazy = exports.ZodFunction = exports.ZodSet = exports.ZodMap = exports.ZodRecord = exports.ZodTuple = exports.ZodIntersection = exports.ZodUnion = exports.ZodObject = exports.mergeObjects = exports.objectUtil = exports.ZodArray = exports.ZodVoid = exports.ZodNever = exports.ZodUnknown = exports.ZodAny = exports.ZodNull = exports.ZodUndefined = exports.ZodDate = exports.ZodBoolean = exports.ZodBigInt = exports.ZodNumber = exports.ZodString = exports.ZodType = void 0;
exports.void = exports.unknown = exports.union = exports.undefined = exports.tuple = exports.transformer = exports.string = exports.strictObject = exports.set = exports.record = exports.promise = exports.preprocess = exports.ostring = exports.optional = exports.onumber = exports.oboolean = exports.object = exports.number = exports.nullable = exports.null = exports.never = exports.nativeEnum = exports.map = void 0;
var errorUtil_1 = require("./helpers/errorUtil");
var parseUtil_1 = require("./helpers/parseUtil");
var util_1 = require("./helpers/util");
var ZodError_1 = require("./ZodError");
// function customErrorMap(arg: string | ZodErrorMap | undefined) {
//   if (typeof arg === "string") {
//     const map: ZodErrorMap = (iss, ctx) => {
//       if (iss.code === ZodIssueCode.invalid_type) {
//         return { message: arg };
//       }
//       return { message: ctx.defaultError };
//     };
//   }
// }
var createRootContext = function (params) {
    var _a;
    return new parseUtil_1.ParseContext({
        path: (0, parseUtil_1.pathFromArray)(params.path || []),
        issues: [],
        errorMap: params.errorMap,
        async: (_a = params.async) !== null && _a !== void 0 ? _a : false,
    });
};
var handleResult = function (ctx, result) {
    if ((0, parseUtil_1.isOk)(result) && !ctx.issues.length) {
        return { success: true, data: result.value };
    }
    else {
        var error = new ZodError_1.ZodError(ctx.issues);
        return { success: false, error: error };
    }
    // if (isOk(result)) {
    //   return { success: true, data: result.value };
    // } else {
    //   const error = new ZodError(ctx.issues);
    //   return { success: false, error };
    // }
};
function processCreateParams(params) {
    if (!params)
        return {};
    if (params.errorMap && (params.invalid_type_error || params.required_error)) {
        throw new Error("Can't use \"invalid\" or \"required\" in conjunction with custom error map.");
    }
    if (params.errorMap)
        return { errorMap: params.errorMap };
    var customMap = function (iss, ctx) {
        if (iss.code !== "invalid_type")
            return { message: ctx.defaultError };
        if (typeof ctx.data === "undefined" && params.required_error)
            return { message: params.required_error };
        if (params.invalid_type_error)
            return { message: params.invalid_type_error };
        return { message: ctx.defaultError };
    };
    return { errorMap: customMap };
}
var ZodType = /** @class */ (function () {
    function ZodType(def) {
        /** Alias of safeParseAsync */
        this.spa = this.safeParseAsync;
        this.superRefine = this._refinement;
        this._def = def;
        this.transform = this.transform.bind(this);
        this.default = this.default.bind(this);
    }
    ZodType.prototype.addIssue = function (ctx, issueData, params) {
        ctx._addIssue(params.data, issueData, {
            schemaErrorMap: this._def.errorMap,
        });
    };
    ZodType.prototype._parseSync = function (_ctx, _data, _parsedType) {
        var result = this._parse(_ctx, _data, _parsedType);
        if ((0, parseUtil_1.isAsync)(result)) {
            throw new Error("Synchronous parse encountered promise.");
        }
        return result;
    };
    ZodType.prototype._parseAsync = function (_ctx, _data, _parsedType) {
        var result = this._parse(_ctx, _data, _parsedType);
        // if (isAsync(result)) {
        //   return result;
        // }
        return Promise.resolve(result);
    };
    ZodType.prototype.parse = function (data, params) {
        var result = this.safeParse(data, params);
        if (result.success)
            return result.data;
        throw result.error;
    };
    ZodType.prototype.safeParse = function (data, params) {
        var ctx = createRootContext(__assign(__assign({}, params), { async: false }));
        var result = this._parseSync(ctx, data, (0, parseUtil_1.getParsedType)(data));
        return handleResult(ctx, result);
    };
    ZodType.prototype.parseAsync = function (data, params) {
        return __awaiter(this, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.safeParseAsync(data, params)];
                    case 1:
                        result = _a.sent();
                        if (result.success)
                            return [2 /*return*/, result.data];
                        throw result.error;
                }
            });
        });
    };
    ZodType.prototype.safeParseAsync = function (data, params) {
        return __awaiter(this, void 0, void 0, function () {
            var ctx, maybeAsyncResult, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        ctx = createRootContext(__assign(__assign({}, params), { async: true }));
                        maybeAsyncResult = this._parse(ctx, data, (0, parseUtil_1.getParsedType)(data));
                        return [4 /*yield*/, ((0, parseUtil_1.isAsync)(maybeAsyncResult)
                                ? maybeAsyncResult
                                : Promise.resolve(maybeAsyncResult))];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, handleResult(ctx, result)];
                }
            });
        });
    };
    ZodType.prototype.refine = function (check, message) {
        var getIssueProperties = function (val) {
            if (typeof message === "string" || typeof message === "undefined") {
                return { message: message };
            }
            else if (typeof message === "function") {
                return message(val);
            }
            else {
                return message;
            }
        };
        return this._refinement(function (val, ctx) {
            var result = check(val);
            var setError = function () {
                return ctx.addIssue(__assign({ code: ZodError_1.ZodIssueCode.custom }, getIssueProperties(val)));
            };
            if (result instanceof Promise) {
                return result.then(function (data) {
                    if (!data) {
                        setError();
                        return false;
                    }
                    else {
                        return true;
                    }
                });
            }
            if (!result) {
                setError();
                return false;
            }
            else {
                return true;
            }
        });
    };
    ZodType.prototype.refinement = function (check, refinementData) {
        return this._refinement(function (val, ctx) {
            if (!check(val)) {
                ctx.addIssue(typeof refinementData === "function"
                    ? refinementData(val, ctx)
                    : refinementData);
                return false;
            }
            else {
                return true;
            }
        });
    };
    ZodType.prototype._refinement = function (refinement) {
        return new ZodEffects({
            schema: this,
            typeName: ZodFirstPartyTypeKind.ZodEffects,
            effect: { type: "refinement", refinement: refinement },
        });
    };
    ZodType.prototype.optional = function () {
        return ZodOptional.create(this);
    };
    ZodType.prototype.nullable = function () {
        return ZodNullable.create(this);
    };
    ZodType.prototype.nullish = function () {
        return this.optional().nullable();
    };
    ZodType.prototype.array = function () {
        return ZodArray.create(this);
    };
    ZodType.prototype.promise = function () {
        return ZodPromise.create(this);
    };
    ZodType.prototype.or = function (option) {
        return ZodUnion.create([this, option]);
    };
    ZodType.prototype.and = function (incoming) {
        return ZodIntersection.create(this, incoming);
    };
    ZodType.prototype.transform = function (transform) {
        return new ZodEffects({
            schema: this,
            typeName: ZodFirstPartyTypeKind.ZodEffects,
            effect: { type: "transform", transform: transform },
        });
    };
    ZodType.prototype.default = function (def) {
        var defaultValueFunc = typeof def === "function" ? def : function () { return def; };
        // if (this instanceof ZodOptional) {
        //   return new ZodOptional({
        //     ...this._def,
        //     defaultValue: defaultValueFunc,
        //   }) as any;
        // }
        return new ZodDefault({
            innerType: this,
            defaultValue: defaultValueFunc,
            typeName: ZodFirstPartyTypeKind.ZodDefault,
        });
    };
    ZodType.prototype.isOptional = function () {
        return this.safeParse(undefined).success;
    };
    ZodType.prototype.isNullable = function () {
        return this.safeParse(null).success;
    };
    return ZodType;
}());
exports.ZodType = ZodType;
exports.Schema = ZodType;
exports.ZodSchema = ZodType;
var cuidRegex = /^c[^\s-]{8,}$/i;
var uuidRegex = /^([a-f0-9]{8}-[a-f0-9]{4}-[1-5][a-f0-9]{3}-[89ab][a-f0-9]{3}-[a-f0-9]{12}|00000000-0000-0000-0000-000000000000)$/i;
// from https://stackoverflow.com/a/46181/1550155
// old version: too slow, didn't support unicode
// const emailRegex = /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))$/i;
// eslint-disable-next-line
var emailRegex = /^(([^<>()[\]\.,;:\s@\"]+(\.[^<>()[\]\.,;:\s@\"]+)*)|(\".+\"))@(([^<>()[\]\.,;:\s@\"]+\.)+[^<>()[\]\.,;:\s@\"]{2,})$/i;
var ZodString = /** @class */ (function (_super) {
    __extends(ZodString, _super);
    function ZodString() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._regex = function (regex, validation, message) {
            return _this.refinement(function (data) { return regex.test(data); }, __assign({ validation: validation, code: ZodError_1.ZodIssueCode.invalid_string }, errorUtil_1.errorUtil.errToObj(message)));
        };
        /**
         * Deprecated.
         * Use z.string().min(1) instead.
         */
        _this.nonempty = function (message) {
            return _this.min(1, errorUtil_1.errorUtil.errToObj(message));
        };
        return _this;
    }
    ZodString.prototype._parse = function (ctx, data, parsedType) {
        var e_1, _a;
        if (parsedType !== parseUtil_1.ZodParsedType.string) {
            this.addIssue(ctx, {
                code: ZodError_1.ZodIssueCode.invalid_type,
                expected: parseUtil_1.ZodParsedType.string,
                received: parsedType,
            }, { data: data });
            return parseUtil_1.INVALID;
        }
        var invalid = false;
        try {
            for (var _b = __values(this._def.checks), _c = _b.next(); !_c.done; _c = _b.next()) {
                var check = _c.value;
                if (check.kind === "min") {
                    if (data.length < check.value) {
                        invalid = true;
                        this.addIssue(ctx, {
                            code: ZodError_1.ZodIssueCode.too_small,
                            minimum: check.value,
                            type: "string",
                            inclusive: true,
                            message: check.message,
                        }, { data: data });
                    }
                }
                else if (check.kind === "max") {
                    if (data.length > check.value) {
                        invalid = true;
                        this.addIssue(ctx, {
                            code: ZodError_1.ZodIssueCode.too_big,
                            maximum: check.value,
                            type: "string",
                            inclusive: true,
                            message: check.message,
                            // ...errorUtil.errToObj(this._def.maxLength.message),
                        }, { data: data });
                    }
                }
                else if (check.kind === "email") {
                    if (!emailRegex.test(data)) {
                        invalid = true;
                        this.addIssue(ctx, {
                            validation: "email",
                            code: ZodError_1.ZodIssueCode.invalid_string,
                            message: check.message,
                        }, { data: data });
                    }
                }
                else if (check.kind === "uuid") {
                    if (!uuidRegex.test(data)) {
                        invalid = true;
                        this.addIssue(ctx, {
                            validation: "uuid",
                            code: ZodError_1.ZodIssueCode.invalid_string,
                            message: check.message,
                        }, { data: data });
                    }
                }
                else if (check.kind === "cuid") {
                    if (!cuidRegex.test(data)) {
                        invalid = true;
                        this.addIssue(ctx, {
                            validation: "cuid",
                            code: ZodError_1.ZodIssueCode.invalid_string,
                            message: check.message,
                        }, { data: data });
                    }
                }
                else if (check.kind === "url") {
                    try {
                        new URL(data);
                    }
                    catch (_d) {
                        invalid = true;
                        this.addIssue(ctx, {
                            validation: "url",
                            code: ZodError_1.ZodIssueCode.invalid_string,
                            message: check.message,
                        }, { data: data });
                    }
                }
                else if (check.kind === "regex") {
                    // clear regex state
                    check.regex.lastIndex = 0;
                    var testResult = check.regex.test(data);
                    if (!testResult) {
                        invalid = true;
                        this.addIssue(ctx, {
                            validation: "regex",
                            code: ZodError_1.ZodIssueCode.invalid_string,
                            message: check.message,
                        }, { data: data });
                    }
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return invalid ? parseUtil_1.INVALID : (0, parseUtil_1.OK)(data);
    };
    ZodString.prototype._addCheck = function (check) {
        return new ZodString(__assign(__assign({}, this._def), { checks: __spreadArray(__spreadArray([], __read(this._def.checks), false), [check], false) }));
    };
    ZodString.prototype.email = function (message) {
        return this._addCheck(__assign({ kind: "email" }, errorUtil_1.errorUtil.errToObj(message)));
    };
    ZodString.prototype.url = function (message) {
        return this._addCheck(__assign({ kind: "url" }, errorUtil_1.errorUtil.errToObj(message)));
    };
    ZodString.prototype.uuid = function (message) {
        return this._addCheck(__assign({ kind: "uuid" }, errorUtil_1.errorUtil.errToObj(message)));
    };
    ZodString.prototype.cuid = function (message) {
        return this._addCheck(__assign({ kind: "cuid" }, errorUtil_1.errorUtil.errToObj(message)));
    };
    ZodString.prototype.regex = function (regex, message) {
        return this._addCheck(__assign({ kind: "regex", regex: regex }, errorUtil_1.errorUtil.errToObj(message)));
    };
    ZodString.prototype.min = function (minLength, message) {
        return this._addCheck(__assign({ kind: "min", value: minLength }, errorUtil_1.errorUtil.errToObj(message)));
    };
    ZodString.prototype.max = function (maxLength, message) {
        return this._addCheck(__assign({ kind: "max", value: maxLength }, errorUtil_1.errorUtil.errToObj(message)));
    };
    ZodString.prototype.length = function (len, message) {
        return this.min(len, message).max(len, message);
    };
    Object.defineProperty(ZodString.prototype, "isEmail", {
        get: function () {
            return !!this._def.checks.find(function (ch) { return ch.kind === "email"; });
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ZodString.prototype, "isURL", {
        get: function () {
            return !!this._def.checks.find(function (ch) { return ch.kind === "url"; });
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ZodString.prototype, "isUUID", {
        get: function () {
            return !!this._def.checks.find(function (ch) { return ch.kind === "uuid"; });
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ZodString.prototype, "isCUID", {
        get: function () {
            return !!this._def.checks.find(function (ch) { return ch.kind === "cuid"; });
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ZodString.prototype, "minLength", {
        get: function () {
            var min = -Infinity;
            this._def.checks.map(function (ch) {
                if (ch.kind === "min") {
                    if (min === null || ch.value > min) {
                        min = ch.value;
                    }
                }
            });
            return min;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ZodString.prototype, "maxLength", {
        get: function () {
            var max = null;
            this._def.checks.map(function (ch) {
                if (ch.kind === "max") {
                    if (max === null || ch.value < max) {
                        max = ch.value;
                    }
                }
            });
            return max;
        },
        enumerable: false,
        configurable: true
    });
    ZodString.create = function (params) {
        return new ZodString(__assign({ checks: [], typeName: ZodFirstPartyTypeKind.ZodString }, processCreateParams(params)));
    };
    return ZodString;
}(ZodType));
exports.ZodString = ZodString;
var ZodNumber = /** @class */ (function (_super) {
    __extends(ZodNumber, _super);
    function ZodNumber() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.min = _this.gte;
        _this.max = _this.lte;
        _this.step = _this.multipleOf;
        return _this;
    }
    ZodNumber.prototype._parse = function (ctx, data, parsedType) {
        var e_2, _a;
        if (parsedType !== parseUtil_1.ZodParsedType.number) {
            this.addIssue(ctx, {
                code: ZodError_1.ZodIssueCode.invalid_type,
                expected: parseUtil_1.ZodParsedType.number,
                received: parsedType,
            }, { data: data });
            return parseUtil_1.INVALID;
        }
        var invalid = false;
        try {
            for (var _b = __values(this._def.checks), _c = _b.next(); !_c.done; _c = _b.next()) {
                var check = _c.value;
                if (check.kind === "int") {
                    if (!util_1.util.isInteger(data)) {
                        invalid = true;
                        this.addIssue(ctx, {
                            code: ZodError_1.ZodIssueCode.invalid_type,
                            expected: "integer",
                            received: "float",
                            message: check.message,
                        }, { data: data });
                    }
                }
                else if (check.kind === "min") {
                    // const MIN = check.value;
                    var tooSmall = check.inclusive
                        ? data < check.value
                        : data <= check.value;
                    if (tooSmall) {
                        invalid = true;
                        this.addIssue(ctx, {
                            code: ZodError_1.ZodIssueCode.too_small,
                            minimum: check.value,
                            type: "number",
                            inclusive: check.inclusive,
                            message: check.message,
                        }, { data: data });
                    }
                }
                else if (check.kind === "max") {
                    var tooBig = check.inclusive
                        ? data > check.value
                        : data >= check.value;
                    if (tooBig) {
                        invalid = true;
                        this.addIssue(ctx, {
                            code: ZodError_1.ZodIssueCode.too_big,
                            maximum: check.value,
                            type: "number",
                            inclusive: check.inclusive,
                            message: check.message,
                        }, { data: data });
                    }
                }
                else if (check.kind === "multipleOf") {
                    if (data % check.value !== 0) {
                        invalid = true;
                        this.addIssue(ctx, {
                            code: ZodError_1.ZodIssueCode.not_multiple_of,
                            multipleOf: check.value,
                            message: check.message,
                        }, { data: data });
                    }
                }
                else {
                    util_1.util.assertNever(check);
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return invalid ? parseUtil_1.INVALID : (0, parseUtil_1.OK)(data);
    };
    ZodNumber.prototype.gte = function (value, message) {
        return this.setLimit("min", value, true, errorUtil_1.errorUtil.toString(message));
    };
    ZodNumber.prototype.gt = function (value, message) {
        return this.setLimit("min", value, false, errorUtil_1.errorUtil.toString(message));
    };
    ZodNumber.prototype.lte = function (value, message) {
        return this.setLimit("max", value, true, errorUtil_1.errorUtil.toString(message));
    };
    ZodNumber.prototype.lt = function (value, message) {
        return this.setLimit("max", value, false, errorUtil_1.errorUtil.toString(message));
    };
    ZodNumber.prototype.setLimit = function (kind, value, inclusive, message) {
        return new ZodNumber(__assign(__assign({}, this._def), { checks: __spreadArray(__spreadArray([], __read(this._def.checks), false), [
                {
                    kind: kind,
                    value: value,
                    inclusive: inclusive,
                    message: errorUtil_1.errorUtil.toString(message),
                },
            ], false) }));
    };
    ZodNumber.prototype._addCheck = function (check) {
        return new ZodNumber(__assign(__assign({}, this._def), { checks: __spreadArray(__spreadArray([], __read(this._def.checks), false), [check], false) }));
    };
    ZodNumber.prototype.int = function (message) {
        return this._addCheck({
            kind: "int",
            message: errorUtil_1.errorUtil.toString(message),
        });
    };
    ZodNumber.prototype.positive = function (message) {
        return this._addCheck({
            kind: "min",
            value: 0,
            inclusive: false,
            message: errorUtil_1.errorUtil.toString(message),
        });
    };
    ZodNumber.prototype.negative = function (message) {
        return this._addCheck({
            kind: "max",
            value: 0,
            inclusive: false,
            message: errorUtil_1.errorUtil.toString(message),
        });
    };
    ZodNumber.prototype.nonpositive = function (message) {
        return this._addCheck({
            kind: "max",
            value: 0,
            inclusive: true,
            message: errorUtil_1.errorUtil.toString(message),
        });
    };
    ZodNumber.prototype.nonnegative = function (message) {
        return this._addCheck({
            kind: "min",
            value: 0,
            inclusive: true,
            message: errorUtil_1.errorUtil.toString(message),
        });
    };
    ZodNumber.prototype.multipleOf = function (value, message) {
        return this._addCheck({
            kind: "multipleOf",
            value: value,
            message: errorUtil_1.errorUtil.toString(message),
        });
    };
    Object.defineProperty(ZodNumber.prototype, "minValue", {
        get: function () {
            var e_3, _a;
            var min = null;
            try {
                for (var _b = __values(this._def.checks), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var ch = _c.value;
                    if (ch.kind === "min") {
                        if (min === null || ch.value > min)
                            min = ch.value;
                    }
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_3) throw e_3.error; }
            }
            return min;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ZodNumber.prototype, "maxValue", {
        get: function () {
            var e_4, _a;
            var max = null;
            try {
                for (var _b = __values(this._def.checks), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var ch = _c.value;
                    if (ch.kind === "max") {
                        if (max === null || ch.value < max)
                            max = ch.value;
                    }
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_4) throw e_4.error; }
            }
            return max;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ZodNumber.prototype, "isInt", {
        get: function () {
            return !!this._def.checks.find(function (ch) { return ch.kind === "int"; });
        },
        enumerable: false,
        configurable: true
    });
    ZodNumber.create = function (params) {
        return new ZodNumber(__assign(__assign({ checks: [], typeName: ZodFirstPartyTypeKind.ZodNumber }, processCreateParams(params)), processCreateParams(params)));
    };
    return ZodNumber;
}(ZodType));
exports.ZodNumber = ZodNumber;
var ZodBigInt = /** @class */ (function (_super) {
    __extends(ZodBigInt, _super);
    function ZodBigInt() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ZodBigInt.prototype._parse = function (ctx, data, parsedType) {
        if (parsedType !== parseUtil_1.ZodParsedType.bigint) {
            this.addIssue(ctx, {
                code: ZodError_1.ZodIssueCode.invalid_type,
                expected: parseUtil_1.ZodParsedType.bigint,
                received: parsedType,
            }, { data: data });
            return parseUtil_1.INVALID;
        }
        return (0, parseUtil_1.OK)(data);
    };
    ZodBigInt.create = function (params) {
        return new ZodBigInt(__assign({ typeName: ZodFirstPartyTypeKind.ZodBigInt }, processCreateParams(params)));
    };
    return ZodBigInt;
}(ZodType));
exports.ZodBigInt = ZodBigInt;
var ZodBoolean = /** @class */ (function (_super) {
    __extends(ZodBoolean, _super);
    function ZodBoolean() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ZodBoolean.prototype._parse = function (ctx, data, parsedType) {
        if (parsedType !== parseUtil_1.ZodParsedType.boolean) {
            this.addIssue(ctx, {
                code: ZodError_1.ZodIssueCode.invalid_type,
                expected: parseUtil_1.ZodParsedType.boolean,
                received: parsedType,
            }, { data: data });
            return parseUtil_1.INVALID;
        }
        return (0, parseUtil_1.OK)(data);
    };
    ZodBoolean.create = function (params) {
        return new ZodBoolean(__assign({ typeName: ZodFirstPartyTypeKind.ZodBoolean }, processCreateParams(params)));
    };
    return ZodBoolean;
}(ZodType));
exports.ZodBoolean = ZodBoolean;
var ZodDate = /** @class */ (function (_super) {
    __extends(ZodDate, _super);
    function ZodDate() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ZodDate.prototype._parse = function (ctx, data, parsedType) {
        if (parsedType !== parseUtil_1.ZodParsedType.date) {
            this.addIssue(ctx, {
                code: ZodError_1.ZodIssueCode.invalid_type,
                expected: parseUtil_1.ZodParsedType.date,
                received: parsedType,
            }, { data: data });
            return parseUtil_1.INVALID;
        }
        if (isNaN(data.getTime())) {
            this.addIssue(ctx, {
                code: ZodError_1.ZodIssueCode.invalid_date,
            }, { data: data });
            return parseUtil_1.INVALID;
        }
        return (0, parseUtil_1.OK)(new Date(data.getTime()));
    };
    ZodDate.create = function (params) {
        return new ZodDate(__assign({ typeName: ZodFirstPartyTypeKind.ZodDate }, processCreateParams(params)));
    };
    return ZodDate;
}(ZodType));
exports.ZodDate = ZodDate;
var ZodUndefined = /** @class */ (function (_super) {
    __extends(ZodUndefined, _super);
    function ZodUndefined() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ZodUndefined.prototype._parse = function (ctx, data, parsedType) {
        if (parsedType !== parseUtil_1.ZodParsedType.undefined) {
            this.addIssue(ctx, {
                code: ZodError_1.ZodIssueCode.invalid_type,
                expected: parseUtil_1.ZodParsedType.undefined,
                received: parsedType,
            }, { data: data });
            return parseUtil_1.INVALID;
        }
        return (0, parseUtil_1.OK)(data);
    };
    ZodUndefined.create = function (params) {
        return new ZodUndefined(__assign({ typeName: ZodFirstPartyTypeKind.ZodUndefined }, processCreateParams(params)));
    };
    return ZodUndefined;
}(ZodType));
exports.ZodUndefined = ZodUndefined;
var ZodNull = /** @class */ (function (_super) {
    __extends(ZodNull, _super);
    function ZodNull() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ZodNull.prototype._parse = function (ctx, data, parsedType) {
        if (parsedType !== parseUtil_1.ZodParsedType.null) {
            this.addIssue(ctx, {
                code: ZodError_1.ZodIssueCode.invalid_type,
                expected: parseUtil_1.ZodParsedType.null,
                received: parsedType,
            }, { data: data });
            return parseUtil_1.INVALID;
        }
        return (0, parseUtil_1.OK)(data);
    };
    ZodNull.create = function (params) {
        return new ZodNull(__assign({ typeName: ZodFirstPartyTypeKind.ZodNull }, processCreateParams(params)));
    };
    return ZodNull;
}(ZodType));
exports.ZodNull = ZodNull;
var ZodAny = /** @class */ (function (_super) {
    __extends(ZodAny, _super);
    function ZodAny() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        // to prevent instances of other classes from extending ZodAny. this causes issues with catchall in ZodObject.
        _this._any = true;
        return _this;
    }
    ZodAny.prototype._parse = function (_ctx, data, _parsedType) {
        return (0, parseUtil_1.OK)(data);
    };
    ZodAny.create = function (params) {
        return new ZodAny(__assign({ typeName: ZodFirstPartyTypeKind.ZodAny }, processCreateParams(params)));
    };
    return ZodAny;
}(ZodType));
exports.ZodAny = ZodAny;
var ZodUnknown = /** @class */ (function (_super) {
    __extends(ZodUnknown, _super);
    function ZodUnknown() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        // required
        _this._unknown = true;
        return _this;
    }
    ZodUnknown.prototype._parse = function (_ctx, data, _parsedType) {
        return (0, parseUtil_1.OK)(data);
    };
    ZodUnknown.create = function (params) {
        return new ZodUnknown(__assign({ typeName: ZodFirstPartyTypeKind.ZodUnknown }, processCreateParams(params)));
    };
    return ZodUnknown;
}(ZodType));
exports.ZodUnknown = ZodUnknown;
var ZodNever = /** @class */ (function (_super) {
    __extends(ZodNever, _super);
    function ZodNever() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ZodNever.prototype._parse = function (ctx, data, parsedType) {
        this.addIssue(ctx, {
            code: ZodError_1.ZodIssueCode.invalid_type,
            expected: parseUtil_1.ZodParsedType.never,
            received: parsedType,
        }, { data: data });
        return parseUtil_1.INVALID;
    };
    ZodNever.create = function (params) {
        return new ZodNever(__assign({ typeName: ZodFirstPartyTypeKind.ZodNever }, processCreateParams(params)));
    };
    return ZodNever;
}(ZodType));
exports.ZodNever = ZodNever;
var ZodVoid = /** @class */ (function (_super) {
    __extends(ZodVoid, _super);
    function ZodVoid() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ZodVoid.prototype._parse = function (ctx, data, parsedType) {
        if (parsedType !== parseUtil_1.ZodParsedType.undefined) {
            this.addIssue(ctx, {
                code: ZodError_1.ZodIssueCode.invalid_type,
                expected: parseUtil_1.ZodParsedType.void,
                received: parsedType,
            }, { data: data });
            return parseUtil_1.INVALID;
        }
        return (0, parseUtil_1.OK)(data);
    };
    ZodVoid.create = function (params) {
        return new ZodVoid(__assign({ typeName: ZodFirstPartyTypeKind.ZodVoid }, processCreateParams(params)));
    };
    return ZodVoid;
}(ZodType));
exports.ZodVoid = ZodVoid;
var ZodArray = /** @class */ (function (_super) {
    __extends(ZodArray, _super);
    function ZodArray() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ZodArray.prototype._parse = function (ctx, _data, parsedType) {
        // return parseArray(ctx, data, parsedType, this._def) as any;
        var def = this._def;
        if (parsedType !== parseUtil_1.ZodParsedType.array) {
            this.addIssue(ctx, {
                code: ZodError_1.ZodIssueCode.invalid_type,
                expected: parseUtil_1.ZodParsedType.array,
                received: parsedType,
            }, { data: _data });
            return parseUtil_1.INVALID;
        }
        var data = _data;
        var invalid = false;
        if (def.minLength !== null) {
            if (data.length < def.minLength.value) {
                invalid = true;
                this.addIssue(ctx, {
                    code: ZodError_1.ZodIssueCode.too_small,
                    minimum: def.minLength.value,
                    type: "array",
                    inclusive: true,
                    message: def.minLength.message,
                }, { data: data });
            }
        }
        if (def.maxLength !== null) {
            if (data.length > def.maxLength.value) {
                invalid = true;
                this.addIssue(ctx, {
                    code: ZodError_1.ZodIssueCode.too_big,
                    maximum: def.maxLength.value,
                    type: "array",
                    inclusive: true,
                    message: def.maxLength.message,
                }, { data: data });
            }
        }
        var tasks = [];
        var result = new Array(data.length);
        var type = def.type;
        var handleParsed = function (index, parsedItem) {
            if ((0, parseUtil_1.isOk)(parsedItem)) {
                result[index] = parsedItem.value;
            }
            else if ((0, parseUtil_1.isInvalid)(parsedItem)) {
                invalid = true;
            }
            else {
                tasks.push(parsedItem.then(function (parsed) { return handleParsed(index, parsed); }));
            }
        };
        data.forEach(function (item, index) {
            handleParsed(index, type._parse(ctx.stepInto(index), item, (0, parseUtil_1.getParsedType)(item)));
        });
        if (ctx.async) {
            return Promise.all(tasks).then(function () { return (invalid ? parseUtil_1.INVALID : (0, parseUtil_1.OK)(result)); });
        }
        else {
            return invalid ? parseUtil_1.INVALID : (0, parseUtil_1.OK)(result);
        }
    };
    Object.defineProperty(ZodArray.prototype, "element", {
        get: function () {
            return this._def.type;
        },
        enumerable: false,
        configurable: true
    });
    ZodArray.prototype.min = function (minLength, message) {
        return new ZodArray(__assign(__assign({}, this._def), { minLength: { value: minLength, message: errorUtil_1.errorUtil.toString(message) } }));
    };
    ZodArray.prototype.max = function (maxLength, message) {
        return new ZodArray(__assign(__assign({}, this._def), { maxLength: { value: maxLength, message: errorUtil_1.errorUtil.toString(message) } }));
    };
    ZodArray.prototype.length = function (len, message) {
        return this.min(len, message).max(len, message);
    };
    ZodArray.prototype.nonempty = function (message) {
        return this.min(1, message); // new ZodArray({ ...this._def, cardinality:"atleastone" });
    };
    ZodArray.create = function (schema, params) {
        return new ZodArray(__assign({ type: schema, minLength: null, maxLength: null, typeName: ZodFirstPartyTypeKind.ZodArray }, processCreateParams(params)));
    };
    return ZodArray;
}(ZodType));
exports.ZodArray = ZodArray;
/////////////////////////////////////////
/////////////////////////////////////////
//////////                     //////////
//////////      ZodObject      //////////
//////////                     //////////
/////////////////////////////////////////
/////////////////////////////////////////
var objectUtil;
(function (objectUtil) {
    objectUtil.mergeShapes = function (first, second) {
        return __assign(__assign({}, first), second);
    };
    objectUtil.intersectShapes = function (first, second) {
        var e_5, _a;
        var firstKeys = util_1.util.objectKeys(first);
        var secondKeys = util_1.util.objectKeys(second);
        var sharedKeys = firstKeys.filter(function (k) { return secondKeys.indexOf(k) !== -1; });
        var sharedShape = {};
        try {
            for (var sharedKeys_1 = __values(sharedKeys), sharedKeys_1_1 = sharedKeys_1.next(); !sharedKeys_1_1.done; sharedKeys_1_1 = sharedKeys_1.next()) {
                var k = sharedKeys_1_1.value;
                sharedShape[k] = ZodIntersection.create(first[k], second[k]);
            }
        }
        catch (e_5_1) { e_5 = { error: e_5_1 }; }
        finally {
            try {
                if (sharedKeys_1_1 && !sharedKeys_1_1.done && (_a = sharedKeys_1.return)) _a.call(sharedKeys_1);
            }
            finally { if (e_5) throw e_5.error; }
        }
        return __assign(__assign(__assign({}, first), second), sharedShape);
    };
})(objectUtil = exports.objectUtil || (exports.objectUtil = {}));
var mergeObjects = function (first) { return function (second) {
    var mergedShape = objectUtil.mergeShapes(first._def.shape(), second._def.shape());
    var merged = new ZodObject({
        // effects: [...(first._def.effects || []), ...(second._def.effects || [])],
        unknownKeys: first._def.unknownKeys,
        catchall: first._def.catchall,
        shape: function () { return mergedShape; },
        typeName: ZodFirstPartyTypeKind.ZodObject,
    });
    return merged;
}; };
exports.mergeObjects = mergeObjects;
var AugmentFactory = function (def) { return function (augmentation) {
    return new ZodObject(__assign(__assign({}, def), { shape: function () { return (__assign(__assign({}, def.shape()), augmentation)); } }));
}; };
function deepPartialify(schema) {
    if (schema instanceof ZodObject) {
        var newShape_1 = {};
        for (var key in schema.shape) {
            var fieldSchema = schema.shape[key];
            newShape_1[key] = ZodOptional.create(deepPartialify(fieldSchema));
        }
        return new ZodObject(__assign(__assign({}, schema._def), { shape: function () { return newShape_1; } }));
    }
    else if (schema instanceof ZodArray) {
        return ZodArray.create(deepPartialify(schema.element));
    }
    else if (schema instanceof ZodOptional) {
        return ZodOptional.create(deepPartialify(schema.unwrap()));
    }
    else if (schema instanceof ZodNullable) {
        return ZodNullable.create(deepPartialify(schema.unwrap()));
    }
    else if (schema instanceof ZodTuple) {
        return ZodTuple.create(schema.items.map(function (item) { return deepPartialify(item); }));
    }
    else {
        return schema;
    }
}
var ZodObject = /** @class */ (function (_super) {
    __extends(ZodObject, _super);
    function ZodObject() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._cached = null;
        /**
         * @deprecated In most cases, this is no longer needed - unknown properties are now silently stripped.
         * If you want to pass through unknown properties, use `.passthrough()` instead.
         */
        _this.nonstrict = _this.passthrough;
        _this.augment = AugmentFactory(_this._def);
        _this.extend = AugmentFactory(_this._def);
        return _this;
    }
    ZodObject.prototype._getCached = function () {
        if (this._cached !== null)
            return this._cached;
        var shape = this._def.shape();
        var keys = util_1.util.objectKeys(shape);
        return (this._cached = { shape: shape, keys: keys });
    };
    ZodObject.prototype._parse = function (ctx, data, parsedType) {
        var e_6, _a, e_7, _b, e_8, _c;
        if (parsedType !== parseUtil_1.ZodParsedType.object) {
            this.addIssue(ctx, {
                code: ZodError_1.ZodIssueCode.invalid_type,
                expected: parseUtil_1.ZodParsedType.object,
                received: parsedType,
            }, { data: data });
            return parseUtil_1.INVALID;
        }
        var _d = this._getCached(), shape = _d.shape, shapeKeys = _d.keys;
        var invalid = false;
        var tasks = [];
        var resultObject = {};
        var handleParsed = function (key, parsedValue) {
            if ((0, parseUtil_1.isOk)(parsedValue)) {
                var value = parsedValue.value;
                if (typeof value !== "undefined" || key in data) {
                    // key was valid but result was undefined: add it to the result object
                    // only if key was in the input data object - if it wasn't, then it's
                    // an optional key that should not be added
                    resultObject[key] = value;
                }
            }
            else if ((0, parseUtil_1.isInvalid)(parsedValue)) {
                invalid = true;
            }
            else {
                tasks.push(parsedValue.then(function (parsed) { return handleParsed(key, parsed); }));
            }
        };
        try {
            for (var shapeKeys_1 = __values(shapeKeys), shapeKeys_1_1 = shapeKeys_1.next(); !shapeKeys_1_1.done; shapeKeys_1_1 = shapeKeys_1.next()) {
                var key = shapeKeys_1_1.value;
                var keyValidator = shape[key];
                var value = data[key];
                handleParsed(key, keyValidator._parse(ctx.stepInto(key), value, (0, parseUtil_1.getParsedType)(value)));
            }
        }
        catch (e_6_1) { e_6 = { error: e_6_1 }; }
        finally {
            try {
                if (shapeKeys_1_1 && !shapeKeys_1_1.done && (_a = shapeKeys_1.return)) _a.call(shapeKeys_1);
            }
            finally { if (e_6) throw e_6.error; }
        }
        if (this._def.catchall instanceof ZodNever) {
            var unknownKeys = this._def.unknownKeys;
            if (unknownKeys === "passthrough") {
                var dataKeys = util_1.util.objectKeys(data);
                var extraKeys = dataKeys.filter(function (k) { return !(k in shape); });
                try {
                    for (var extraKeys_1 = __values(extraKeys), extraKeys_1_1 = extraKeys_1.next(); !extraKeys_1_1.done; extraKeys_1_1 = extraKeys_1.next()) {
                        var key = extraKeys_1_1.value;
                        resultObject[key] = data[key];
                    }
                }
                catch (e_7_1) { e_7 = { error: e_7_1 }; }
                finally {
                    try {
                        if (extraKeys_1_1 && !extraKeys_1_1.done && (_b = extraKeys_1.return)) _b.call(extraKeys_1);
                    }
                    finally { if (e_7) throw e_7.error; }
                }
            }
            else if (unknownKeys === "strict") {
                var dataKeys = util_1.util.objectKeys(data);
                var extraKeys = dataKeys.filter(function (k) { return !(k in shape); });
                if (extraKeys.length > 0) {
                    invalid = true;
                    this.addIssue(ctx, {
                        code: ZodError_1.ZodIssueCode.unrecognized_keys,
                        keys: extraKeys,
                    }, { data: data });
                }
            }
            else if (unknownKeys === "strip") {
            }
            else {
                throw new Error("Internal ZodObject error: invalid unknownKeys value.");
            }
        }
        else {
            // run catchall validation
            var catchall = this._def.catchall;
            var dataKeys = util_1.util.objectKeys(data);
            var extraKeys = dataKeys.filter(function (k) { return !(k in shape); });
            try {
                for (var extraKeys_2 = __values(extraKeys), extraKeys_2_1 = extraKeys_2.next(); !extraKeys_2_1.done; extraKeys_2_1 = extraKeys_2.next()) {
                    var key = extraKeys_2_1.value;
                    var value = data[key];
                    handleParsed(key, catchall._parse(ctx.stepInto(key), value, (0, parseUtil_1.getParsedType)(value)));
                }
            }
            catch (e_8_1) { e_8 = { error: e_8_1 }; }
            finally {
                try {
                    if (extraKeys_2_1 && !extraKeys_2_1.done && (_c = extraKeys_2.return)) _c.call(extraKeys_2);
                }
                finally { if (e_8) throw e_8.error; }
            }
        }
        if (ctx.async) {
            return Promise.all(tasks).then(function () {
                return invalid ? parseUtil_1.INVALID : (0, parseUtil_1.OK)(resultObject);
            });
        }
        else {
            return invalid ? parseUtil_1.INVALID : (0, parseUtil_1.OK)(resultObject);
        }
    };
    Object.defineProperty(ZodObject.prototype, "shape", {
        get: function () {
            return this._def.shape();
        },
        enumerable: false,
        configurable: true
    });
    ZodObject.prototype.strict = function () {
        return new ZodObject(__assign(__assign({}, this._def), { unknownKeys: "strict" }));
    };
    ZodObject.prototype.strip = function () {
        return new ZodObject(__assign(__assign({}, this._def), { unknownKeys: "strip" }));
    };
    ZodObject.prototype.passthrough = function () {
        return new ZodObject(__assign(__assign({}, this._def), { unknownKeys: "passthrough" }));
    };
    ZodObject.prototype.setKey = function (key, schema) {
        var _a;
        return this.augment((_a = {}, _a[key] = schema, _a));
    };
    /**
     * Prior to zod@1.0.12 there was a bug in the
     * inferred type of merged objects. Please
     * upgrade if you are experiencing issues.
     */
    ZodObject.prototype.merge = function (merging) {
        var mergedShape = objectUtil.mergeShapes(this._def.shape(), merging._def.shape());
        var merged = new ZodObject({
            // effects: [], // wipe all refinements
            unknownKeys: merging._def.unknownKeys,
            catchall: merging._def.catchall,
            shape: function () { return mergedShape; },
            typeName: ZodFirstPartyTypeKind.ZodObject,
        });
        return merged;
    };
    ZodObject.prototype.catchall = function (index) {
        return new ZodObject(__assign(__assign({}, this._def), { catchall: index }));
    };
    ZodObject.prototype.pick = function (mask) {
        var _this = this;
        var shape = {};
        util_1.util.objectKeys(mask).map(function (key) {
            shape[key] = _this.shape[key];
        });
        return new ZodObject(__assign(__assign({}, this._def), { shape: function () { return shape; } }));
    };
    ZodObject.prototype.omit = function (mask) {
        var _this = this;
        var shape = {};
        util_1.util.objectKeys(this.shape).map(function (key) {
            if (util_1.util.objectKeys(mask).indexOf(key) === -1) {
                shape[key] = _this.shape[key];
            }
        });
        return new ZodObject(__assign(__assign({}, this._def), { shape: function () { return shape; } }));
    };
    ZodObject.prototype.deepPartial = function () {
        return deepPartialify(this);
    };
    ZodObject.prototype.partial = function (mask) {
        var _this = this;
        var newShape = {};
        if (mask) {
            // const newShape: any = {};
            util_1.util.objectKeys(this.shape).map(function (key) {
                if (util_1.util.objectKeys(mask).indexOf(key) === -1) {
                    newShape[key] = _this.shape[key];
                }
                else {
                    newShape[key] = _this.shape[key].optional();
                }
            });
            return new ZodObject(__assign(__assign({}, this._def), { shape: function () { return newShape; } }));
        }
        else {
            for (var key in this.shape) {
                var fieldSchema = this.shape[key];
                newShape[key] = fieldSchema.optional();
            }
        }
        return new ZodObject(__assign(__assign({}, this._def), { shape: function () { return newShape; } }));
    };
    ZodObject.prototype.required = function () {
        var newShape = {};
        for (var key in this.shape) {
            var fieldSchema = this.shape[key];
            var newField = fieldSchema;
            while (newField instanceof ZodOptional) {
                newField = newField._def.innerType;
            }
            newShape[key] = newField;
        }
        return new ZodObject(__assign(__assign({}, this._def), { shape: function () { return newShape; } }));
    };
    ZodObject.create = function (shape, params) {
        return new ZodObject(__assign({ shape: function () { return shape; }, unknownKeys: "strip", catchall: ZodNever.create(), typeName: ZodFirstPartyTypeKind.ZodObject }, processCreateParams(params)));
    };
    ZodObject.strictCreate = function (shape, params) {
        return new ZodObject(__assign({ shape: function () { return shape; }, unknownKeys: "strict", catchall: ZodNever.create(), typeName: ZodFirstPartyTypeKind.ZodObject }, processCreateParams(params)));
    };
    ZodObject.lazycreate = function (shape, params) {
        return new ZodObject(__assign({ shape: shape, unknownKeys: "strip", catchall: ZodNever.create(), typeName: ZodFirstPartyTypeKind.ZodObject }, processCreateParams(params)));
    };
    return ZodObject;
}(ZodType));
exports.ZodObject = ZodObject;
// export type toOpts<T> = T extends ZodUnionOptions ? T : never;
// export type ZodUnionType<
//   A extends ZodTypeAny,
//   B extends ZodTypeAny
// > = A extends ZodUnion<infer AOpts>
//   ? B extends ZodUnion<infer BOpts>
//     ? ZodUnion<toOpts<[...AOpts, ...BOpts]>>
//     : ZodUnion<toOpts<[...AOpts, B]>>
//   : B extends ZodUnion<infer BOpts>
//   ? ZodUnion<toOpts<[A, ...BOpts]>>
//   : ZodUnion<toOpts<[A, B]>>;
var ZodUnion = /** @class */ (function (_super) {
    __extends(ZodUnion, _super);
    function ZodUnion() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ZodUnion.prototype._parse = function (ctx, data, parsedType) {
        var e_9, _a;
        var _this = this;
        var options = this._def.options;
        var noMatch = function (allIssues) {
            var unionErrors = allIssues.map(function (issues) { return new ZodError_1.ZodError(issues); });
            var nonTypeErrors = unionErrors.filter(function (err) {
                return err.issues[0].code !== "invalid_type";
            });
            if (nonTypeErrors.length === 1) {
                // TODO encapsulate
                nonTypeErrors[0].issues.forEach(function (issue) { return ctx.issues.push(issue); });
            }
            else {
                _this.addIssue(ctx, {
                    code: ZodError_1.ZodIssueCode.invalid_union,
                    unionErrors: unionErrors,
                }, { data: data });
            }
            return parseUtil_1.INVALID;
        };
        if (ctx.async) {
            var contexts_1 = options.map(function () { return new parseUtil_1.ParseContext(__assign(__assign({}, ctx.def), { issues: [] })); });
            return Promise.all(options.map(function (option, index) {
                return option._parse(contexts_1[index], data, parsedType);
            })).then(function (parsedOptions) {
                var e_10, _a;
                try {
                    for (var parsedOptions_1 = __values(parsedOptions), parsedOptions_1_1 = parsedOptions_1.next(); !parsedOptions_1_1.done; parsedOptions_1_1 = parsedOptions_1.next()) {
                        var parsedOption = parsedOptions_1_1.value;
                        if ((0, parseUtil_1.isOk)(parsedOption)) {
                            return parsedOption;
                        }
                    }
                }
                catch (e_10_1) { e_10 = { error: e_10_1 }; }
                finally {
                    try {
                        if (parsedOptions_1_1 && !parsedOptions_1_1.done && (_a = parsedOptions_1.return)) _a.call(parsedOptions_1);
                    }
                    finally { if (e_10) throw e_10.error; }
                }
                return noMatch(contexts_1.map(function (ctx) { return ctx.issues; }));
            });
        }
        else {
            var allIssues = [];
            try {
                for (var options_1 = __values(options), options_1_1 = options_1.next(); !options_1_1.done; options_1_1 = options_1.next()) {
                    var option = options_1_1.value;
                    var optionCtx = new parseUtil_1.ParseContext(__assign(__assign({}, ctx.def), { issues: [] }));
                    var parsedOption = option._parseSync(optionCtx, data, parsedType);
                    if ((0, parseUtil_1.isInvalid)(parsedOption)) {
                        allIssues.push(optionCtx.issues);
                    }
                    else {
                        return parsedOption;
                    }
                }
            }
            catch (e_9_1) { e_9 = { error: e_9_1 }; }
            finally {
                try {
                    if (options_1_1 && !options_1_1.done && (_a = options_1.return)) _a.call(options_1);
                }
                finally { if (e_9) throw e_9.error; }
            }
            return noMatch(allIssues);
        }
    };
    Object.defineProperty(ZodUnion.prototype, "options", {
        get: function () {
            return this._def.options;
        },
        enumerable: false,
        configurable: true
    });
    ZodUnion.create = function (types, params) {
        return new ZodUnion(__assign({ options: types, typeName: ZodFirstPartyTypeKind.ZodUnion }, processCreateParams(params)));
    };
    return ZodUnion;
}(ZodType));
exports.ZodUnion = ZodUnion;
function mergeValues(a, b) {
    var e_11, _a;
    var aType = (0, parseUtil_1.getParsedType)(a);
    var bType = (0, parseUtil_1.getParsedType)(b);
    if (a === b) {
        return { valid: true, data: a };
    }
    else if (aType === parseUtil_1.ZodParsedType.object && bType === parseUtil_1.ZodParsedType.object) {
        var bKeys_1 = util_1.util.objectKeys(b);
        var sharedKeys = util_1.util
            .objectKeys(a)
            .filter(function (key) { return bKeys_1.indexOf(key) !== -1; });
        var newObj = __assign(__assign({}, a), b);
        try {
            for (var sharedKeys_2 = __values(sharedKeys), sharedKeys_2_1 = sharedKeys_2.next(); !sharedKeys_2_1.done; sharedKeys_2_1 = sharedKeys_2.next()) {
                var key = sharedKeys_2_1.value;
                var sharedValue = mergeValues(a[key], b[key]);
                if (!sharedValue.valid) {
                    return { valid: false };
                }
                newObj[key] = sharedValue.data;
            }
        }
        catch (e_11_1) { e_11 = { error: e_11_1 }; }
        finally {
            try {
                if (sharedKeys_2_1 && !sharedKeys_2_1.done && (_a = sharedKeys_2.return)) _a.call(sharedKeys_2);
            }
            finally { if (e_11) throw e_11.error; }
        }
        return { valid: true, data: newObj };
    }
    else if (aType === parseUtil_1.ZodParsedType.array && bType === parseUtil_1.ZodParsedType.array) {
        if (a.length !== b.length) {
            return { valid: false };
        }
        var newArray = [];
        for (var index = 0; index < a.length; index++) {
            var itemA = a[index];
            var itemB = b[index];
            var sharedValue = mergeValues(itemA, itemB);
            if (!sharedValue.valid) {
                return { valid: false };
            }
            newArray.push(sharedValue.data);
        }
        return { valid: true, data: newArray };
    }
    else {
        return { valid: false };
    }
}
var ZodIntersection = /** @class */ (function (_super) {
    __extends(ZodIntersection, _super);
    function ZodIntersection() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ZodIntersection.prototype._parse = function (ctx, data, parsedType) {
        var _this = this;
        var handleParsed = function (parsedLeft, parsedRight) {
            if ((0, parseUtil_1.isInvalid)(parsedLeft) || (0, parseUtil_1.isInvalid)(parsedRight)) {
                return parseUtil_1.INVALID;
            }
            var merged = mergeValues(parsedLeft.value, parsedRight.value);
            if (!merged.valid) {
                _this.addIssue(ctx, {
                    code: ZodError_1.ZodIssueCode.invalid_intersection_types,
                }, { data: data });
                return parseUtil_1.INVALID;
            }
            return (0, parseUtil_1.OK)(merged.data);
        };
        if (ctx.async) {
            return Promise.all([
                this._def.left._parse(ctx, data, parsedType),
                this._def.right._parse(ctx, data, parsedType),
            ]).then(function (_a) {
                var _b = __read(_a, 2), left = _b[0], right = _b[1];
                return handleParsed(left, right);
            });
        }
        else {
            return handleParsed(this._def.left._parseSync(ctx, data, parsedType), this._def.right._parseSync(ctx, data, parsedType));
        }
    };
    ZodIntersection.create = function (left, right, params) {
        return new ZodIntersection(__assign({ left: left, right: right, typeName: ZodFirstPartyTypeKind.ZodIntersection }, processCreateParams(params)));
    };
    return ZodIntersection;
}(ZodType));
exports.ZodIntersection = ZodIntersection;
var ZodTuple = /** @class */ (function (_super) {
    __extends(ZodTuple, _super);
    function ZodTuple() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ZodTuple.prototype._parse = function (ctx, data, parsedType) {
        if (parsedType !== parseUtil_1.ZodParsedType.array) {
            this.addIssue(ctx, {
                code: ZodError_1.ZodIssueCode.invalid_type,
                expected: parseUtil_1.ZodParsedType.array,
                received: parsedType,
            }, { data: data });
            return parseUtil_1.INVALID;
        }
        var rest = this._def.rest;
        if (!rest && data.length > this._def.items.length) {
            this.addIssue(ctx, {
                code: ZodError_1.ZodIssueCode.too_big,
                maximum: this._def.items.length,
                inclusive: true,
                type: "array",
            }, { data: data });
            return parseUtil_1.INVALID;
        }
        if (data.length < this._def.items.length) {
            this.addIssue(ctx, {
                code: ZodError_1.ZodIssueCode.too_small,
                minimum: this._def.items.length,
                inclusive: true,
                type: "array",
            }, { data: data });
            return parseUtil_1.INVALID;
        }
        var tasks = [];
        var items = this._def.items;
        var parseResult = new Array(data.length);
        var invalid = false;
        var handleParsed = function (index, parsedItem) {
            if ((0, parseUtil_1.isOk)(parsedItem)) {
                parseResult[index] = parsedItem.value;
            }
            else if ((0, parseUtil_1.isInvalid)(parsedItem)) {
                invalid = true;
            }
            else {
                tasks.push(parsedItem.then(function (parsed) { return handleParsed(index, parsed); }));
            }
        };
        items.forEach(function (item, index) {
            handleParsed(index, item._parse(ctx.stepInto(index), data[index], (0, parseUtil_1.getParsedType)(data[index])));
        });
        if (rest) {
            var restData = data.slice(items.length);
            restData.forEach(function (dataItem, _index) {
                var index = _index + items.length;
                handleParsed(index, rest._parse(ctx.stepInto(index), dataItem, (0, parseUtil_1.getParsedType)(dataItem)));
            });
        }
        if (ctx.async) {
            return Promise.all(tasks).then(function () {
                return invalid ? parseUtil_1.INVALID : (0, parseUtil_1.OK)(parseResult);
            });
        }
        else {
            return invalid ? parseUtil_1.INVALID : (0, parseUtil_1.OK)(parseResult);
        }
    };
    Object.defineProperty(ZodTuple.prototype, "items", {
        get: function () {
            return this._def.items;
        },
        enumerable: false,
        configurable: true
    });
    ZodTuple.prototype.rest = function (rest) {
        return new ZodTuple(__assign(__assign({}, this._def), { rest: rest }));
    };
    ZodTuple.create = function (schemas, params) {
        return new ZodTuple(__assign({ items: schemas, typeName: ZodFirstPartyTypeKind.ZodTuple, rest: null }, processCreateParams(params)));
    };
    return ZodTuple;
}(ZodType));
exports.ZodTuple = ZodTuple;
var ZodRecord = /** @class */ (function (_super) {
    __extends(ZodRecord, _super);
    function ZodRecord() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(ZodRecord.prototype, "keySchema", {
        get: function () {
            return this._def.keyType;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ZodRecord.prototype, "valueSchema", {
        get: function () {
            return this._def.valueType;
        },
        enumerable: false,
        configurable: true
    });
    ZodRecord.prototype._parse = function (ctx, data, parsedType) {
        if (parsedType !== parseUtil_1.ZodParsedType.object) {
            this.addIssue(ctx, {
                code: ZodError_1.ZodIssueCode.invalid_type,
                expected: parseUtil_1.ZodParsedType.object,
                received: parsedType,
            }, { data: data });
            return parseUtil_1.INVALID;
        }
        var tasks = [];
        var keyType = this._def.keyType;
        var valueType = this._def.valueType;
        var parseResult = {};
        var invalid = false;
        var handleParsed = function (parsedKey, parsedValue) {
            if ((0, parseUtil_1.isOk)(parsedKey) && (0, parseUtil_1.isOk)(parsedValue)) {
                parseResult[parsedKey.value] = parsedValue.value;
            }
            else if ((0, parseUtil_1.isAsync)(parsedKey) || (0, parseUtil_1.isAsync)(parsedValue)) {
                tasks.push(Promise.all([parsedKey, parsedValue]).then(function (_a) {
                    var _b = __read(_a, 2), k = _b[0], v = _b[1];
                    return handleParsed(k, v);
                }));
            }
            else {
                invalid = true;
            }
        };
        for (var key in data) {
            handleParsed(keyType._parse(ctx.stepInto(key), key, (0, parseUtil_1.getParsedType)(key)), valueType._parse(ctx.stepInto(key), data[key], (0, parseUtil_1.getParsedType)(data[key])));
        }
        if (ctx.async) {
            return Promise.all(tasks).then(function () {
                return invalid ? parseUtil_1.INVALID : (0, parseUtil_1.OK)(parseResult);
            });
        }
        else {
            return invalid ? parseUtil_1.INVALID : (0, parseUtil_1.OK)(parseResult);
        }
    };
    Object.defineProperty(ZodRecord.prototype, "element", {
        get: function () {
            return this._def.valueType;
        },
        enumerable: false,
        configurable: true
    });
    ZodRecord.create = function (first, second, third) {
        if (second instanceof ZodType) {
            return new ZodRecord(__assign({ keyType: first, valueType: second, typeName: ZodFirstPartyTypeKind.ZodRecord }, processCreateParams(third)));
        }
        return new ZodRecord(__assign({ keyType: ZodString.create(), valueType: first, typeName: ZodFirstPartyTypeKind.ZodRecord }, processCreateParams(second)));
    };
    return ZodRecord;
}(ZodType));
exports.ZodRecord = ZodRecord;
var ZodMap = /** @class */ (function (_super) {
    __extends(ZodMap, _super);
    function ZodMap() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ZodMap.prototype._parse = function (ctx, data, parsedType) {
        if (parsedType !== parseUtil_1.ZodParsedType.map) {
            this.addIssue(ctx, {
                code: ZodError_1.ZodIssueCode.invalid_type,
                expected: parseUtil_1.ZodParsedType.map,
                received: parsedType,
            }, { data: data });
            return parseUtil_1.INVALID;
        }
        var keyType = this._def.keyType;
        var valueType = this._def.valueType;
        var dataMap = data;
        var parseResult = new Map();
        var tasks = [];
        var invalid = false;
        var handleParsed = function (parsedKey, parsedValue) {
            if ((0, parseUtil_1.isAsync)(parsedKey) || (0, parseUtil_1.isAsync)(parsedValue)) {
                tasks.push(Promise.all([parsedKey, parsedValue]).then(function (_a) {
                    var _b = __read(_a, 2), k = _b[0], v = _b[1];
                    return handleParsed(k, v);
                }));
            }
            else if ((0, parseUtil_1.isInvalid)(parsedKey) || (0, parseUtil_1.isInvalid)(parsedValue)) {
                invalid = true;
            }
            else {
                parseResult.set(parsedKey.value, parsedValue.value);
            }
        };
        __spreadArray([], __read(dataMap.entries()), false).forEach(function (_a, index) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var entryCtx = ctx.stepInto(index);
            var parsedKey = keyType._parse(entryCtx.stepInto("key"), key, (0, parseUtil_1.getParsedType)(key));
            var parsedValue = valueType._parse(entryCtx.stepInto("value"), value, (0, parseUtil_1.getParsedType)(value));
            handleParsed(parsedKey, parsedValue);
        });
        if (ctx.async) {
            return Promise.all(tasks).then(function () {
                return invalid ? parseUtil_1.INVALID : (0, parseUtil_1.OK)(parseResult);
            });
        }
        else {
            return invalid ? parseUtil_1.INVALID : (0, parseUtil_1.OK)(parseResult);
        }
    };
    ZodMap.create = function (keyType, valueType, params) {
        return new ZodMap(__assign({ valueType: valueType, keyType: keyType, typeName: ZodFirstPartyTypeKind.ZodMap }, processCreateParams(params)));
    };
    return ZodMap;
}(ZodType));
exports.ZodMap = ZodMap;
var ZodSet = /** @class */ (function (_super) {
    __extends(ZodSet, _super);
    function ZodSet() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ZodSet.prototype._parse = function (ctx, data, parsedType) {
        if (parsedType !== parseUtil_1.ZodParsedType.set) {
            this.addIssue(ctx, {
                code: ZodError_1.ZodIssueCode.invalid_type,
                expected: parseUtil_1.ZodParsedType.set,
                received: parsedType,
            }, { data: data });
            return parseUtil_1.INVALID;
        }
        var dataSet = data;
        var valueType = this._def.valueType;
        var parsedSet = new Set();
        var tasks = [];
        var invalid = false;
        var handleParsed = function (parsedItem) {
            if ((0, parseUtil_1.isOk)(parsedItem)) {
                parsedSet.add(parsedItem.value);
            }
            else if ((0, parseUtil_1.isInvalid)(parsedItem)) {
                invalid = true;
            }
            else {
                tasks.push(parsedItem.then(function (parsed) { return handleParsed(parsed); }));
            }
        };
        __spreadArray([], __read(dataSet.values()), false).forEach(function (item, i) {
            return handleParsed(valueType._parse(ctx.stepInto(i), item, (0, parseUtil_1.getParsedType)(item)));
        });
        if (ctx.async) {
            return Promise.all(tasks).then(function () { return (invalid ? parseUtil_1.INVALID : (0, parseUtil_1.OK)(parsedSet)); });
        }
        else {
            return invalid ? parseUtil_1.INVALID : (0, parseUtil_1.OK)(parsedSet);
        }
    };
    ZodSet.create = function (valueType, params) {
        return new ZodSet(__assign({ valueType: valueType, typeName: ZodFirstPartyTypeKind.ZodSet }, processCreateParams(params)));
    };
    return ZodSet;
}(ZodType));
exports.ZodSet = ZodSet;
var ZodFunction = /** @class */ (function (_super) {
    __extends(ZodFunction, _super);
    function ZodFunction() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.validate = _this.implement;
        return _this;
    }
    ZodFunction.prototype._parse = function (ctx, data, parsedType) {
        var _this = this;
        if (parsedType !== parseUtil_1.ZodParsedType.function) {
            this.addIssue(ctx, {
                code: ZodError_1.ZodIssueCode.invalid_type,
                expected: parseUtil_1.ZodParsedType.function,
                received: parsedType,
            }, { data: data });
            return parseUtil_1.INVALID;
        }
        function makeArgsIssue(args, error) {
            return (0, parseUtil_1.makeIssue)({
                data: args,
                path: (0, parseUtil_1.pathToArray)(ctx.path),
                errorMaps: [ctx.errorMap],
                issueData: {
                    code: ZodError_1.ZodIssueCode.invalid_arguments,
                    argumentsError: error,
                },
            });
        }
        function makeReturnsIssue(returns, error) {
            return (0, parseUtil_1.makeIssue)({
                data: returns,
                path: (0, parseUtil_1.pathToArray)(ctx.path),
                errorMaps: [ctx.errorMap],
                issueData: {
                    code: ZodError_1.ZodIssueCode.invalid_return_type,
                    returnTypeError: error,
                },
            });
        }
        var params = { errorMap: ctx.errorMap };
        var fn = data;
        if (this._def.returns instanceof ZodPromise) {
            return (0, parseUtil_1.OK)(function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                return __awaiter(_this, void 0, void 0, function () {
                    var error, parsedArgs, result, parsedReturns;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                error = new ZodError_1.ZodError([]);
                                return [4 /*yield*/, this._def.args
                                        .parseAsync(args, params)
                                        .catch(function (e) {
                                        error.addIssue(makeArgsIssue(args, e));
                                        throw error;
                                    })];
                            case 1:
                                parsedArgs = _a.sent();
                                return [4 /*yield*/, fn.apply(void 0, __spreadArray([], __read(parsedArgs), false))];
                            case 2:
                                result = _a.sent();
                                return [4 /*yield*/, this._def.returns
                                        .parseAsync(result, params)
                                        .catch(function (e) {
                                        error.addIssue(makeReturnsIssue(result, e));
                                        throw error;
                                    })];
                            case 3:
                                parsedReturns = _a.sent();
                                return [2 /*return*/, parsedReturns];
                        }
                    });
                });
            });
        }
        else {
            return (0, parseUtil_1.OK)(function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                var parsedArgs = _this._def.args.safeParse(args, params);
                if (!parsedArgs.success) {
                    throw new ZodError_1.ZodError([makeArgsIssue(args, parsedArgs.error)]);
                }
                var result = fn.apply(void 0, __spreadArray([], __read(parsedArgs.data), false));
                var parsedReturns = _this._def.returns.safeParse(result, params);
                if (!parsedReturns.success) {
                    throw new ZodError_1.ZodError([makeReturnsIssue(result, parsedReturns.error)]);
                }
                return parsedReturns.data;
            });
        }
    };
    ZodFunction.prototype.parameters = function () {
        return this._def.args;
    };
    ZodFunction.prototype.returnType = function () {
        return this._def.returns;
    };
    ZodFunction.prototype.args = function () {
        var items = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            items[_i] = arguments[_i];
        }
        return new ZodFunction(__assign(__assign({}, this._def), { args: ZodTuple.create(items).rest(ZodUnknown.create()) }));
    };
    ZodFunction.prototype.returns = function (returnType) {
        return new ZodFunction(__assign(__assign({}, this._def), { returns: returnType }));
    };
    ZodFunction.prototype.implement = function (func) {
        var validatedFunc = this.parse(func);
        return validatedFunc;
    };
    ZodFunction.prototype.strictImplement = function (func) {
        var validatedFunc = this.parse(func);
        return validatedFunc;
    };
    ZodFunction.create = function (args, returns, params) {
        return new ZodFunction(__assign({ args: (args
                ? args.rest(ZodUnknown.create())
                : ZodTuple.create([]).rest(ZodUnknown.create())), returns: returns || ZodUnknown.create(), typeName: ZodFirstPartyTypeKind.ZodFunction }, processCreateParams(params)));
    };
    return ZodFunction;
}(ZodType));
exports.ZodFunction = ZodFunction;
var ZodLazy = /** @class */ (function (_super) {
    __extends(ZodLazy, _super);
    function ZodLazy() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(ZodLazy.prototype, "schema", {
        get: function () {
            return this._def.getter();
        },
        enumerable: false,
        configurable: true
    });
    ZodLazy.prototype._parse = function (ctx, data, parsedType) {
        var lazySchema = this._def.getter();
        return lazySchema._parse(ctx, data, parsedType);
    };
    ZodLazy.create = function (getter, params) {
        return new ZodLazy(__assign({ getter: getter, typeName: ZodFirstPartyTypeKind.ZodLazy }, processCreateParams(params)));
    };
    return ZodLazy;
}(ZodType));
exports.ZodLazy = ZodLazy;
var ZodLiteral = /** @class */ (function (_super) {
    __extends(ZodLiteral, _super);
    function ZodLiteral() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ZodLiteral.prototype._parse = function (ctx, data, _parsedType) {
        if (data !== this._def.value) {
            this.addIssue(ctx, {
                code: ZodError_1.ZodIssueCode.invalid_type,
                expected: this._def.value,
                received: data,
            }, { data: data });
            return parseUtil_1.INVALID;
        }
        return (0, parseUtil_1.OK)(data);
    };
    Object.defineProperty(ZodLiteral.prototype, "value", {
        get: function () {
            return this._def.value;
        },
        enumerable: false,
        configurable: true
    });
    ZodLiteral.create = function (value, params) {
        return new ZodLiteral(__assign({ value: value, typeName: ZodFirstPartyTypeKind.ZodLiteral }, processCreateParams(params)));
    };
    return ZodLiteral;
}(ZodType));
exports.ZodLiteral = ZodLiteral;
function createZodEnum(values) {
    return new ZodEnum({
        values: values,
        typeName: ZodFirstPartyTypeKind.ZodEnum,
    });
}
var ZodEnum = /** @class */ (function (_super) {
    __extends(ZodEnum, _super);
    function ZodEnum() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ZodEnum.prototype._parse = function (ctx, data, _parsedType) {
        if (this._def.values.indexOf(data) === -1) {
            this.addIssue(ctx, {
                code: ZodError_1.ZodIssueCode.invalid_enum_value,
                options: this._def.values,
            }, { data: data });
            return parseUtil_1.INVALID;
        }
        return (0, parseUtil_1.OK)(data);
    };
    Object.defineProperty(ZodEnum.prototype, "options", {
        get: function () {
            return this._def.values;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ZodEnum.prototype, "enum", {
        get: function () {
            var e_12, _a;
            var enumValues = {};
            try {
                for (var _b = __values(this._def.values), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var val = _c.value;
                    enumValues[val] = val;
                }
            }
            catch (e_12_1) { e_12 = { error: e_12_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_12) throw e_12.error; }
            }
            return enumValues;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ZodEnum.prototype, "Values", {
        get: function () {
            var e_13, _a;
            var enumValues = {};
            try {
                for (var _b = __values(this._def.values), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var val = _c.value;
                    enumValues[val] = val;
                }
            }
            catch (e_13_1) { e_13 = { error: e_13_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_13) throw e_13.error; }
            }
            return enumValues;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ZodEnum.prototype, "Enum", {
        get: function () {
            var e_14, _a;
            var enumValues = {};
            try {
                for (var _b = __values(this._def.values), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var val = _c.value;
                    enumValues[val] = val;
                }
            }
            catch (e_14_1) { e_14 = { error: e_14_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_14) throw e_14.error; }
            }
            return enumValues;
        },
        enumerable: false,
        configurable: true
    });
    ZodEnum.create = createZodEnum;
    return ZodEnum;
}(ZodType));
exports.ZodEnum = ZodEnum;
var ZodNativeEnum = /** @class */ (function (_super) {
    __extends(ZodNativeEnum, _super);
    function ZodNativeEnum() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ZodNativeEnum.prototype._parse = function (ctx, data, _parsedType) {
        var nativeEnumValues = util_1.util.getValidEnumValues(this._def.values);
        if (nativeEnumValues.indexOf(data) === -1) {
            this.addIssue(ctx, {
                code: ZodError_1.ZodIssueCode.invalid_enum_value,
                options: util_1.util.objectValues(nativeEnumValues),
            }, { data: data });
            return parseUtil_1.INVALID;
        }
        return (0, parseUtil_1.OK)(data);
    };
    ZodNativeEnum.create = function (values, params) {
        return new ZodNativeEnum(__assign({ values: values, typeName: ZodFirstPartyTypeKind.ZodNativeEnum }, processCreateParams(params)));
    };
    return ZodNativeEnum;
}(ZodType));
exports.ZodNativeEnum = ZodNativeEnum;
var ZodPromise = /** @class */ (function (_super) {
    __extends(ZodPromise, _super);
    function ZodPromise() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ZodPromise.prototype._parse = function (ctx, data, parsedType) {
        var _this = this;
        if (parsedType !== parseUtil_1.ZodParsedType.promise && ctx.async === false) {
            this.addIssue(ctx, {
                code: ZodError_1.ZodIssueCode.invalid_type,
                expected: parseUtil_1.ZodParsedType.promise,
                received: parsedType,
            }, { data: data });
            return parseUtil_1.INVALID;
        }
        var promisified = parsedType === parseUtil_1.ZodParsedType.promise ? data : Promise.resolve(data);
        return (0, parseUtil_1.OK)(promisified.then(function (data) {
            return _this._def.type.parseAsync(data, {
                path: (0, parseUtil_1.pathToArray)(ctx.path),
                errorMap: ctx.errorMap,
            });
        }));
    };
    ZodPromise.create = function (schema, params) {
        return new ZodPromise(__assign({ type: schema, typeName: ZodFirstPartyTypeKind.ZodPromise }, processCreateParams(params)));
    };
    return ZodPromise;
}(ZodType));
exports.ZodPromise = ZodPromise;
var ZodEffects = /** @class */ (function (_super) {
    __extends(ZodEffects, _super);
    function ZodEffects() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ZodEffects.prototype.innerType = function () {
        return this._def.schema;
    };
    ZodEffects.prototype._parse = function (ctx, initialData, initialParsedType) {
        var _this = this;
        var isSync = ctx.async === false;
        var effect = this._def.effect || null;
        var data = initialData;
        var parsedType = initialParsedType;
        if (effect.type === "preprocess") {
            var processed = effect.transform(initialData);
            if (ctx.async) {
                return Promise.resolve(processed).then(function (val) {
                    return _this._def.schema._parseAsync(ctx, val, (0, parseUtil_1.getParsedType)(val));
                });
            }
            else {
                var result = this._def.schema._parseSync(ctx, processed, (0, parseUtil_1.getParsedType)(processed));
                if (result instanceof Promise)
                    throw new Error("Asynchronous preprocess step encountered during synchronous parse operation. Use .parseAsync instead.");
                return result;
            }
        }
        if (effect.type === "refinement") {
            var invalid_1 = false;
            var executeRefinement_1 = function (acc, effect) {
                var result = effect.refinement(acc, checkCtx_1);
                if (result instanceof Promise) {
                    if (isSync) {
                        throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");
                    }
                    return result.then(function () { return acc; });
                }
                return acc;
            };
            var _addIssue = function (arg) {
                // don't abort early on refinement issues
                invalid_1 = true;
                _this.addIssue(ctx, arg, { data: data });
            };
            var checkCtx_1 = {
                addIssue: _addIssue,
                get path() {
                    return (0, parseUtil_1.pathToArray)(ctx.path);
                },
            };
            checkCtx_1.addIssue = checkCtx_1.addIssue.bind(checkCtx_1);
            if (isSync) {
                var base = this._def.schema._parseSync(ctx, data, parsedType);
                if ((0, parseUtil_1.isInvalid)(base))
                    return parseUtil_1.INVALID;
                var result = executeRefinement_1(base.value, effect);
                return invalid_1 ? parseUtil_1.INVALID : (0, parseUtil_1.OK)(result);
            }
            else {
                return this._def.schema
                    ._parseAsync(ctx, data, parsedType)
                    .then(function (result) {
                    if ((0, parseUtil_1.isInvalid)(result))
                        return parseUtil_1.INVALID;
                    return executeRefinement_1(result.value, effect);
                })
                    .then(function (val) { return (invalid_1 ? parseUtil_1.INVALID : (0, parseUtil_1.OK)(val)); });
            }
        }
        if (effect.type === "transform") {
            var invalid_2 = false;
            var applyTransform_1 = function (acc, effect) {
                var transformed = effect.transform(acc);
                if (transformed instanceof Promise && isSync) {
                    throw new Error("Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.");
                }
                return transformed;
            };
            if (isSync) {
                var base = this._def.schema._parseSync(ctx, data, parsedType);
                if ((0, parseUtil_1.isInvalid)(base))
                    return parseUtil_1.INVALID;
                var result = applyTransform_1(base.value, effect);
                return invalid_2 ? parseUtil_1.INVALID : (0, parseUtil_1.OK)(result);
            }
            else {
                return this._def.schema
                    ._parseAsync(ctx, data, parsedType)
                    .then(function (base) {
                    if ((0, parseUtil_1.isInvalid)(base))
                        return parseUtil_1.INVALID;
                    return applyTransform_1(base.value, effect);
                })
                    .then(function (val) { return (invalid_2 ? parseUtil_1.INVALID : (0, parseUtil_1.OK)(val)); });
            }
        }
        util_1.util.assertNever(effect);
    };
    ZodEffects.create = function (schema, effect, params) {
        return new ZodEffects(__assign({ schema: schema, typeName: ZodFirstPartyTypeKind.ZodEffects, effect: effect }, processCreateParams(params)));
    };
    ZodEffects.createWithPreprocess = function (preprocess, schema, params) {
        return new ZodEffects(__assign({ schema: schema, effect: { type: "preprocess", transform: preprocess }, typeName: ZodFirstPartyTypeKind.ZodEffects }, processCreateParams(params)));
    };
    return ZodEffects;
}(ZodType));
exports.ZodEffects = ZodEffects;
exports.ZodTransformer = ZodEffects;
var ZodOptional = /** @class */ (function (_super) {
    __extends(ZodOptional, _super);
    function ZodOptional() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ZodOptional.prototype._parse = function (ctx, data, parsedType) {
        if (parsedType === parseUtil_1.ZodParsedType.undefined) {
            return (0, parseUtil_1.OK)(undefined);
        }
        return this._def.innerType._parse(ctx, data, parsedType);
    };
    ZodOptional.prototype.unwrap = function () {
        return this._def.innerType;
    };
    ZodOptional.create = function (type, params) {
        return new ZodOptional(__assign({ innerType: type, typeName: ZodFirstPartyTypeKind.ZodOptional }, processCreateParams(params)));
    };
    return ZodOptional;
}(ZodType));
exports.ZodOptional = ZodOptional;
var ZodNullable = /** @class */ (function (_super) {
    __extends(ZodNullable, _super);
    function ZodNullable() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ZodNullable.prototype._parse = function (ctx, data, parsedType) {
        if (parsedType === parseUtil_1.ZodParsedType.null) {
            return (0, parseUtil_1.OK)(null);
        }
        return this._def.innerType._parse(ctx, data, parsedType);
    };
    ZodNullable.prototype.unwrap = function () {
        return this._def.innerType;
    };
    ZodNullable.create = function (type, params) {
        return new ZodNullable(__assign({ innerType: type, typeName: ZodFirstPartyTypeKind.ZodNullable }, processCreateParams(params)));
    };
    return ZodNullable;
}(ZodType));
exports.ZodNullable = ZodNullable;
var ZodDefault = /** @class */ (function (_super) {
    __extends(ZodDefault, _super);
    function ZodDefault() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ZodDefault.prototype._parse = function (ctx, data, parsedType) {
        if (parsedType === parseUtil_1.ZodParsedType.undefined) {
            data = this._def.defaultValue();
        }
        return this._def.innerType._parse(ctx, data, (0, parseUtil_1.getParsedType)(data));
    };
    ZodDefault.prototype.removeDefault = function () {
        return this._def.innerType;
    };
    ZodDefault.create = function (type, params) {
        return new ZodOptional(__assign({ innerType: type, typeName: ZodFirstPartyTypeKind.ZodOptional }, processCreateParams(params)));
    };
    return ZodDefault;
}(ZodType));
exports.ZodDefault = ZodDefault;
var custom = function (check, params) {
    if (check)
        return ZodAny.create().refine(check, params);
    return ZodAny.create();
};
exports.custom = custom;
exports.late = {
    object: ZodObject.lazycreate,
};
var ZodFirstPartyTypeKind;
(function (ZodFirstPartyTypeKind) {
    ZodFirstPartyTypeKind["ZodString"] = "ZodString";
    ZodFirstPartyTypeKind["ZodNumber"] = "ZodNumber";
    ZodFirstPartyTypeKind["ZodBigInt"] = "ZodBigInt";
    ZodFirstPartyTypeKind["ZodBoolean"] = "ZodBoolean";
    ZodFirstPartyTypeKind["ZodDate"] = "ZodDate";
    ZodFirstPartyTypeKind["ZodUndefined"] = "ZodUndefined";
    ZodFirstPartyTypeKind["ZodNull"] = "ZodNull";
    ZodFirstPartyTypeKind["ZodAny"] = "ZodAny";
    ZodFirstPartyTypeKind["ZodUnknown"] = "ZodUnknown";
    ZodFirstPartyTypeKind["ZodNever"] = "ZodNever";
    ZodFirstPartyTypeKind["ZodVoid"] = "ZodVoid";
    ZodFirstPartyTypeKind["ZodArray"] = "ZodArray";
    ZodFirstPartyTypeKind["ZodObject"] = "ZodObject";
    ZodFirstPartyTypeKind["ZodUnion"] = "ZodUnion";
    ZodFirstPartyTypeKind["ZodIntersection"] = "ZodIntersection";
    ZodFirstPartyTypeKind["ZodTuple"] = "ZodTuple";
    ZodFirstPartyTypeKind["ZodRecord"] = "ZodRecord";
    ZodFirstPartyTypeKind["ZodMap"] = "ZodMap";
    ZodFirstPartyTypeKind["ZodSet"] = "ZodSet";
    ZodFirstPartyTypeKind["ZodFunction"] = "ZodFunction";
    ZodFirstPartyTypeKind["ZodLazy"] = "ZodLazy";
    ZodFirstPartyTypeKind["ZodLiteral"] = "ZodLiteral";
    ZodFirstPartyTypeKind["ZodEnum"] = "ZodEnum";
    ZodFirstPartyTypeKind["ZodEffects"] = "ZodEffects";
    ZodFirstPartyTypeKind["ZodNativeEnum"] = "ZodNativeEnum";
    ZodFirstPartyTypeKind["ZodOptional"] = "ZodOptional";
    ZodFirstPartyTypeKind["ZodNullable"] = "ZodNullable";
    ZodFirstPartyTypeKind["ZodDefault"] = "ZodDefault";
    ZodFirstPartyTypeKind["ZodPromise"] = "ZodPromise";
})(ZodFirstPartyTypeKind = exports.ZodFirstPartyTypeKind || (exports.ZodFirstPartyTypeKind = {}));
var instanceOfType = function (cls, params) {
    if (params === void 0) { params = {
        message: "Input not instance of " + cls.name,
    }; }
    return (0, exports.custom)(function (data) { return data instanceof cls; }, params);
};
exports.instanceof = instanceOfType;
var stringType = ZodString.create;
exports.string = stringType;
var numberType = ZodNumber.create;
exports.number = numberType;
var bigIntType = ZodBigInt.create;
exports.bigint = bigIntType;
var booleanType = ZodBoolean.create;
exports.boolean = booleanType;
var dateType = ZodDate.create;
exports.date = dateType;
var undefinedType = ZodUndefined.create;
exports.undefined = undefinedType;
var nullType = ZodNull.create;
exports.null = nullType;
var anyType = ZodAny.create;
exports.any = anyType;
var unknownType = ZodUnknown.create;
exports.unknown = unknownType;
var neverType = ZodNever.create;
exports.never = neverType;
var voidType = ZodVoid.create;
exports.void = voidType;
var arrayType = ZodArray.create;
exports.array = arrayType;
var objectType = ZodObject.create;
exports.object = objectType;
var strictObjectType = ZodObject.strictCreate;
exports.strictObject = strictObjectType;
var unionType = ZodUnion.create;
exports.union = unionType;
var intersectionType = ZodIntersection.create;
exports.intersection = intersectionType;
var tupleType = ZodTuple.create;
exports.tuple = tupleType;
var recordType = ZodRecord.create;
exports.record = recordType;
var mapType = ZodMap.create;
exports.map = mapType;
var setType = ZodSet.create;
exports.set = setType;
var functionType = ZodFunction.create;
exports.function = functionType;
var lazyType = ZodLazy.create;
exports.lazy = lazyType;
var literalType = ZodLiteral.create;
exports.literal = literalType;
var enumType = ZodEnum.create;
exports.enum = enumType;
var nativeEnumType = ZodNativeEnum.create;
exports.nativeEnum = nativeEnumType;
var promiseType = ZodPromise.create;
exports.promise = promiseType;
var effectsType = ZodEffects.create;
exports.effect = effectsType;
exports.transformer = effectsType;
var optionalType = ZodOptional.create;
exports.optional = optionalType;
var nullableType = ZodNullable.create;
exports.nullable = nullableType;
var preprocessType = ZodEffects.createWithPreprocess;
exports.preprocess = preprocessType;
var ostring = function () { return stringType().optional(); };
exports.ostring = ostring;
var onumber = function () { return numberType().optional(); };
exports.onumber = onumber;
var oboolean = function () { return booleanType().optional(); };
exports.oboolean = oboolean;
//# sourceMappingURL=types.js.map