"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isAsync = exports.isOk = exports.isInvalid = exports.OK = exports.INVALID = exports.ParseContext = exports.pathFromArray = exports.pathToArray = exports.EMPTY_PATH = exports.makeIssue = exports.getParsedType = exports.ZodParsedType = void 0;
var ZodError_1 = require("../ZodError");
var util_1 = require("./util");
exports.ZodParsedType = util_1.util.arrayToEnum([
    "string",
    "nan",
    "number",
    "integer",
    "float",
    "boolean",
    "date",
    "bigint",
    "symbol",
    "function",
    "undefined",
    "null",
    "array",
    "object",
    "unknown",
    "promise",
    "void",
    "never",
    "map",
    "set",
]);
var getParsedType = function (data) {
    var t = typeof data;
    switch (t) {
        case "undefined":
            return exports.ZodParsedType.undefined;
        case "string":
            return exports.ZodParsedType.string;
        case "number":
            return isNaN(data) ? exports.ZodParsedType.nan : exports.ZodParsedType.number;
        case "boolean":
            return exports.ZodParsedType.boolean;
        case "function":
            return exports.ZodParsedType.function;
        case "bigint":
            return exports.ZodParsedType.bigint;
        case "object":
            if (Array.isArray(data))
                return exports.ZodParsedType.array;
            if (data === null)
                return exports.ZodParsedType.null;
            if (data.then &&
                typeof data.then === "function" &&
                data.catch &&
                typeof data.catch === "function") {
                return exports.ZodParsedType.promise;
            }
            if (data instanceof Map) {
                return exports.ZodParsedType.map;
            }
            if (data instanceof Set) {
                return exports.ZodParsedType.set;
            }
            if (data instanceof Date) {
                return exports.ZodParsedType.date;
            }
            return exports.ZodParsedType.object;
        default:
            return exports.ZodParsedType.unknown;
    }
};
exports.getParsedType = getParsedType;
var makeIssue = function (params
// data: any,
// path: (string | number)[],
// errorMap: ZodErrorMap,
// issueData: IssueData
) {
    var e_1, _a;
    var data = params.data, path = params.path, errorMaps = params.errorMaps, issueData = params.issueData;
    var fullPath = __spreadArray(__spreadArray([], __read(path), false), __read((issueData.path || [])), false);
    var fullIssue = __assign(__assign({}, issueData), { path: fullPath });
    var errorMessage = "";
    var maps = errorMaps
        .filter(function (m) { return !!m; })
        .slice()
        .reverse();
    try {
        for (var maps_1 = __values(maps), maps_1_1 = maps_1.next(); !maps_1_1.done; maps_1_1 = maps_1.next()) {
            var map = maps_1_1.value;
            errorMessage = map(fullIssue, { data: data, defaultError: errorMessage }).message;
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (maps_1_1 && !maps_1_1.done && (_a = maps_1.return)) _a.call(maps_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return __assign(__assign({}, issueData), { path: fullPath, message: issueData.message || errorMessage });
};
exports.makeIssue = makeIssue;
exports.EMPTY_PATH = null;
var pathToArray = function (path) {
    if (path === null)
        return [];
    var arr = new Array(path.count);
    while (path !== null) {
        arr[path.count - 1] = path.component;
        path = path.parent;
    }
    return arr;
};
exports.pathToArray = pathToArray;
var pathFromArray = function (arr) {
    var path = null;
    for (var i = 0; i < arr.length; i++) {
        path = { parent: path, component: arr[i], count: i + 1 };
    }
    return path;
};
exports.pathFromArray = pathFromArray;
var ParseContext = /** @class */ (function () {
    function ParseContext(def) {
        this.def = def;
    }
    Object.defineProperty(ParseContext.prototype, "path", {
        get: function () {
            return this.def.path;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ParseContext.prototype, "issues", {
        get: function () {
            return this.def.issues;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ParseContext.prototype, "errorMap", {
        get: function () {
            return this.def.errorMap;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ParseContext.prototype, "async", {
        get: function () {
            return this.def.async;
        },
        enumerable: false,
        configurable: true
    });
    ParseContext.prototype.stepInto = function (component) {
        return new ParseContext(__assign(__assign({}, this.def), { path: this.path === null
                ? { parent: null, count: 1, component: component }
                : { parent: this.path, count: this.path.count + 1, component: component } }));
    };
    ParseContext.prototype._addIssue = function (data, issueData, params) {
        if (params === void 0) { params = {}; }
        var issue = (0, exports.makeIssue)({
            data: data,
            issueData: issueData,
            path: (0, exports.pathToArray)(this.path),
            errorMaps: [
                this.def.errorMap,
                params.schemaErrorMap,
                ZodError_1.overrideErrorMap,
                ZodError_1.defaultErrorMap, // then global default map
            ],
            // errorMaps: [this.errorMap],
            // issueData,
        });
        this.issues.push(issue);
    };
    return ParseContext;
}());
exports.ParseContext = ParseContext;
exports.INVALID = Object.freeze({ valid: false });
var OK = function (value) { return ({ valid: true, value: value }); };
exports.OK = OK;
var isInvalid = function (x) {
    return x.valid === false;
};
exports.isInvalid = isInvalid;
var isOk = function (x) {
    return x.valid === true;
};
exports.isOk = isOk;
var isAsync = function (x) { return x instanceof Promise; };
exports.isAsync = isAsync;
//# sourceMappingURL=parseUtil.js.map