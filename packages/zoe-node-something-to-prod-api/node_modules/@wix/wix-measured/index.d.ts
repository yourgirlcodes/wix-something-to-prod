interface CollectionFactoryLike {
  collection(key: string, value: string): WixMeasured;
}

declare class WixMeasuredFactory implements CollectionFactoryLike {

  constructor(host: string, appName: string);

  collection(key: string, value: string): WixMeasured;
  collection(): WixMeasured;
  addReporter(reporter: object): WixMeasuredFactory;
}

export interface WixMeasured extends CollectionFactoryLike {
  meter(key: string, name: string): Meter;
  meter(name: string): Meter;
  gauge(name: string): Gauge;
  hist(key: string, name: string): Histogram;
  hist(name: string): Histogram;
}

interface Value {
  (value: number): void;
  toJSON(): any;
}

export interface Reporter {
  addTo(measured: WixMeasuredRegistry): void;
}

type MetricDictionary<T extends Value> = { [key: string]: T };

export interface WixMeasuredRegistry {
  readonly meters: MetricDictionary<Meter>;
  readonly gauges: MetricDictionary<Gauge>;
  readonly hists: MetricDictionary<Histogram>;
}

export interface Meter extends Value {
  (): void;
}

export interface Histogram extends Value {
  (): void;
}

export interface Gauge extends Value {
  (value: () => number): void;
}

export default WixMeasuredFactory;