const mysql = require('mysql');
const {registerHealthCheck} = require('./register-health-check');
const Promise = require('bluebird');
const addTtlSupport = require('./ttl-support');
const addMeteringSupport = require('./metering-support');

function bootstrapMysql(context, dbName, {host, port, user, password, isReadOnly, maxLifetime, multipleStatements, charset, cluster, disableHealthChecks}) {
  const connectionOpts = {
    host,
    port,
    user,
    password,
    database: dbName,
    multipleStatements,
    charset,
    stringifyObjects: true
  };
  const sqlPool = mysql.createPool(Object.assign({}, connectionOpts, {connectionLimit: 10}));
  addMeteringSupport(sqlPool, context.metrics.client, isReadOnly, dbName);
  const mysqlPool = promisifyQuery(sqlPool);

  if (maxLifetime > 0) {
    addTtlSupport(mysqlPool, maxLifetime);
  }

  const openConnection = () => promisifyQuery(mysql.createConnection(connectionOpts));
  if (disableHealthChecks !== true) {
    registerHealthCheck(sqlPool, openConnection, isReadOnly, context, cluster);
  }

  registerShutdownHook(mysqlPool, context, cluster);

  return mysqlPool;
}

function promisifyQuery(target) {
  ['Promise', 'Async'].forEach(suffix => Promise.promisifyAll(target, {
    suffix,
    filter: name => name === 'query'
  }));
  return target;
}

function registerShutdownHook(pool, {management}, cluster) {
  management.addShutdownHook(`mysql ${cluster} connection pool`,
    () => new Promise((resolve, reject) => pool.end(err => err ? reject(err) : resolve())));
}

module.exports = bootstrapMysql;
