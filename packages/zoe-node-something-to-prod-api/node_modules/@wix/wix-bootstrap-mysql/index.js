const assert = require('assert');
const bootstrapMysql = require('./lib/bootstrap-mysql');
const {MIN_TTL_IN_MILLIS, MAX_TTL_IN_MILLIS} = require('./lib/constants');


function initBootstrapMysql(context, {disableHealthChecks = false} = {}) {
  return {
    client(dbName, {readOnly = false, maxLifetime = 0, multipleStatements = false, charset, cluster} = {}) {
      assert(dbName && typeof dbName === 'string', 'dbName is required string');
      assert(maxLifetime === 0 || Number.isInteger(maxLifetime) && maxLifetime >= MIN_TTL_IN_MILLIS && maxLifetime <= MAX_TTL_IN_MILLIS,
        `maxLifetime must be an integer in range [${MIN_TTL_IN_MILLIS}..${MAX_TTL_IN_MILLIS}] - 5 seconds to 30 minutes inclusive`);
      assert(!charset || typeof charset === 'string', 'charset must be a string');
      assert(!cluster || typeof cluster === 'string', 'cluster must be a string');

      const mode = readOnly ? 'readOnly' : 'readWrite';
      const singleOrMultipleConfigs = loadConfig(context)[mode].database;
      const isMultiple = Array.isArray(singleOrMultipleConfigs);

      assert(!isMultiple || cluster, 'in order to use multiple databases, "cluster" param must be specified');

      const config = isMultiple ?
        singleOrMultipleConfigs.find(c => c.classifier === cluster) :
        singleOrMultipleConfigs;

      const opts = {
        host: config.host,
        port: config.port,
        user: config.username,
        password: config['secret:password'],
        isReadOnly: readOnly,
        maxLifetime,
        multipleStatements,
        charset,
        cluster,
        disableHealthChecks,
      };

      return bootstrapMysql(context, dbName, opts);
    }
  };
}

function loadConfig({config, env}) {
  if (env['WIX_BOOTSTRAP_MYSQL_CONFIG']) {
    return config.xml('WIX_BOOTSTRAP_MYSQL_CONFIG-env-var', Buffer.from(env['WIX_BOOTSTRAP_MYSQL_CONFIG'], 'base64').toString('utf8'));
  } else {
    return config.xml('wix-bootstrap-mysql');
  }
}

module.exports = {
  di: {
    key: 'mysql',
    value: initBootstrapMysql
  }
};
