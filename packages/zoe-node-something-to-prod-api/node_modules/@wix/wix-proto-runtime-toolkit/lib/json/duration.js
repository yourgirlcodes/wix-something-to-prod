const assert = require('assert'),
  Long = require('long'),
  {isStringInteger} = require('../util');

function toJSON({seconds = 0, nanos = 0}, {stringLongs} = {}) {
  assertSeconds(seconds, stringLongs);
  assertNanos(nanos, stringLongs);

  let nanosPortion = '';
  if (nanos !== 0 && nanos !== '0') {
    nanosPortion = `.${nanos.toString().padStart(9, '0')}`;
  }
  return `${seconds}${nanosPortion}s`;
}

function fromJSON(string, {stringLongs} = {}) {
  const [seconds, nanos] = string.substring(0, string.length - 1).split('.');
  const deserializedNanos = nanosForString(nanos);

  return {
    seconds: stringLongs ? seconds : Long.fromString(seconds),
    nanos: deserializedNanos,
  };
}

function nanosForString(nanos) {
  let res = 0;
  if (nanos !== undefined) {
    let precision = 3 - (nanos.length / 3);
    res = parseInt(nanos) * Math.pow(1000, precision);
  }
  return res;
}

function assertSeconds(seconds, stringLongs) {
  if (stringLongs) {
    assertNumberOrString(seconds, 'seconds');
  } else {
    assert(
      Number.isInteger(seconds) || Long.isLong(seconds),
      'seconds must be an integer number or instance of Long'
    );
  }
}

function assertNanos(nanos, stringLongs) {
  if (stringLongs) {
    assertNumberOrString(nanos, 'nanos');
  } else {
    assert(Number.isInteger(nanos), 'nanos must be an integer number');
  }
}

function assertNumberOrString(value, name) {
  assert(
    Number.isInteger(value) || isStringInteger(value),
    `${name} must be an integer number or an integer string`
  );
}

module.exports = {toJSON, fromJSON};
