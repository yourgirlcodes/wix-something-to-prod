const Long = require('long');

const helper = {
  grpc: {
    structToGRPC,
    structFromGRPC,
    valueToGRPC,
    valueFromGRPC,
    listValueToGRPC,
    listValueFromGRPC,
    longFromGRPC,
    longToGRPC,
    timestampFromGRPC,
    timestampToGRPC,
    fieldmaskToGRPC,
    fieldmaskFromGRPC
  }
};

function fromGRPC(Type, message) {
  return Type.fromGRPC(message, helper);
}

function toGRPC(Type, message) {
  return Type.toGRPC(message, helper);
}

function valueToGRPC(value) {
  switch (typeof value) {
    case 'string':
      return {kind: 'stringValue', stringValue: value};
    case 'number':
      return {kind: 'numberValue', numberValue: value};
    case 'boolean':
      return {kind: 'boolValue', boolValue: value};
    default:
      if (value === null || value === undefined) {
        return {kind: 'nullValue', nullValue: 0};
      } else if (Array.isArray(value)) {
        return {kind: 'listValue', listValue: listValueToGRPC(value)};
      } else {
        return {kind: 'structValue', structValue: structToGRPC(value)};
      }
  }
}

function listValueToGRPC(value) {
  return Array.isArray(value) ? {values: value.map(valueToGRPC)} : value;
}

function listValueFromGRPC(value) {
  return value && Array.isArray(value.values) ? value.values.map(valueFromGRPC) : value;
}

function valueFromGRPC(value) {
  if (value === null || value === undefined) {
    return null;
  }
  switch (value.kind) {
    case 'nullValue':
      return null;
    case 'listValue':
      return listValueFromGRPC(value.listValue);
    case 'structValue':
      return valuesFromGRPC(value.structValue.fields);
    default:
      return value[value.kind];
  }
}

function valuesToGRPC(o) {
  const result = {};
  Object.keys(o).forEach(k => {
    result[k] = valueToGRPC(o[k]);
  });
  return result;
}

function valuesFromGRPC(o) {
  const result = {};
  Object.keys(o).forEach(k => {
    result[k] = valueFromGRPC(o[k]);
  });
  return result;
}

function structToGRPC(s) {
  return s && {fields: valuesToGRPC(s)};
}

function structFromGRPC(s) {
  return s && s.fields && valuesFromGRPC(s.fields);
}

function longFromGRPC(value) {
  return value === undefined || value === null ? Long.ZERO : Long.fromValue(value);
}

function longToGRPC(value) {
  return value && value.toString();
}

function timestampFromGRPC(obj) {
  return obj && new Date((obj.seconds || 0) * 1000 + (obj.nanos || 0) / 1000000);
}

function timestampToGRPC(date) {
  return date && {seconds: longToGRPC(Math.floor(date.getTime() / 1000)), nanos: date.getTime() % 1000 * 1000000};
}

function fieldmaskFromGRPC(value) {
  return value && value.paths;
}

function fieldmaskToGRPC(value) {
  return value && {paths: value};
}

module.exports = {fromGRPC, toGRPC, ...helper.grpc};
