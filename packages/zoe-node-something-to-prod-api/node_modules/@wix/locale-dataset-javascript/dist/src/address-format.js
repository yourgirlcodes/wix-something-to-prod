"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getFormattedAddress = void 0;
var _1 = require("./");
var ADDRESS_PARTS = {
    country: 'country',
    subdivision: 'subdivision',
    addressLine1: 'addressLine1',
    addressLine2: 'addressLine2',
    city: 'city',
    zipCode: 'zipCode',
    firstName: 'firstName',
    lastName: 'lastName',
    company: 'company',
    phone: 'phone',
};
var FORMAT_BY_COUNTRY_DEFAULT = 'USA';
exports.getFormattedAddress = function (addressParts, formatCountryKey) {
    var formatByCounty = formatCountryKey
        ? _1.getCountryByKey(formatCountryKey)
        : _1.getCountryByKey(FORMAT_BY_COUNTRY_DEFAULT);
    var address = formatByCounty && formatByCounty.addressPattern
        ? formatByCounty.addressPattern
        : _1.getCountryByKey(FORMAT_BY_COUNTRY_DEFAULT).addressPattern;
    var emptyParts = address
        .split('\n')
        .map(function (line) {
        return line
            .split(',')
            .map(function (commaSection) { return commaSection.replace(/{{[^}]+}}/g, ''); });
    });
    return address
        .split('\n')
        .map(function (line, lineIndex) {
        return line
            .split(',')
            .map(function (lineSection, commaIndex) {
            if (lineSection === '') {
                return lineSection;
            }
            var replacedLineSection = lineSection;
            Object.keys(ADDRESS_PARTS).forEach(function (key) {
                replacedLineSection = replacedLineSection.replace("{{" + key + "}}", addressParts[key] || '');
            });
            if (emptyParts[lineIndex][commaIndex] === replacedLineSection) {
                return null;
            }
            return replacedLineSection;
        })
            .filter(function (lineSectionAfterReplace) { return lineSectionAfterReplace !== null; })
            .join(',');
    })
        .join('\n')
        .replace(/\n+\s*/g, '\n');
};
//# sourceMappingURL=address-format.js.map