import tmp from 'tmp';
import fs from 'fs';

import {flynt} from '../lib/flynt-api';
import glob from 'glob';

describe('flynt e2e', () => {

  describe('semi-real proto', () => {
    const moduleRootFolder = './test/resources/complex-module';

    describe('sources', () => {
      const allProtoFolders = [
        './test/resources/complex-module/protos-common/src/main/proto',
        './test/resources/complex-module/protos-query/src/main/proto',
        './test/resources/complex-module/site-properties-api-proto/src/main/proto',
        './test/resources/complex-module/locations-web/proto',
        './test/resources/complex-module/common-api/src/main/proto',
        './test/resources/complex-module/schedule-api/src/main/proto',
        './test/resources/complex-module/src/main/proto',
      ];

      for (let i = 0; i < allProtoFolders.length; i++) {
        const mainProtoFolder = allProtoFolders[i];
        const includeProtoFolder = allProtoFolders.slice(0, i);

        it(`run flynt API on ${mainProtoFolder} folder`, async () => {
          const {name: jsonOutput} = tmp.fileSync({postfix: 'output.json'});
          const results = await flynt({
            mainProtoFolder,
            includeProtoFolder,
            moduleRootFolder,
            jsonOutput,
          });
          const stdout = results.formattedOutput;
          console.log(stdout);
          const report = JSON.parse(fs.readFileSync(jsonOutput, 'utf-8'));
          expect(report.lintResults.executionErrors).toHaveLength(0);
        });

        it(`run flynt API on ${mainProtoFolder} files`, async () => {
          const {name: jsonOutput} = tmp.fileSync({postfix: 'output.json'});
          //using some temp folder as main proto folder to ensure the flynt() uses proto files from mainProtoFile array
          const tmpMainFolder = tmp.dirSync().name;
          const mainProtoFile = glob.sync('**/*.proto', {cwd: mainProtoFolder});
          const results = await flynt({
            mainProtoFolder: tmpMainFolder,
            mainProtoFile,
            includeProtoFolder: [mainProtoFolder, ...includeProtoFolder],
            moduleRootFolder,
            jsonOutput,
          });
          const stdout = results.formattedOutput;
          console.log(stdout);
          const report = JSON.parse(fs.readFileSync(jsonOutput, 'utf-8'));
          expect(report.lintResults.executionErrors).toHaveLength(0);
        });

      }
    });

    describe('descriptors', () => {
      const allDescriptors = [
        './test/resources/complex-module/fds/google.bin',
        './test/resources/complex-module/fds/wix.bin',
        './test/resources/complex-module/fds/protos-common.bin',
        './test/resources/complex-module/fds/protos-query.bin',
        './test/resources/complex-module/fds/site-properties-api-proto.bin',
        './test/resources/complex-module/fds/locations-web.bin',
        './test/resources/complex-module/fds/common-api.bin',
        './test/resources/complex-module/fds/schedule-api.bin',
        './test/resources/complex-module/fds/complex.bin',
      ];

      for (let i = 0; i < allDescriptors.length; i++) {
        const mainDescriptorSet = allDescriptors[i];
        const includeDescriptorSet = allDescriptors.slice(0, i);

        it(`run flynt API on ${mainDescriptorSet}`, async () => {
          const {name: jsonOutput} = tmp.fileSync({postfix: 'output.json'});
          const results = await flynt({
            mainDescriptorSet,
            includeDescriptorSet,
            mainProtoFolder: moduleRootFolder,
            moduleRootFolder,
            jsonOutput,
          });
          const stdout = results.formattedOutput;
          console.log(stdout);
          const report = JSON.parse(fs.readFileSync(jsonOutput, 'utf-8'));
          expect(report.lintResults.executionErrors).toHaveLength(0);
          //expect(report.lintResults.results).toHaveLength(0);
        });
      }
    });
  });

  it('runs on a real ecom proto descriptors with the built in catalog', async () => {
    const {name: jsonOutput} = tmp.fileSync({postfix: 'output.json'});
    const results = await flynt({
      mainProtoFolder: './test/resources/ecom',
      mainDescriptorSet: './test/resources/ecom/server/wix-ecommerce-server/wix-ecommerce-platform-cart/proto-descriptor-set.proto.bin',
      includeDescriptorSet: [
        './test/resources/ecom/external/com_github_protocolbuffers_protobuf/source_context_proto-descriptor-set.proto.bin',
        './test/resources/ecom/external/com_github_protocolbuffers_protobuf/any_proto-descriptor-set.proto.bin',
        './test/resources/ecom/external/com_github_protocolbuffers_protobuf/type_proto-descriptor-set.proto.bin',
        './test/resources/ecom/external/com_github_protocolbuffers_protobuf/api_proto-descriptor-set.proto.bin',
        './test/resources/ecom/external/com_github_protocolbuffers_protobuf/wrappers_proto-descriptor-set.proto.bin',
        './test/resources/ecom/external/com_github_protocolbuffers_protobuf/descriptor_proto-descriptor-set.proto.bin',
        './test/resources/ecom/external/com_github_protocolbuffers_protobuf/empty_proto-descriptor-set.proto.bin',
        './test/resources/ecom/external/com_github_protocolbuffers_protobuf/timestamp_proto-descriptor-set.proto.bin',
        './test/resources/ecom/external/com_github_protocolbuffers_protobuf/compiler_plugin_proto-descriptor-set.proto.bin',
        './test/resources/ecom/external/com_github_protocolbuffers_protobuf/duration_proto-descriptor-set.proto.bin',
        './test/resources/ecom/external/com_github_protocolbuffers_protobuf/field_mask_proto-descriptor-set.proto.bin',
        './test/resources/ecom/external/com_github_protocolbuffers_protobuf/struct_proto-descriptor-set.proto.bin',
        './test/resources/ecom/external/google_api_protos/google/api/http_proto-descriptor-set.proto.bin',
        './test/resources/ecom/external/google_api_protos/google/api/annotations_proto-descriptor-set.proto.bin',
        './test/resources/ecom/external/server_infra/framework/protos/src/main/proto/api_proto-descriptor-set.proto.bin',
        './test/resources/ecom/external/server_infra/framework/protos/src/main/proto/http_proto-descriptor-set.proto.bin',
        './test/resources/ecom/external/server_infra/framework/protos/src/main/proto/sdk_proto-descriptor-set.proto.bin',
        './test/resources/ecom/external/server_infra/framework/protos/src/main/proto/spi_proto-descriptor-set.proto.bin',
        './test/resources/ecom/external/p13n/protos/common/src/main/proto/proto-descriptor-set.proto.bin',
        './test/resources/ecom/external/p13n/protos/query/src/main/proto/proto-descriptor-set.proto.bin',
        './test/resources/ecom/commons-server/src/main/proto/common/proto-descriptor-set.proto.bin',
        './test/resources/ecom/platform/coupons/coupons-adapter-api/src/main/proto/proto-descriptor-set.proto.bin',
        './test/resources/ecom/platform/coupons/coupons-api/src/main/proto/proto-descriptor-set.proto.bin',
        './test/resources/ecom/commons-server/ecom-platform-common-api/src/main/proto/proto-descriptor-set.proto.bin',
        './test/resources/ecom/external/cashier/payment-services/public-api-modules/pay-api/src/main/proto/proto-descriptor-set.proto.bin',
        './test/resources/ecom/server/wix-ecommerce-server/wix-ecommerce-catalog-spi/src/main/proto/proto-descriptor-set.proto.bin',
        './test/resources/ecom/commons-server/diffmatoky/src/main/proto/proto-descriptor-set.proto.bin',
        './test/resources/ecom/server/wix-ecommerce-server/wix-ecommerce-orders/wix-ecommerce-side-effects-migration-api/src/main/proto/proto-descriptor-set.proto.bin',
        './test/resources/ecom/server/wix-ecommerce-server/wix-ecommerce-tax/wix-ecommerce-tax-api/src/main/proto/proto-descriptor-set.proto.bin',
        './test/resources/ecom/external/p13n/protos/domain-events/src/main/proto/proto-descriptor-set.proto.bin',
        './test/resources/ecom/external/server_infra/framework/grpc/rest-api/src/main/proto/proto-descriptor-set.proto.bin',
        './test/resources/ecom/external/crm/contacts/core/contacts-api/src/main/proto/proto-descriptor-set.proto.bin',
        './test/resources/ecom/external/server_infra/framework/loom-prime/defaults/library/proto-descriptor-set.proto.bin',
        './test/resources/ecom/server/wix-ecommerce-server/ecom-platform-orders/api/wix-ecom-orders-api/src/main/proto/proto-descriptor-set.proto.bin',
        './test/resources/ecom/server/wix-ecommerce-server/wix-ecommerce-plans/src/main/proto/proto-descriptor-set.proto.bin',
        './test/resources/ecom/server/wix-ecommerce-server/wix-ecommerce-orders/wix-ecommerce-orders-api/src/main/proto/proto-descriptor-set.proto.bin',
        './test/resources/ecom/server/wix-ecommerce-server/wix-ecommerce-memberships-spi/src/main/proto/proto-descriptor-set.proto.bin',
        './test/resources/ecom/server/wix-ecommerce-server/wix-ecommerce-memberships-spi/client/src/main/proto/proto-descriptor-set.proto.bin',
        './test/resources/ecom/server/wix-ecommerce-server/wix-ecommerce-totals-calculator/proto-descriptor-set.proto.bin',
        './test/resources/ecom/server/wix-ecommerce-server/wix-ecommerce-platform-checkout/src/main/proto/proto-descriptor-set.proto.bin',
        './test/resources/ecom/server/wix-ecommerce-server/wix-ecommerce-subscriptions/src/main/proto/proto-descriptor-set.proto.bin',
        './test/resources/ecom/server/wix-ecommerce-server/wix-ecommerce-platform-checkout/proto-descriptor-set.proto.bin',
        './test/resources/ecom/external/app_market/members/protos/common/src/main/proto/proto-descriptor-set.proto.bin',
        './test/resources/ecom/external/server_infra/core-services/identification/identification-api/src/main/proto/proto-descriptor-set.proto.bin',
        './test/resources/ecom/external/editor_server/wix-html-server/wix-public-html-cache-invalidate-api/src/main/proto/proto-descriptor-set.proto.bin',
        './test/resources/ecom/external/meta_site/meta-site-protos/msm-data-protos/src/main/proto/proto-descriptor-set.proto.bin',
        './test/resources/ecom/external/meta_site/meta-site-protos/msm-event-protos/src/main/proto/proto-descriptor-set.proto.bin',
        './test/resources/ecom/external/app_market/members/members-api/proto-descriptor-set.proto.bin',
      ],
      moduleRootFolder: './test/resources/ecom',
      jsonOutput,
    });
    const stdout = results.formattedOutput;
    console.log(stdout);
    const report = JSON.parse(fs.readFileSync(jsonOutput, 'utf-8'));
    expect(report.lintResults.executionErrors).toHaveLength(0);
    expect(report.lintResults.results).toContainEqual(expect.objectContaining({
      ruleId: 'invalid-id-name'
    }));
  });
});
