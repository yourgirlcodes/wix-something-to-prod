import {loadConfig} from '../lib/cli-config';
import {getCatalog} from '@wix/flynt-rules';
import {Severity} from '@wix/flynt-engine';

describe('cli config', () => {
  describe('loadConfig', () => {
    it('uses defaults when no config passed', async () => {
      const cfg = loadConfig({
        moduleRootFolder: './cwd',
        mainProtoFolder: './base',
        includeProtoFolder: [],
      });

      expect(cfg.catalog).toEqual(getCatalog());
      expect(cfg.rules).toEqual({});
      expect(cfg.date).toBeUndefined();
      expect(cfg.severity).toBeUndefined();
    });

    it('uses values from config when exists', async () => {
      const cfg = loadConfig({
        config: './test/configs/config.json',
        moduleRootFolder: '',
        mainProtoFolder: '',
        includeProtoFolder: [],
      });

      expect(cfg.rules).toEqual({
        'rule-1': Severity.Error,
        'rule-2': Severity.Warning,
        'rule-3': Severity.Off,
      });
      expect(cfg.catalog).toEqual('/foobar');
      expect(cfg.date).toEqual(new Date('2000-01-01'));
      expect(cfg.severity).toEqual(Severity.Error);
    });

    it('uses values from cli options when passed', async () => {
      const cfg = loadConfig({
        moduleRootFolder: './cwd',
        mainProtoFolder: './base',
        catalog: '/catalog',
        date: '2000-01-01',
      });

      expect(cfg.catalog).toEqual('/catalog');
      expect(cfg.date).toEqual(new Date('2000-01-01'));
    });

    it('fails for invalid date', async () => {
      expect(() => loadConfig({
        moduleRootFolder: '',
        mainProtoFolder: '',
        date: 'xxx',
      })).toThrow(/Invalid date.*xxx/);
    });

    it('config takes precedence over cli options', async () => {
      const cfg = loadConfig({
        config: './test/configs/config.json',
        moduleRootFolder: './cwd',
        mainProtoFolder: './base',
        catalog: '/catalog',
        date: '9999-01-01',
      });

      //values from config
      expect(cfg.catalog).toEqual('/foobar');
      expect(cfg.date).toEqual(new Date('2000-01-01'));
    });

    it('load config from .flyntrc.json file when exists', async () => {
      const cfg = loadConfig({
        moduleRootFolder: './test/resources/module-with-flyntrc',
        mainProtoFolder: './base',
        includeProtoFolder: [],
      });

      expect(cfg.catalog).toEqual('flyntrc-catalog');
      expect(cfg.rules).toEqual({
        'rule-1': Severity.Error,
        'rule-2': Severity.Warning,
        'rule-3': Severity.Off,
      });
    });

    it('load config from package.json file when exists', async () => {
      const cfg = loadConfig({
        moduleRootFolder: './test/resources/module-with-package-json',
        mainProtoFolder: './base',
        includeProtoFolder: [],
      });

      expect(cfg.catalog).toEqual('pkgjson-catalog');
      expect(cfg.rules).toEqual({
        'rule-1': Severity.Off,
        'rule-2': Severity.Warning,
      });
    });

    it('doesnt load config if package.json does not contain the flynt section', async () => {
      const cfg = loadConfig({
        moduleRootFolder: './test/resources/module-with-empty-package-json',
        mainProtoFolder: './base',
        includeProtoFolder: [],
      });

      expect(cfg.catalog).toEqual(getCatalog());
      expect(cfg.rules).toEqual({});
    });
  });
});
