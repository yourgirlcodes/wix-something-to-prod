syntax = "proto3";

package com.wix.bookings.schedules.api.v1;

import "wix/api/validations.proto";
import "wix/api/annotations.proto";
import "google/api/annotations.proto";
import "wix/api/callback.proto";
import "google/protobuf/wrappers.proto";
import "com/wix/bookings/schedules/api/v1/entities/properties/migrationData.proto";
import "com/wix/bookings/schedules/api/v1/entities/scheduleWithHistory.proto";
import "com/wix/bookings/schedules/api/v1/entities/extendedSession.proto";
import "com/wix/bookings/schedules/api/v1/services/schedulesAvailabilityPolicy.proto";
import "com/wix/bookings/schedules/api/v1/entities/session.proto";
import "com/wix/bookings/common/api/v1/entities/failure.proto";
import "google/protobuf/timestamp.proto";
import "com/wix/bookings/schedules/api/v1/entities/participant.proto";


service SchedulesMigration {

    rpc NotifyFinishMigration (NotifyFinishMigrationRequest) returns (NotifyFinishMigrationResponse) {
        option (google.api.http) = {
            post : "/v1/calendar/schedules/migration/finish"
        };
        option (.wix.api.callback) = {
           topic: "bookings.schedules.notifications"
           payload: "ScheduleNotification"
       };
    }

    rpc UnDeleteSessions (UnDeleteSessionsRequest) returns (UnDeleteSessionsResponse) {
        option (.wix.api.maturity) = ALPHA;
        option (.wix.api.exposure) = INTERNAL;
    }

    rpc FetchInstanceData (FetchInstanceDataRequest) returns (FetchInstanceDataResponse) {
        option (.wix.api.maturity) = ALPHA;
        option (.wix.api.exposure) = INTERNAL;
    }

    rpc UpdateSchedulesAvailabilityPolicies (UpdateAvailabilityPoliciesRequest) returns (UpdateAvailabilityPoliciesResponse) {
        option (.wix.api.maturity) = ALPHA;
        option (.wix.api.exposure) = INTERNAL;
    }

    rpc FixSession (FixSessionRequest) returns (FixSessionResponse) {
        option (.wix.api.maturity) = ALPHA;
        option (.wix.api.exposure) = INTERNAL;
    }

    rpc RecalculateScheduleTimes (RecalculateScheduleTimesRequest) returns (RecalculateScheduleTimesResponse) {
        option (.wix.api.maturity) = ALPHA;
        option (.wix.api.exposure) = INTERNAL;
    }

    rpc SetDefaultBusinessLocation (SetDefaultBusinessLocationRequest) returns (SetDefaultBusinessLocationResponse) {
        option (.wix.api.maturity) = ALPHA;
        option (.wix.api.exposure) = PRIVATE;
        option (.wix.api.required) = "SetDefaultBusinessLocationRequest.instance_id";
    }

    rpc RemoveOrphanBusinessLocation (RemoveOrphanBusinessLocationRequest) returns (RemoveOrphanBusinessLocationResponse) {
        option (.wix.api.maturity) = ALPHA;
        option (.wix.api.exposure) = PRIVATE;
    }

    //List participants.
    //Implemented only for internal use to support migration. it is not meant to be used any other way.
    //Curently support query of not-deleted participants, that were created within a given time-windows.
    rpc ListParticipants (ListParticipantsRequest) returns (ListParticipantsResponse) {
        option (.wix.api.exposure) = PRIVATE;
        option (.wix.api.maturity) = ALPHA;
        option (.wix.api.required) = "ListParticipantsRequest.createdFrom";
        option (.wix.api.required) = "ListParticipantsRequest.createdTo";
    }

    rpc SchedulesReadWrite (SchedulesReadWriteRequest) returns (SchedulesReadWriteResponse) {
        option (.wix.api.maturity) = ALPHA;
        option (.wix.api.exposure) = INTERNAL;
    }

    rpc changeRecurringIntervalsTypeToAvailability (ChangeRecurringIntervalsTypeToAvailabilityRequest) returns (ChangeRecurringIntervalsTypeToAvailabilityResponse) {
        option (.wix.api.maturity) = ALPHA;
        option (.wix.api.exposure) = INTERNAL;
    }

    // Temporary endpoint for testing the ML migration (makes a session eligible for migration)
    rpc RemoveSessionBusinessLocation (RemoveSessionBusinessLocationRequest) returns (RemoveSessionBusinessLocationResponse) {
        option (.wix.api.maturity) = ALPHA;
        option (.wix.api.exposure) = PRIVATE;
    }
}

message ChangeRecurringIntervalsTypeToAvailabilityRequest {
    string instanceId = 1;
    repeated string scheduleIds = 2;
}

message ChangeRecurringIntervalsTypeToAvailabilityResponse {

}

message SchedulesReadWriteRequest {
    string instanceId = 1;
    int32 batch_size = 3 [(.wix.api.min) = 1];
}
message SchedulesReadWriteResponse {
    string output = 1;
}

message NotifyFinishMigrationRequest {
    MigrationData migration_data = 1;
}

message NotifyFinishMigrationResponse {
}

message FetchInstanceDataRequest {
    string instanceId = 1;
    google.protobuf.Timestamp minimum_session_start_date = 2;
}

message FetchInstanceDataResponse {
    repeated ScheduleWithHistory schedules = 1;
    repeated ExtendedSession sessions = 2;
}

message UpdateAvailabilityPoliciesRequest {
    repeated UpdatePolicyRequest requests = 1;

    message UpdatePolicyRequest {
        string instance_id = 1;
        string ms_id = 2;
        UpdateAvailabilityPolicyRequest request = 3;
    }
}

message UpdateAvailabilityPoliciesResponse {
}

message UnDeleteSessionsRequest {
    string instance_id = 1;
    repeated string sessions_ids = 2;
    bool delete_all_sessions = 3;
}

message UnDeleteSessionsResponse {
    repeated SessionIDs sessions_undeleted = 1;
    repeated com.wix.bookings.common.api.v1.Failure failures = 2;
}

message SessionIDs {
    string requested_id = 1;
    string encoded_id = 2;
}

message FixSessionRequest {
    string instance_id = 1;
    string session_id = 2;
    google.protobuf.Int32Value capacity = 3;
}

message FixSessionResponse {
    Session session = 1;
}

message RecalculateScheduleTimesRequest {
    string instance_id = 1;
}

message RecalculateScheduleTimesResponse {
    repeated string schedules_updated = 1;
}


message ListParticipantsRequest {
    google.protobuf.Timestamp createdFrom = 1;
    google.protobuf.Timestamp createdTo = 2;
}

message ListParticipantsResponse {
    repeated ParticipantWithSession participants = 1;
}

message ParticipantWithSession {
   Participant participant = 1;
   Session session = 2;
   string scheduleId = 3;
}

message SetDefaultBusinessLocationRequest {
    string instance_id = 1;
    string meta_site_id = 2;
}

message SetDefaultBusinessLocationResponse {
    int32 schedule_count = 1;
    int32 session_count = 2;
    bool ignored_no_location = 3 [deprecated = true];
    bool skipped = 4;
}

message RemoveOrphanBusinessLocationRequest {
    string meta_site_id = 1;
}

message RemoveOrphanBusinessLocationResponse {
    int32 schedule_count = 1;
    bool skipped = 2;
}

message RemoveSessionBusinessLocationRequest {
    string session_id = 1;
}

message RemoveSessionBusinessLocationResponse {
}
