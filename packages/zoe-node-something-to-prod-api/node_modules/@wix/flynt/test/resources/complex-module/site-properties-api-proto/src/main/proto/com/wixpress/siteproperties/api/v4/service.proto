syntax = "proto3";

package com.wixpress.siteproperties.api.v4;

import "google/api/annotations.proto";
import "google/protobuf/field_mask.proto";
import "wix/api/permissions.proto";
import "wix/api/annotations.proto";
import "wix/api/callback.proto";
import "com/wixpress/siteproperties/api/v4/properties.proto";
import "wix/api/api_errors.proto";

// The parameters of a site properties read request.
message PropertiesReadRequest {
    google.protobuf.FieldMask fields = 1; // The set of desired fields.
}

// The resulting properties for the requested site.
message PropertiesReadResponse {
    string version = 2; // Current version of the stored property site. For internal use.
    Properties properties = 3; // Properties for the requested site.
}

// The request used to update a site's properties.
message PropertiesUpdateRequest {
    Properties properties = 1; /*
        The updated properties and their respective values. The subsequent "fields" property determines
        which properties are actually considered for updating; specifying the default value for a masked property
        deletes the property from the store.
    */
    google.protobuf.FieldMask fields = 2; // The set of desired properties for updates. Properties not explicitly specified here are ignored.
}

// The details resulting from an update operation.
message PropertiesUpdateResponse {
    string version = 2; // The new version of the stored properties after the update. For internal use.
}

// The request used to update site consent policy
message UpdateConsentPolicyRequest {
    ConsentPolicy consent_policy = 1; // Cookie policy the site owner defined for their site (before the users interacts with/limits it).
}

message UpdateConsentPolicyResponse {}

message BulkPropertiesReadRequest {
    repeated string sites = 1;
}

// The resulting properties for the requested site.
message BulkPropertiesReadResponse {
    map<string,PropertiesReadResponse> sites = 1; // The ID of the resolved MetaSite for the request.
}

/*
    This service can be used to manage a particular site's business properties (e-mail, physical address etc.)
    Properties are keyed by the MetaSite ID, and a set of default properties are resolved for a site on the first
    request to this service for that particular site.
*/
service SitePropertiesV4 {
    // Retreives the current snapshot of a site's properties.
    rpc Read (PropertiesReadRequest) returns (PropertiesReadResponse) {
        option (google.api.http) = {
            get:  "/properties"
            additional_bindings: {
                get: "/v4/properties"
            }
        };
        option (wix.api.permission).name = "SITE_SETTINGS.VIEW";
        option (wix.api.exposure) = PUBLIC;
        option (wix.api.maturity) = BETA;
        option (.wix.api.error) = {
            http_code: PERMISSION_DENIED
            application_code: "PERMISSION_DENIED"
            data: "com.wixpress.siteproperties.api.exceptions.PermissionDenied"
        };
        option (.wix.api.error) = {
            http_code: UNAUTHENTICATED
            application_code: "META_SITE_NOT_FOUND"
            data: "com.wixpress.siteproperties.api.exceptions.MetaSiteNotFound"
        };
    };

    // Updates one or more of a site's properties. The site ID is resolved via the Identification Service.
    rpc Update (PropertiesUpdateRequest) returns (PropertiesUpdateResponse) {
        option (google.api.http) = {
            patch:  "/properties"
            additional_bindings: {
                patch: "/v4/properties"
            }
        };
        option (wix.api.permission).name = "SITE_SETTINGS.MODIFY";
        option (wix.api.callback) = {
            topic: "site-properties.changes.v4"
            payload: "SitePropertiesNotification"
        };
        option (wix.api.exposure) = INTERNAL;
        option (wix.api.maturity) = BETA;
        option (.wix.api.error) = {
            http_code: PERMISSION_DENIED
            application_code: "PERMISSION_DENIED"
            data: "com.wixpress.siteproperties.api.exceptions.PermissionDenied"
        };
        option (.wix.api.error) = {
            http_code: UNAUTHENTICATED
            application_code: "META_SITE_NOT_FOUND"
            data: "com.wixpress.siteproperties.api.exceptions.MetaSiteNotFound"
        };
        option (.wix.api.error) = {
            http_code: INVALID_ARGUMENT
            application_code: "ILLEGAL_ARGUMENT"
            data: "com.wixpress.siteproperties.api.exceptions.IllegalArgument"
        };
        option (.wix.api.error) = {
            http_code: RESOURCE_EXHAUSTED
            application_code: "RATE_LIMIT_EXCEEDED"
            data: "com.wixpress.siteproperties.api.exceptions.RateLimitExceeded"
        };
    };

    // Updates a site's consent policy.
    rpc UpdateConsentPolicy (UpdateConsentPolicyRequest) returns (UpdateConsentPolicyResponse) {
        option (google.api.http) = {
            post:  "/properties/policy"
            additional_bindings: {
                post: "/v4/properties/policy"
            }
        };
        option (wix.api.permission).name = "SITE_PROPERTIES.UPDATE_CONSENT_POLICY";
        option (wix.api.exposure) = PUBLIC;
        option (wix.api.maturity) = BETA;
        option (.wix.api.error) = {
            http_code: PERMISSION_DENIED
            application_code: "PERMISSION_DENIED"
            data: "com.wixpress.siteproperties.api.exceptions.PermissionDenied"
        };
        option (.wix.api.error) = {
            http_code: UNAUTHENTICATED
            application_code: "META_SITE_NOT_FOUND"
            data: "com.wixpress.siteproperties.api.exceptions.MetaSiteNotFound"
        };
    };

    rpc ReadWithoutDefaultProperties (BulkPropertiesReadRequest) returns (BulkPropertiesReadResponse) {
        option (wix.api.exposure) = INTERNAL;
        option (wix.api.maturity) = BETA;
        option (.wix.api.error) = {
            http_code: PERMISSION_DENIED
            application_code: "PERMISSION_DENIED"
            data: "com.wixpress.siteproperties.api.exceptions.PermissionDeniedOnBulkRead"
        };
    }
}
