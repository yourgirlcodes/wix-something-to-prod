import {groupBySeverityAndRuleId, summarizeResults, SummaryOptions} from '../lib/summarize-results';
import {LintResults, Severity} from '@wix/flynt-engine';
import {flyntPlugins} from './test-utils';
import {FlyntPlugins} from '@wix/flynt-plugins-host';
import {FlyntPlugin} from '@wix/flynt-plugin-types';

describe('summarize-results', () => {
  let summaryOptions: SummaryOptions;
  let plugins: FlyntPlugins;

  beforeEach(async () => {
    ({summaryOptions, plugins} = await createSummaryOptions({moduleRootFolder: '/folder/module', mainProtoFolder: '/folder/module/proto/'}));
  });

  describe('summarizeResults', () => {
    it('zero results', async () => {
      const lintResults: LintResults = {
        results: [],
        executionErrors: [],
        disabled: [],
      };
      const summary = summarizeResults(lintResults, summaryOptions, plugins);

      console.log(summary.formattedOutput);

      expect(summary.warnings).toEqual(0);
      expect(summary.errors).toEqual(0);
      expect(summary.formattedOutput).toEqual('');
    });

    it('errors only', async () => {
      const lintResults: LintResults = {
        results: [
          {ruleId: 'xxxx', ruleDoc: 'x-doc', severity: Severity.Error, message: 'x-msg', filePath: 'x.proto'},
          {ruleId: 'xxxx', ruleDoc: 'x-doc', severity: Severity.Error, message: 'x-msg', filePath: 'x.proto'},
          {ruleId: 'yyyy', ruleDoc: 'y-doc', severity: Severity.Error, message: 'y-msg'},
        ],
        executionErrors: [],
        disabled: [],
      };
      const summary = summarizeResults(lintResults, summaryOptions, plugins);

      console.log(summary.formattedOutput);

      expect(summary.warnings).toEqual(0);
      expect(summary.errors).toEqual(3);
      expect(summary.formattedOutput).toMatch(/x\.proto.*ERROR.*x-msg.*xxx/);
      expect(summary.formattedOutput).toMatch(/N\/A.*ERROR.*y-msg.*yyy/);
    });

    it('errors and warnings', async () => {
      const lintResults: LintResults = {
        results: [
          {ruleId: 'zzz', ruleDoc: 'z-doc', severity: Severity.Warning, message: 'z-msg'},
          {ruleId: 'xxx', ruleDoc: 'x-doc', severity: Severity.Error, message: 'x-msg', filePath: 'x.proto'},
          {ruleId: 'xxx', ruleDoc: 'x-doc', severity: Severity.Error, message: 'x-msg', filePath: 'x.proto'},
          {ruleId: 'yyy', ruleDoc: 'y-doc', severity: Severity.Warning, message: 'y-msg'},
        ],
        executionErrors: [],
        disabled: [],
      };
      const summary = summarizeResults(lintResults, summaryOptions, plugins);

      console.log(summary.formattedOutput);

      expect(summary.warnings).toEqual(2);
      expect(summary.errors).toEqual(2);

      expect(summary.formattedOutput).toMatch(/N\/A.*WARNING.*z-msg.*zzz/);
      expect(summary.formattedOutput).toMatch(/x\.proto.*ERROR.*x-msg.*xxx/);
      expect(summary.formattedOutput).toMatch(/N\/A.*WARNING.*y-msg.*yyy/);
    });

    it('strict errors', async () => {
      const lintResults: LintResults = {
        results: [
          {ruleId: 'zzz', ruleDoc: 'z-doc', severity: Severity.Warning, message: 'z-msg'},
          {ruleId: 'xxx', ruleDoc: 'x-doc', severity: Severity.Error, message: 'x-msg', filePath: 'x.proto', strict: true},
          {ruleId: 'xxx', ruleDoc: 'x-doc', severity: Severity.Error, message: 'x-msg', filePath: 'x.proto'},
          {ruleId: 'yyy', ruleDoc: 'y-doc', severity: Severity.Warning, message: 'y-msg'},
        ],
        executionErrors: [],
        disabled: [],
      };
      const summary = summarizeResults(lintResults, summaryOptions, plugins);

      console.log(summary.formattedOutput);

      expect(summary.warnings).toEqual(2);
      expect(summary.errors).toEqual(2);
      expect(summary.strictErrors).toEqual(1);

      expect(summary.formattedOutput).toMatch(/N\/A.*WARNING.*z-msg.*zzz/);
      expect(summary.formattedOutput).toMatch(/x\.proto.*ERROR.*x-msg.*xxx/);
      expect(summary.formattedOutput).toMatch(/N\/A.*WARNING.*y-msg.*yyy/);
    });

    it('allows customizing severity format', async () => {
      const lintResults: LintResults = {
        results: [
          {ruleId: 'zzz', ruleDoc: 'z-doc', severity: Severity.Warning, message: 'z-msg'},
          {ruleId: 'xxx', ruleDoc: 'x-doc', severity: Severity.Error, message: 'x-msg', filePath: 'x.proto'},
          {ruleId: 'xxx', ruleDoc: 'x-doc', severity: Severity.Error, message: 'x-msg', filePath: 'x.proto'},
          {ruleId: 'yyy', ruleDoc: 'y-doc', severity: Severity.Warning, message: 'y-msg'},
        ],
        executionErrors: [],
        disabled: [],
      };
      const {summaryOptions, plugins} = await createSummaryOptions({moduleRootFolder: '/folder/module', mainProtoFolder: '/folder/module/proto/'}, {
        name: 'plg1',
        getFormatSeverityFunction() {
          return (severity) => severity.toLowerCase();
        }
      });
      const summary = summarizeResults(lintResults, summaryOptions, plugins);

      console.log(summary.formattedOutput);

      expect(summary.warnings).toEqual(2);
      expect(summary.errors).toEqual(2);

      expect(summary.formattedOutput).toMatch(/N\/A.*warning.*z-msg.*zzz/);
      expect(summary.formattedOutput).toMatch(/x\.proto.*error.*x-msg.*xxx/);
      expect(summary.formattedOutput).toMatch(/N\/A.*warning.*y-msg.*yyy/);
    });

    it('grace period', async () => {
      const lintResults: LintResults = {
        results: [
          {
            ruleId: 'x',
            ruleDoc: 'x-doc',
            severity: Severity.Warning,
            gracePeriod: {severityAfterGrace: Severity.Error, graceUntil: new Date('2090-01-01')},
            message: 'x-msg',
            filePath: 'x.proto'
          },
        ],
        executionErrors: [],
        disabled: [],
      };
      const summary = summarizeResults(lintResults, summaryOptions, plugins);

      console.log(summary.formattedOutput);

      expect(summary.formattedOutput).toMatch(/x\.proto.*In grace period.*2090-01-01/);
      expect(summary.warnings).toEqual(1);
      expect(summary.inGracePeriod).toEqual(1);
      expect(summary.errors).toEqual(0);
    });

    it('execution errors', async () => {
      const lintResults: LintResults = {
        results: [],
        executionErrors: [{error: 'err1', ruleId: 'rule1'}, {error: 'err2', ruleId: 'rule2'}],
        disabled: [],
      };
      const summary = summarizeResults(lintResults, summaryOptions, plugins);

      console.log(summary.formattedOutput);

      expect(summary.formattedOutput).toMatch(/error occurred in rule rule1.*err1/);
      expect(summary.formattedOutput).toMatch(/error occurred in rule rule2.*err2/);
      expect(summary.warnings).toEqual(0);
      expect(summary.errors).toEqual(2);
    });

    describe('paths', () => {
      it('returns proto paths relative to moduleRootFolder', async () => {
        const lintResults: LintResults = {
          results: [
            {ruleId: 'z', ruleDoc: 'z-doc', severity: Severity.Warning, message: 'z-msg'},
            {ruleId: 'x', ruleDoc: 'x-doc', severity: Severity.Error, message: 'x-msg', filePath: '/folder/module/proto/namespace/x.proto'},
            {ruleId: 'x', ruleDoc: 'x-doc', severity: Severity.Error, message: 'x-msg', filePath: '/folder/module/proto/y.proto'},
            {ruleId: 'y', ruleDoc: 'y-doc', severity: Severity.Warning, message: 'y-msg', filePath: '/folder/module2/proto/z.proto'},
          ],
          executionErrors: [],
          disabled: [],
        };
        const summary = summarizeResults(lintResults, summaryOptions, plugins);

        console.log(summary.formattedOutput);

        expect(summary.formattedOutput).toMatch(/^proto\/namespace\/x\.proto\s/m);
        expect(summary.formattedOutput).toMatch(/^proto\/y\.proto\s/m);
        expect(summary.formattedOutput).toMatch(/^\/folder\/module2\/proto\/z\.proto\s/m);
      });

      it('allow customizing base folder for relative proto paths', async () => {
        const lintResults: LintResults = {
          results: [
            {ruleId: 'z', ruleDoc: 'z-doc', severity: Severity.Warning, message: 'z-msg'},
            {ruleId: 'x', ruleDoc: 'x-doc', severity: Severity.Error, message: 'x-msg', filePath: '/folder/module/proto/namespace/x.proto', line: 666, column: 123},
            {ruleId: 'x', ruleDoc: 'x-doc', severity: Severity.Error, message: 'x-msg', filePath: '/folder/module/proto/y.proto'},
            {ruleId: 'y', ruleDoc: 'y-doc', severity: Severity.Warning, message: 'y-msg', filePath: '/folder/module2/proto/z.proto'},
          ],
          executionErrors: [],
          disabled: [],
        };
        const {summaryOptions, plugins} = await createSummaryOptions({moduleRootFolder: '/folder/module', mainProtoFolder: '/folder/module/proto/'}, {
          name: 'plg1',
          getResultsBaseFolder(ctx) {
            return ctx.opts.mainProtoFolder;
          }
        });
        const summary = summarizeResults(lintResults, summaryOptions, plugins);

        console.log(summary.formattedOutput);

        expect(summary.formattedOutput).toMatch(/^namespace\/x\.proto:666:123/m);
        expect(summary.formattedOutput).toMatch(/^y\.proto\s/m);
        expect(summary.formattedOutput).toMatch(/^\/folder\/module2\/proto\/z\.proto\s/m);
      });
    });
  });

  describe('groupBySeverityAndRuleId', () => {
    it('zero results', async () => {
      const lintResults: LintResults = {
        results: [],
        executionErrors: [],
        disabled: [],
      };
      const group = groupBySeverityAndRuleId(lintResults);

      expect(group.size).toEqual(0);
    });

    it('errors only', async () => {
      const lintResults: LintResults = {
        results: [
          {ruleId: 'x', ruleDoc: 'x-doc', severity: Severity.Error, message: 'x-msg', filePath: 'x.proto'},
          {ruleId: 'x', ruleDoc: 'x-doc', severity: Severity.Error, message: 'x-msg', filePath: 'x.proto'},
          {ruleId: 'y', ruleDoc: 'y-doc', severity: Severity.Error, message: 'y-msg'},
        ],
        executionErrors: [],
        disabled: [],
      };
      const group = groupBySeverityAndRuleId(lintResults);

      expect(group.size).toEqual(1);
      const err = group.get(Severity.Error)!;
      expect(err).toBeDefined();
      expect(Object.keys(err).length).toEqual(2);
      expect(err['x']).toBeDefined();
      expect(err['y']).toBeDefined();
    });

    it('errors and warnings', async () => {
      const lintResults: LintResults = {
        results: [
          {ruleId: 'z', ruleDoc: 'z-doc', severity: Severity.Warning, message: 'z-msg'},
          {ruleId: 'x', ruleDoc: 'x-doc', severity: Severity.Error, message: 'x-msg', filePath: 'x.proto'},
          {ruleId: 'x', ruleDoc: 'x-doc', severity: Severity.Error, message: 'x-msg', filePath: 'x.proto'},
          {ruleId: 'y', ruleDoc: 'y-doc', severity: Severity.Warning, message: 'y-msg'},
        ],
        executionErrors: [],
        disabled: [],
      };
      const group = groupBySeverityAndRuleId(lintResults);

      expect(group.size).toEqual(2);

      const err = group.get(Severity.Error)!;
      expect(err).toBeDefined();
      expect(err['x']).toBeDefined();
      expect(Object.keys(err).length).toEqual(1);

      const warn = group.get(Severity.Warning)!;
      expect(warn).toBeDefined();
      expect(warn['z']).toBeDefined();
      expect(warn['y']).toBeDefined();
      expect(Object.keys(warn).length).toEqual(2);
    });

  });
});

async function createSummaryOptions(opts: {mainProtoFolder: string; moduleRootFolder: string}, ...plgs: FlyntPlugin[]) {
  const plugins: FlyntPlugins = await flyntPlugins({opts}, ...plgs);
  const summaryOptions = {moduleRootFolder: opts.moduleRootFolder};
  return {summaryOptions, plugins};
}
