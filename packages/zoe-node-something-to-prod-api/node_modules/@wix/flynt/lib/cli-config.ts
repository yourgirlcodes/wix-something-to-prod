import fs from 'fs';
import {LintConfig, Severity} from '@wix/flynt-engine';
import {getCatalog} from '@wix/flynt-rules';
import {CliOptions} from './flynt-cli';
import path from 'path';
import assert from 'assert';

interface CliConfig {
  rules?: {[ruleName: string]: Severity | undefined};
  catalogDir?: string;
  date?: string;
  severity?: Severity;
}

function readConfigFromFile(configPath: string, subKey?: string) {
  const config = JSON.parse(fs.readFileSync(configPath, 'utf-8'));
  if (subKey) {
    return config[subKey] as CliConfig;
  }
  return config as CliConfig;
}

function readConfig(opts: {moduleRootFolder: string; config?: string}) {
  let cliConfig: CliConfig = {};
  if (opts.config) {
    cliConfig = readConfigFromFile(opts.config);
  } else {
    const flyntConfigFile = path.join(opts.moduleRootFolder, '.flyntrc.json');
    if (fs.existsSync(flyntConfigFile)) {
      cliConfig = readConfigFromFile(flyntConfigFile);
    } else {
      const pkgJsonFile = path.join(opts.moduleRootFolder, 'package.json');
      if (fs.existsSync(pkgJsonFile)) {
        const pkgConfig = readConfigFromFile(pkgJsonFile, 'flynt');
        cliConfig = pkgConfig || cliConfig;
      }
    }
  }
  return cliConfig;
}

function getDate(dateStr: string | undefined): Date | undefined {
  if (dateStr) {
    const result = new Date(dateStr);
    assert(!isNaN(result.getTime()), `Invalid date ${dateStr}`);
    return result;
  }
  return undefined;
}

export function loadConfig(cliOptions: CliOptions): LintConfig {
  const config = readConfig(cliOptions);

  return {
    catalog: config.catalogDir || cliOptions.catalog || getCatalog(),
    rules: config.rules ?? {},
    date: getDate(config.date ?? cliOptions.date),
    severity: config.severity,
  };
}
