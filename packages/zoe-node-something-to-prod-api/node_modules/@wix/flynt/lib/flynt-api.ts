import {FlyntPlugin} from '@wix/flynt-plugin-types';
import {loadPluginsFromApi} from './plugins';
import {CliOptions, flyntCliInternal} from './flynt-cli';
import {reportError} from './error-reporter';
import {LintResults, Severity} from '@wix/flynt-engine';

export interface FlyntApiOpts extends CliOptions {
  plugins?: FlyntPlugin[];
}

export interface FlyntResults {
  output: FlyntOutput;
  formattedOutput: string;
  warnings: number;
  errors: number;
  strictErrors: number;
}

export interface FlyntOutput {
  lintResults: LintResults;
  config: LintConfig;
  [key: string]: any;
}

export interface LintConfig {
  rules: {[ruleName: string]: Severity | undefined};
  date?: Date;
  severity?: Severity;
}

export async function flynt(opts: FlyntApiOpts): Promise<FlyntResults> {
  try {
    const pluginsHost = await loadPluginsFromApi(opts.plugins);
    return await flyntCliInternal(opts, pluginsHost);
  } catch (err) {
    await reportWithBuildInfo(err, {...opts});
    throw err;
  }
}

async function getBuildInfoTags(): Promise<{tags?: Record<string, string>}> {
  try {
    const {getBuildInfo} = await import('@wix/ci-build-info');
    const buildInfo = getBuildInfo();
    return {
      tags: {
        vcsUrl: buildInfo.v2.vcs.url,
        buildLog: buildInfo.v2.buildLogLink,
      },
    };
  } catch {
    return {};
  }
}

async function reportWithBuildInfo(error: unknown, extra?: Record<string, unknown>) {
  const buildInfoTags = await getBuildInfoTags();
  return reportError(error, {
    extra,
    tags: buildInfoTags.tags
  });
}
