const startDate = new Date();
console.error(startDate.toISOString() + ' Flynt started');

import {loadPluginsFromCli} from './plugins';
import {parseCliOptions} from './cli-options';
import {ExitCode, flyntCliInternal} from './flynt-cli';
import {hideBin} from 'yargs/helpers';
import {reportError} from './error-reporter';
import {FlyntPlugin} from '@wix/flynt-plugin-types';
import {FlyntResults} from './flynt-api';

export async function main(argv: string[], opts: {plugins?: FlyntPlugin[]} = {}) {
  const args = hideBin(argv);
  try {
    const pluginsHost = await loadPluginsFromCli(args);

    for (const plugin of opts.plugins || []) {
      await pluginsHost.loadPlugin(plugin);
    }

    const options = parseCliOptions(args, pluginsHost);
    const result = await flyntCliInternal(options, pluginsHost);
    if (result.errors > 0) {
      console.error(result.formattedOutput);
      const exitCode = getExitCode(options.exitCode, result);
      console.error(`Flynt Exit with code ${exitCode}`);
      process.exitCode = exitCode;
    } else if (result.warnings) {
      console.warn(result.formattedOutput);
    }
  } catch (err: any) {
    await reportError(err, {extra: {args: args.join(' ')}});
    console.error('Flynt failed: ', err.stack);
    console.error('Flynt Exit with code 2');
    process.exitCode = 2;
  } finally {
    const endDate = new Date();
    const seconds = (endDate.getTime() - startDate.getTime()) / 1000;
    console.error(`Flynt finished in ${seconds} seconds`);
  }
}

function getExitCode(exitCode: ExitCode | undefined, result: FlyntResults) {
  switch (exitCode) {
    case ExitCode.strict:
      return (result.strictErrors > 0) ? 1 : 0;
    case ExitCode.never:
      return 0;
    default:
      return 1;
  }
}
