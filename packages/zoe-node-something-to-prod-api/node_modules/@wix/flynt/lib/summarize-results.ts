import path from 'path';
import {LintResult, LintResults, Severity} from '@wix/flynt-engine';
import chalk from 'chalk';
import {FlyntPlugins} from '@wix/flynt-plugins-host';

export interface LintResultsSummary {
  //lintResults: LintResults;
  formattedOutput: string;
  warnings: number;
  errors: number;
  strictErrors: number;
  inGracePeriod: number;
}

function toShortPath(cwd: string, filePath: string) {
  const relPath = path.relative(cwd, filePath);
  if (!relPath.startsWith('..')) {
    return relPath;
  }
  return filePath;
}

function formatLocation(baseLocation: string, filePath: string | undefined, line: number | undefined, column: number | undefined) {
  if (filePath) {
    const shortPath = toShortPath(baseLocation, filePath);
    if (line !== undefined && column !== undefined) {
      return `${shortPath}:${line}:${column}`;
    }
    return shortPath;
  }
  return 'N/A';
}

export function groupBySeverityAndRuleId(lintResults: LintResults) {
  return lintResults.results.reduce((grouped, lintResult) => {
    const rules = grouped.get(lintResult.severity) || {};
    rules[lintResult.ruleId] = lintResult;
    grouped.set(lintResult.severity, rules);
    return grouped;
  }, new Map<Severity, Record<string, LintResult>>());
}

function severityColor(severity: Severity) {
  const color = severity === Severity.Error ? chalk.red : chalk.yellow;
  return color;
}

export interface SummaryOptions {
  moduleRootFolder: string;
}

function defaultSeverityFormat(severity: Severity) {
  return severity.toUpperCase();
}

export function summarizeResults(lintResults: LintResults, opts: SummaryOptions, plugins: FlyntPlugins): LintResultsSummary {
  let warnings = 0;
  let errors = 0;
  let strictErrors = 0;
  let inGracePeriod = 0;
  const baseLocation = plugins.getResultsBaseFolder() || opts.moduleRootFolder;
  const errorLog = [], warningLog = [], summaryLog = [], execErrorLog = [];
  let lines: string[];
  const formatSeverity = plugins.getFormatSeverityFunction() || defaultSeverityFormat;

  for (const lintResult of lintResults.results) {
    const location = formatLocation(baseLocation, lintResult.filePath, lintResult.line, lintResult.column);
    const color = severityColor(lintResult.severity);
    let line = `${location} ${color(formatSeverity(lintResult.severity))}: ${color(lintResult.message)} [${chalk.cyan(lintResult.ruleId)}]`;
    if (lintResult.gracePeriod) {
      inGracePeriod++;
      line += ` (In grace period until [${lintResult.gracePeriod.graceUntil.toISOString().split('T')[0]}])`;
    }
    if (lintResult.severity === Severity.Error) {
      errors++;
      if (lintResult.strict) {
        strictErrors++;
      }
      errorLog.push(line);
    } else {
      warnings++;
      warningLog.push(line);
    }
  }
  if (errors + warnings > 0) {
    const bySeverity = groupBySeverityAndRuleId(lintResults);

    summaryLog.push(('summary of issues grouped by severity'));
    summaryLog.push(('==========================================='));

    for (const [severity, resultByRuleId] of bySeverity.entries()) {
      summaryLog.push(severityColor(severity)(severity.toUpperCase()));
      for (const [ruleId, lintResult] of Object.entries(resultByRuleId)) {
        summaryLog.push(` [${chalk.cyan(ruleId)}] (more info: ${chalk.blueBright(chalk.underline(lintResult.ruleDoc))})`);
      }
    }
  }

  for (const ruleError of lintResults.executionErrors) {
    errors++;
    execErrorLog.push(chalk.red(`error occurred in rule ${ruleError.ruleId}: ${ruleError.error}`));
  }

  if (errors + warnings > 0) {
    const header = `Flynt results:\nFor more information about flynt see here: ${chalk.blueBright(chalk.underline('https://github.com/wix-private/flynt'))}\n`;
    lines = [header, ...errorLog, ...warningLog, ...execErrorLog, '', ...summaryLog, ''];
  } else {
    lines = [];
  }

  return {
    formattedOutput: lines.join('\n'),
    warnings,
    errors,
    strictErrors,
    inGracePeriod,
  };
}
