"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.flynt = void 0;
const plugins_1 = require("./plugins");
const flynt_cli_1 = require("./flynt-cli");
const error_reporter_1 = require("./error-reporter");
async function flynt(opts) {
    try {
        const pluginsHost = await (0, plugins_1.loadPluginsFromApi)(opts.plugins);
        return await (0, flynt_cli_1.flyntCliInternal)(opts, pluginsHost);
    }
    catch (err) {
        await reportWithBuildInfo(err, { ...opts });
        throw err;
    }
}
exports.flynt = flynt;
async function getBuildInfoTags() {
    try {
        const { getBuildInfo } = await Promise.resolve().then(() => __importStar(require('@wix/ci-build-info')));
        const buildInfo = getBuildInfo();
        return {
            tags: {
                vcsUrl: buildInfo.v2.vcs.url,
                buildLog: buildInfo.v2.buildLogLink,
            },
        };
    }
    catch {
        return {};
    }
}
async function reportWithBuildInfo(error, extra) {
    const buildInfoTags = await getBuildInfoTags();
    return (0, error_reporter_1.reportError)(error, {
        extra,
        tags: buildInfoTags.tags
    });
}
//# sourceMappingURL=flynt-api.js.map