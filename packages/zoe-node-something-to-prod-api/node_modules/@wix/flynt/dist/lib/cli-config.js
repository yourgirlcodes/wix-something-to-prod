"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadConfig = void 0;
const fs_1 = __importDefault(require("fs"));
const flynt_rules_1 = require("@wix/flynt-rules");
const path_1 = __importDefault(require("path"));
const assert_1 = __importDefault(require("assert"));
function readConfigFromFile(configPath, subKey) {
    const config = JSON.parse(fs_1.default.readFileSync(configPath, 'utf-8'));
    if (subKey) {
        return config[subKey];
    }
    return config;
}
function readConfig(opts) {
    let cliConfig = {};
    if (opts.config) {
        cliConfig = readConfigFromFile(opts.config);
    }
    else {
        const flyntConfigFile = path_1.default.join(opts.moduleRootFolder, '.flyntrc.json');
        if (fs_1.default.existsSync(flyntConfigFile)) {
            cliConfig = readConfigFromFile(flyntConfigFile);
        }
        else {
            const pkgJsonFile = path_1.default.join(opts.moduleRootFolder, 'package.json');
            if (fs_1.default.existsSync(pkgJsonFile)) {
                const pkgConfig = readConfigFromFile(pkgJsonFile, 'flynt');
                cliConfig = pkgConfig || cliConfig;
            }
        }
    }
    return cliConfig;
}
function getDate(dateStr) {
    if (dateStr) {
        const result = new Date(dateStr);
        (0, assert_1.default)(!isNaN(result.getTime()), `Invalid date ${dateStr}`);
        return result;
    }
    return undefined;
}
function loadConfig(cliOptions) {
    const config = readConfig(cliOptions);
    return {
        catalog: config.catalogDir || cliOptions.catalog || (0, flynt_rules_1.getCatalog)(),
        rules: config.rules ?? {},
        date: getDate(config.date ?? cliOptions.date),
        severity: config.severity,
    };
}
exports.loadConfig = loadConfig;
//# sourceMappingURL=cli-config.js.map