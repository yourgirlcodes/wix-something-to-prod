"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.main = void 0;
const startDate = new Date();
console.error(startDate.toISOString() + ' Flynt started');
const plugins_1 = require("./plugins");
const cli_options_1 = require("./cli-options");
const flynt_cli_1 = require("./flynt-cli");
const helpers_1 = require("yargs/helpers");
const error_reporter_1 = require("./error-reporter");
async function main(argv, opts = {}) {
    const args = (0, helpers_1.hideBin)(argv);
    try {
        const pluginsHost = await (0, plugins_1.loadPluginsFromCli)(args);
        for (const plugin of opts.plugins || []) {
            await pluginsHost.loadPlugin(plugin);
        }
        const options = (0, cli_options_1.parseCliOptions)(args, pluginsHost);
        const result = await (0, flynt_cli_1.flyntCliInternal)(options, pluginsHost);
        if (result.errors > 0) {
            console.error(result.formattedOutput);
            const exitCode = getExitCode(options.exitCode, result);
            console.error(`Flynt Exit with code ${exitCode}`);
            process.exitCode = exitCode;
        }
        else if (result.warnings) {
            console.warn(result.formattedOutput);
        }
    }
    catch (err) {
        await (0, error_reporter_1.reportError)(err, { extra: { args: args.join(' ') } });
        console.error('Flynt failed: ', err.stack);
        console.error('Flynt Exit with code 2');
        process.exitCode = 2;
    }
    finally {
        const endDate = new Date();
        const seconds = (endDate.getTime() - startDate.getTime()) / 1000;
        console.error(`Flynt finished in ${seconds} seconds`);
    }
}
exports.main = main;
function getExitCode(exitCode, result) {
    switch (exitCode) {
        case flynt_cli_1.ExitCode.strict:
            return (result.strictErrors > 0) ? 1 : 0;
        case flynt_cli_1.ExitCode.never:
            return 0;
        default:
            return 1;
    }
}
//# sourceMappingURL=main.js.map