"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.summarizeResults = exports.groupBySeverityAndRuleId = void 0;
const path_1 = __importDefault(require("path"));
const flynt_engine_1 = require("@wix/flynt-engine");
const chalk_1 = __importDefault(require("chalk"));
function toShortPath(cwd, filePath) {
    const relPath = path_1.default.relative(cwd, filePath);
    if (!relPath.startsWith('..')) {
        return relPath;
    }
    return filePath;
}
function formatLocation(baseLocation, filePath, line, column) {
    if (filePath) {
        const shortPath = toShortPath(baseLocation, filePath);
        if (line !== undefined && column !== undefined) {
            return `${shortPath}:${line}:${column}`;
        }
        return shortPath;
    }
    return 'N/A';
}
function groupBySeverityAndRuleId(lintResults) {
    return lintResults.results.reduce((grouped, lintResult) => {
        const rules = grouped.get(lintResult.severity) || {};
        rules[lintResult.ruleId] = lintResult;
        grouped.set(lintResult.severity, rules);
        return grouped;
    }, new Map());
}
exports.groupBySeverityAndRuleId = groupBySeverityAndRuleId;
function severityColor(severity) {
    const color = severity === flynt_engine_1.Severity.Error ? chalk_1.default.red : chalk_1.default.yellow;
    return color;
}
function defaultSeverityFormat(severity) {
    return severity.toUpperCase();
}
function summarizeResults(lintResults, opts, plugins) {
    let warnings = 0;
    let errors = 0;
    let strictErrors = 0;
    let inGracePeriod = 0;
    const baseLocation = plugins.getResultsBaseFolder() || opts.moduleRootFolder;
    const errorLog = [], warningLog = [], summaryLog = [], execErrorLog = [];
    let lines;
    const formatSeverity = plugins.getFormatSeverityFunction() || defaultSeverityFormat;
    for (const lintResult of lintResults.results) {
        const location = formatLocation(baseLocation, lintResult.filePath, lintResult.line, lintResult.column);
        const color = severityColor(lintResult.severity);
        let line = `${location} ${color(formatSeverity(lintResult.severity))}: ${color(lintResult.message)} [${chalk_1.default.cyan(lintResult.ruleId)}]`;
        if (lintResult.gracePeriod) {
            inGracePeriod++;
            line += ` (In grace period until [${lintResult.gracePeriod.graceUntil.toISOString().split('T')[0]}])`;
        }
        if (lintResult.severity === flynt_engine_1.Severity.Error) {
            errors++;
            if (lintResult.strict) {
                strictErrors++;
            }
            errorLog.push(line);
        }
        else {
            warnings++;
            warningLog.push(line);
        }
    }
    if (errors + warnings > 0) {
        const bySeverity = groupBySeverityAndRuleId(lintResults);
        summaryLog.push(('summary of issues grouped by severity'));
        summaryLog.push(('==========================================='));
        for (const [severity, resultByRuleId] of bySeverity.entries()) {
            summaryLog.push(severityColor(severity)(severity.toUpperCase()));
            for (const [ruleId, lintResult] of Object.entries(resultByRuleId)) {
                summaryLog.push(` [${chalk_1.default.cyan(ruleId)}] (more info: ${chalk_1.default.blueBright(chalk_1.default.underline(lintResult.ruleDoc))})`);
            }
        }
    }
    for (const ruleError of lintResults.executionErrors) {
        errors++;
        execErrorLog.push(chalk_1.default.red(`error occurred in rule ${ruleError.ruleId}: ${ruleError.error}`));
    }
    if (errors + warnings > 0) {
        const header = `Flynt results:\nFor more information about flynt see here: ${chalk_1.default.blueBright(chalk_1.default.underline('https://github.com/wix-private/flynt'))}\n`;
        lines = [header, ...errorLog, ...warningLog, ...execErrorLog, '', ...summaryLog, ''];
    }
    else {
        lines = [];
    }
    return {
        formattedOutput: lines.join('\n'),
        warnings,
        errors,
        strictErrors,
        inGracePeriod,
    };
}
exports.summarizeResults = summarizeResults;
//# sourceMappingURL=summarize-results.js.map