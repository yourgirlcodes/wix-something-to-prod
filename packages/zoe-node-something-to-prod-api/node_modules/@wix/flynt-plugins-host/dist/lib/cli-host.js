"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FlyntPluginsCliHostImpl = void 0;
const cli_options_1 = require("./cli-options");
const assert_1 = __importDefault(require("assert"));
const path_1 = __importDefault(require("path"));
const host_1 = require("./host");
class FlyntPluginsCliHostImpl extends host_1.FlyntPluginsHostImpl {
    async loadPluginsFromCli(args) {
        const cliOptions = await (0, cli_options_1.parseCliPluginOptions)(args);
        for (const pluginPath of cliOptions.plugins) {
            const actualPath = path_1.default.resolve(pluginPath);
            const pluginModule = await Promise.resolve().then(() => __importStar(require(actualPath)));
            await this.loadPluginModule(pluginModule);
        }
    }
    getExtendedCliOptions() {
        const result = {};
        for (const plugin of this.plugins) {
            if (plugin.getCliOptions) {
                const res = plugin.getCliOptions();
                (0, assert_1.default)(res && Array.isArray(res), `plugin ${plugin.name} returned invalid value from getCliOptions: ${JSON.stringify(res)}`);
                result[plugin.name] = res;
            }
        }
        return result;
    }
    setPluginOptions(name, opts) {
        const plugin = this.pluginByName.get(name);
        if (plugin && plugin.setOptions) {
            plugin.setOptions(opts);
        }
    }
}
exports.FlyntPluginsCliHostImpl = FlyntPluginsCliHostImpl;
//# sourceMappingURL=cli-host.js.map