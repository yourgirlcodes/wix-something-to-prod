const {getCamelCaseImpl} = require('./lib/camel-case');

const BIN_SUFFIX = '-bin';

function encodeGrpcMetadata(decoded = {}) {
  return Object.keys(decoded).reduce((encoded, key) => {
    const value = decoded[key];
    if (typeof value === 'string') {
      encoded[key] = value;
    } else if (value instanceof Buffer) {
      encoded[key + BIN_SUFFIX] = value.toString('base64');
    } else {
      throw new TypeError(`invalid type of metadata key ${key}, only strings and Buffers are allowed: ${value}[${typeof value}]`);
    }
    return encoded;
  }, {});
}

function decodeGrpcMetadata(encodedTrailers) {
  if (!encodedTrailers) {
    return encodedTrailers;
  }
  return Object.keys(encodedTrailers).reduce((decoded, key) => {
    const value = encodedTrailers[key];
    if (key.endsWith(BIN_SUFFIX)) {
      return {...decoded, [key.substr(0, key.length - BIN_SUFFIX.length)]: Buffer.from(value, 'base64')};
    } else {
      return {...decoded, [key]: value};
    }
  }, {});
}

const camelCase = getCamelCaseImpl(false).fieldCamelCase;

function ensureDc(server, dc) {
  const serverLc = server.toLowerCase();
  const dcLc = dc.toLowerCase();

  return serverLc.endsWith(dcLc) ? server : `${server}.${dc}`;
}

function encodeCallerId({namespace, name, host, dc = ''}) {
  const serverName = host
    .replace('.wixpress.com', '')
    .replace('.wix.com', '')
    .replace('.wixprod.net', '');

  return `${name}:${namespace}@${ensureDc(serverName, dc)}`;
}

module.exports = {encodeGrpcMetadata, decodeGrpcMetadata, camelCase, encodeCallerId, getCamelCaseImpl};
