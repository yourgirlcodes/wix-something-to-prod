"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.extractDescriptionFromPackageJson = exports.extractDescription = void 0;
const read_file_1 = require("./read-file");
const artifact_description_error_1 = require("./artifact-description-error");
const extract_from_pom_xml_1 = require("./extract-from-pom-xml");
const extract_from_package_json_1 = require("./extract-from-package-json");
/**
 * Reads an ArtifactDescription object from the given directory.
 *
 * The function will populate default values when needed (e.g., it sets the 'targets.static.folderToUpload' property
 * to 'dist/static' if package.json does not specify it), and will validate various values (e.g., length limit on the
 * artifact ID).
 *
 * The returned ArtifactDescription object will contain an artifact key if an artifact key (group ID, artifact ID) is
 * specified in either the package.json file or the pom.xml file, in the given directory. If both files specify an
 * artifact key, this function will check that the two keys are identical (throwing an exception if not). If neither
 * file specifies an artifact key, the .key attribute in the returned ArtifactDescription object will be null.
 *
 * @param dir directory to read the data from
 */
function extractDescription(dir) {
    const packageJson = (0, read_file_1.readFile)(dir, 'package.json');
    if (!packageJson.isPresent) {
        throw new artifact_description_error_1.ArtifactDescriptionError(`No package.json in ${dir}`);
    }
    const packageJsonArtifact = (0, extract_from_package_json_1.extractFromPackageJson)(packageJson);
    const pomXmlKey = (0, extract_from_pom_xml_1.extractFromPomXml)(dir);
    if (pomXmlKey) {
        const k = packageJsonArtifact.key;
        if (k) {
            if (k.groupId !== pomXmlKey.key.groupId) {
                throw new artifact_description_error_1.ArtifactDescriptionError(`groupId: value mismatch between package.json and pom.xml in ${dir}`);
            }
            if (k.artifactId !== pomXmlKey.key.artifactId) {
                throw new artifact_description_error_1.ArtifactDescriptionError(`artifactId: value mismatch between package.json and pom.xml in ${dir})`);
            }
        }
        return {
            key: pomXmlKey.key,
            targets: packageJsonArtifact.targets,
            contributors: packageJsonArtifact.contributors || pomXmlKey.contributors,
            previewUrls: packageJsonArtifact.previewUrls,
            platforms: packageJsonArtifact.platforms,
        };
    }
    return packageJsonArtifact;
}
exports.extractDescription = extractDescription;
function extractDescriptionFromPackageJson(dir) {
    const packageJson = (0, read_file_1.readFile)(dir, 'package.json');
    if (!packageJson.isPresent) {
        throw new artifact_description_error_1.ArtifactDescriptionError(`No package.json in ${dir}`);
    }
    return (0, extract_from_package_json_1.extractFromPackageJson)(packageJson);
}
exports.extractDescriptionFromPackageJson = extractDescriptionFromPackageJson;
//# sourceMappingURL=extract-description.js.map