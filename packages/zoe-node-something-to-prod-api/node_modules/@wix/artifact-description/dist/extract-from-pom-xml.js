"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.validate = exports.extractFromPomXml = void 0;
const xmlParser = __importStar(require("fast-xml-parser"));
const artifact_key_1 = require("./artifact-key");
const read_file_1 = require("./read-file");
const artifact_description_error_1 = require("./artifact-description-error");
function extractFromPomXml(dir) {
    const pomXml = (0, read_file_1.readFile)(dir, 'pom.xml');
    if (!pomXml.isPresent) {
        return null;
    }
    const parsedPomXml = xmlParser.parse(pomXml.content);
    const artifactKey = {
        artifactId: toStr(parsedPomXml.project, 'artifactId', pomXml.location),
        groupId: toStr(parsedPomXml.project, 'groupId', pomXml.location),
    };
    validate(artifactKey, 'pom.xml', dir);
    return Object.assign({ key: artifactKey }, extractContributors(parsedPomXml));
}
exports.extractFromPomXml = extractFromPomXml;
function extractContributors(parsedPomXml) {
    var _a, _b;
    const developers = (_b = (_a = parsedPomXml === null || parsedPomXml === void 0 ? void 0 : parsedPomXml.project) === null || _a === void 0 ? void 0 : _a.developers) === null || _b === void 0 ? void 0 : _b.developer;
    if (developers && Array.isArray(developers)) {
        const parsedDevs = developers.filter((dev) => dev.email && dev.name).map(({ email, name }) => ({ email, name }));
        if (parsedDevs.length > 0) {
            return { contributors: parsedDevs };
        }
    }
    return {};
}
function toStr(o, attribute, location) {
    const x = o[attribute];
    if (x == null) {
        throw new artifact_description_error_1.ArtifactDescriptionError(`Missing pom.xml element: <${attribute}> (in ${location})`);
    }
    if (typeof x === 'string') {
        return x;
    }
    throw new artifact_description_error_1.ArtifactDescriptionError(`Corrupted pom.xml: value of <${attribute}> is ${typeof x} (in ${location})`);
}
const LENGTH_LIMIT = 200;
function validate(key, fileName, dir) {
    if (!key.groupId) {
        throw new artifact_description_error_1.ArtifactDescriptionError(`Missing group ID (file: ${fileName}, directory: ${dir})`);
    }
    if (typeof key.groupId !== 'string') {
        throw new artifact_description_error_1.ArtifactDescriptionError(`Bad group ID: it must be a string (file: ${fileName}, directory: ${dir})`);
    }
    if (!key.artifactId) {
        throw new artifact_description_error_1.ArtifactDescriptionError(`Missing artifact ID (file: ${fileName}, directory: ${dir})`);
    }
    if (typeof key.artifactId !== 'string') {
        throw new artifact_description_error_1.ArtifactDescriptionError(`Bad artifact ID: it must be a string (file: ${fileName}, directory: ${dir})`);
    }
    if (key.artifactId.length > LENGTH_LIMIT) {
        throw new artifact_description_error_1.ArtifactDescriptionError(`Bad artifact ID value: length limit exceeded (file: ${fileName}, directory: ${dir})`);
    }
    if (key.groupId.length > LENGTH_LIMIT) {
        throw new artifact_description_error_1.ArtifactDescriptionError(`Bad group ID value: length limit exceeded (file: ${fileName}, directory: ${dir})`);
    }
    if (!key.groupId.match(artifact_key_1.GROUP_ID_REGEX)) {
        throw new artifact_description_error_1.ArtifactDescriptionError(`Bad group ID value "${key.groupId}" (file: ${fileName}, directory: ${dir})`);
    }
    if (!key.artifactId.match(artifact_key_1.ARTIFACT_ID_REGEX)) {
        throw new artifact_description_error_1.ArtifactDescriptionError(`Bad artifact ID value "${key.artifactId}" (file: ${fileName}, directory: ${dir})`);
    }
    return key;
}
exports.validate = validate;
//# sourceMappingURL=extract-from-pom-xml.js.map