import { Promisable } from 'type-fest';
export declare type PluginModule = {
    createPlugin: () => FlyntPlugin;
};
export interface FlyntPlugin {
    readonly name: string;
    getCliOptions?(): CliOption[];
    setOptions?(opts: Record<string, any>): void;
    init?(ctx: FlyntCtx): Promisable<void>;
    beforeUnload?(ctx: FlyntCtx, results: FlyntResults): Promisable<void>;
    beforeValidateFlyntOptions?(ctx: FlyntCtx): void;
    beforeWriteToOutputFile?(ctx: FlyntCtx, output: FlyntOutput): Promisable<void>;
    afterWriteToOutputFile?(ctx: FlyntCtx, output: FlyntOutput): Promisable<void>;
    getResultsBaseFolder?(ctx: FlyntCtx): string;
    getFormatSeverityFunction?(ctx: FlyntCtx): FormatSeverity;
}
export declare type CliOption = {
    name: string;
};
export interface FlyntOptions {
    mainProtoFolder: string;
    moduleRootFolder: string;
    includeProtoFolder?: string[];
    includeDescriptorSet?: string[];
    mainDescriptorSet?: string;
    date?: string;
    prevMainProtoFolder?: string;
    prevIncludeProtoFolder?: string[];
    prevIncludeDescriptorSet?: string[];
    prevMainDescriptorSet?: string;
    prevModuleRootFolder?: string;
}
export interface FlyntCtx {
    opts: FlyntOptions;
    debug(text: string): void;
    reportError(error: unknown): Promise<void>;
}
export interface FlyntOutput {
    lintResults: LintResults;
    config: LintConfig;
    [key: string]: any;
}
export interface LintResults {
    results: LintResult[];
    disabled: DisabledResult[];
    executionErrors: RuleError[];
}
export interface LintConfig {
    rules: {
        [ruleName: string]: Severity | undefined;
    };
    date?: Date;
    severity?: Severity;
}
export interface LintResult {
    readonly ruleId: string;
    readonly ruleDoc: string;
    readonly message: string;
    readonly severity: Severity;
    readonly filePath?: string;
    readonly line?: number;
    readonly column?: number;
}
export interface DisabledResult {
    readonly resultId: string;
    readonly ruleId: string;
    readonly filePath: string;
    readonly line: number;
    readonly column: number;
    readonly disabledBy: {
        readonly line: number;
        readonly id: string;
    };
}
export declare enum Severity {
    Warning = "warning",
    Error = "error",
    Off = "off"
}
export interface RuleError {
    readonly ruleId: string;
    readonly error: string;
}
export declare type FormatSeverity = (severity: Severity) => string;
export interface FlyntResults {
    output: FlyntOutput;
    formattedOutput: string;
    warnings: number;
    errors: number;
    strictErrors: number;
}
