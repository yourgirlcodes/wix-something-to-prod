/// <reference types="node" />
import { CiBuildInfo, CiBuildInfoV1, PackageInfo } from './CiBuildInfo';
export { CiBuildInfo, CiBuildInfoV1, PackageInfo };
export declare const BUILD_INFO_PATH_ENV_NAME = "FALCON_CI_BUILD_INFO_PATH";
export declare const TESTKIT_BUILD_INFO_PATH_ENV_NAME = "FALCON_CI_TESTKIT_BUILD_INFO_PATH";
export interface TestkitPackageDefinition {
    path: string;
    fingerprint?: string;
}
export declare const testkit: {
    createBuildInfo: ({ packages, isPullRequest, isFalcon, repoRootDir, vcsUrl: customVcsUrl, }: {
        packages: TestkitPackageDefinition[];
        isPullRequest?: boolean | undefined;
        isFalcon?: boolean | undefined;
        repoRootDir?: string | undefined;
        vcsUrl?: string | undefined;
    }) => {
        env: {
            FALCON_CI_TESTKIT_BUILD_INFO_PATH: string;
        };
        buildInfo: {
            v1: {
                isFalcon?: boolean | undefined;
                falconBuildRunId: string;
                flakinessDetectionBuildRun: boolean;
                buildLogLink: string;
                repoRootFullPath: string;
                vcs: {
                    pullRequest?: {
                        fromBranch: string;
                        prNumber: string;
                    } | undefined;
                    repoName: string;
                    repoOwner: string;
                    url: string;
                    commitHash: string;
                    branch: string;
                };
                packages: Record<string, {
                    artifact?: {
                        cdnUrl?: {
                            versioned: string;
                            unversioned: string;
                        } | undefined;
                        dockerImageName?: string | undefined;
                        npmPackageName?: string | undefined;
                    } | undefined;
                    id: string;
                    fingerprint: string;
                    fullPath: string;
                    relativePath: string;
                    monorepoDependencies: {
                        direct: string[];
                        all: string[];
                    };
                }>;
            };
            v2: {
                isFalcon?: boolean | undefined;
                falconBuildRunId: string;
                flakinessDetectionBuildRun: boolean;
                buildLogLink: string;
                repoRootFullPath: string;
                vcs: {
                    pullRequest?: {
                        fromBranch: string;
                        prNumber: string;
                    } | undefined;
                    repoName: string;
                    repoOwner: string;
                    url: string;
                    commitHash: string;
                    branch: string;
                };
                packages: Record<string, {
                    artifact?: {
                        cdnUrl?: {
                            versioned: string;
                            unversioned: string;
                        } | undefined;
                        dockerImageName?: string | undefined;
                        npmPackageName?: string | undefined;
                    } | undefined;
                    id: string;
                    fingerprint: string;
                    fullPath: string;
                    relativePath: string;
                    monorepoDependencies: {
                        direct: string[];
                        all: string[];
                    };
                }>;
            };
        };
    };
};
export declare function fullFileName(buildInfoPath: string): string;
export declare function createBuildInfoFile(buildInfo: CiBuildInfo, buildInfoPath: string): void;
export declare function getBuildInfo(): CiBuildInfo;
export declare function getBuildInfoForTesting(env: NodeJS.ProcessEnv, rootDir: string): CiBuildInfo;
