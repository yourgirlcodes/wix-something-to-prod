"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parse = void 0;
const z = __importStar(require("zod"));
const artifactInfoSchema = z.object({
    cdnUrl: z
        .object({
        versioned: z.string(),
        unversioned: z.string(),
    })
        .optional(),
    dockerImageName: z.string().optional(),
    npmPackageName: z.string().optional(),
});
const packageInfoSchema = z.object({
    id: z.string(),
    fingerprint: z.string(),
    artifact: artifactInfoSchema.optional(),
    fullPath: z.string(),
    relativePath: z.string(),
    monorepoDependencies: z.object({
        direct: z.array(z.string()),
        all: z.array(z.string()),
    }),
});
const ciBuildInfoV1Schema = z.object({
    isFalcon: z.boolean().optional(),
    falconBuildRunId: z.string(),
    flakinessDetectionBuildRun: z.boolean(),
    buildLogLink: z.string(),
    repoRootFullPath: z.string(),
    vcs: z.object({
        repoName: z.string(),
        repoOwner: z.string(),
        url: z.string(),
        commitHash: z.string(),
        branch: z.string(),
        pullRequest: z
            .object({
            fromBranch: z.string(),
            prNumber: z.string(),
        })
            .optional(),
    }),
    packages: z.record(packageInfoSchema),
});
const ciBuildInfoSchema = z.object({
    v1: ciBuildInfoV1Schema,
    // Breaking change in legacy CI: prefer `SRC_MD5` over `ARTIFACT_VERSION` for the package fingerprint value
    // This is a data change and therefore the schema is the same as v1
    v2: ciBuildInfoV1Schema,
});
// we are putting the `nonstrict()` call here and not on the schema because TS compiler
// complains about "TS2589: Type instantiation is excessively deep and possibly infinite."
// when we use the CiBuildInfo type in the orchestrator package.
const parse = (data, params) => ciBuildInfoSchema.nonstrict().parse(data, params);
exports.parse = parse;
//# sourceMappingURL=CiBuildInfo.js.map