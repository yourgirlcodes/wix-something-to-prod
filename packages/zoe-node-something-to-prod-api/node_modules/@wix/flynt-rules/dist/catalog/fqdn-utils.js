"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isServiceRelevantForAutoGeneratedClient = exports.isMethodRelevantForAutoGeneratedClient = exports.resolveMethodExposure = exports.isSpiFqdn = exports.isPrivateExposure = exports.isSubscription = exports.isSpiService = exports.findDuplicate = exports.isValidDate = exports.toLocalFqn = exports.resolveMainEntityName = exports.resolveMainEntityMessage = exports.fqnsEqual = exports.resolveMainEntityFqn = void 0;
const proto_syntax_tree_1 = require("@wix/proto-syntax-tree");
const wix_protos_1 = require("@wix/wix-protos");
const annotations_1 = require("@wix/wix-protos/typed/wix/api/annotations");
const entity_1 = require("@wix/wix-protos/typed/wix/api/entity");
function resolveMainEntityFqn(service) {
    const serviceEntity = service.options.getTypedOption(wix_protos_1.wix.api.service_entity);
    if (serviceEntity) {
        return serviceEntity.value.message;
    }
}
exports.resolveMainEntityFqn = resolveMainEntityFqn;
function fqnsEqual(fqn1, fqn2) {
    if (fqn1.startsWith('.')) {
        if (fqn2.startsWith('.')) {
            return fqn1 === fqn2;
        }
        return fqn1.slice(1) === fqn2;
    }
    if (fqn2.startsWith('.')) {
        return fqn2.slice(1) === fqn1;
    }
    return fqn1 === fqn2;
}
exports.fqnsEqual = fqnsEqual;
function resolveMainEntityMessage(service) {
    const mainEntityFqn = resolveMainEntityFqn(service);
    if (mainEntityFqn) {
        const messageType = service.st.findType(mainEntityFqn);
        if (messageType && messageType.typeName === proto_syntax_tree_1.TypeName.Message) {
            return messageType;
        }
    }
}
exports.resolveMainEntityMessage = resolveMainEntityMessage;
function resolveMainEntityName(service) {
    const mainEntityMessage = resolveMainEntityMessage(service);
    if (mainEntityMessage) {
        const entityFqdn = mainEntityMessage.options.getTypedOption(wix_protos_1.wix.api.entity);
        if (entityFqdn) {
            return entityFqdn.value.fqdn.split('.').pop();
        }
    }
}
exports.resolveMainEntityName = resolveMainEntityName;
function toLocalFqn(fqn) {
    if (fqn && fqn.startsWith('.')) {
        return fqn.substring(1);
    }
    else {
        return fqn;
    }
}
exports.toLocalFqn = toLocalFqn;
const YYYYMMDDRegEx = /^\d{4}-\d{2}-\d{2}$/;
function isValidDate(dateYYYYMMDD) {
    if (YYYYMMDDRegEx.test(dateYYYYMMDD)) {
        const date = new Date(dateYYYYMMDD);
        const time = date.getTime();
        if (time && !isNaN(time)) {
            return date.toISOString().slice(0, 10) === dateYYYYMMDD;
        }
    }
    return false;
}
exports.isValidDate = isValidDate;
function findDuplicate(options, key) {
    const existing = new Set();
    for (const opt of options) {
        const value = opt.value[key];
        if (existing.has(value)) {
            return opt;
        }
        else {
            existing.add(value);
        }
    }
}
exports.findDuplicate = findDuplicate;
function isSpiService(service) {
    return !!service.options.getTypedOption(wix_protos_1.wix.spi.service);
}
exports.isSpiService = isSpiService;
function isSubscription(method) {
    return !!method.options.getTypedOption(wix_protos_1.wix.api.subscription);
}
exports.isSubscription = isSubscription;
function isPrivateExposure(service) {
    const exposure = service.options.getTypedOption(wix_protos_1.wix.api.service_exposure);
    return (exposure && exposure.value === annotations_1.Exposure.PRIVATE);
}
exports.isPrivateExposure = isPrivateExposure;
const SPI_FQDN_REGEX = /^wix\.interfaces\.[a-z]+(_[a-z]+)*(\.[a-z]+(_[a-z]+)*)?\.v\d{1,3}\.[a-z]+(_[a-z]+)*$/;
function isSpiFqdn(fqdn) {
    return SPI_FQDN_REGEX.test(fqdn);
}
exports.isSpiFqdn = isSpiFqdn;
function getServiceExposure(service) {
    const exposure = service.options.getTypedOption(wix_protos_1.wix.api.service_exposure);
    return exposure ? exposure.value : annotations_1.Exposure.INTERNAL;
}
function resolveMethodExposure(method) {
    const exposure = method.options.getTypedOption(wix_protos_1.wix.api.exposure);
    return exposure ? exposure.value : getServiceExposure(method.parent);
}
exports.resolveMethodExposure = resolveMethodExposure;
const publicOrInternal = [annotations_1.Exposure.PUBLIC, annotations_1.Exposure.INTERNAL];
function isMethodRelevantForAutoGeneratedClient(method) {
    return publicOrInternal.includes(resolveMethodExposure(method));
}
exports.isMethodRelevantForAutoGeneratedClient = isMethodRelevantForAutoGeneratedClient;
function isServiceRelevantForAutoGeneratedClient(service) {
    const mainEntity = resolveMainEntityMessage(service);
    if (mainEntity && getServiceExposure(service) !== annotations_1.Exposure.PRIVATE) {
        const entityOption = mainEntity.options.getTypedOption(wix_protos_1.wix.api.entity);
        if (entityOption && entityOption.value.appendixFiles) {
            return entityOption.value.appendixFiles.findIndex(appendix => appendix.type === entity_1.MessageAppendix.Type.AUTO_VELO) > -1;
        }
    }
    return false;
}
exports.isServiceRelevantForAutoGeneratedClient = isServiceRelevantForAutoGeneratedClient;
//# sourceMappingURL=fqdn-utils.js.map