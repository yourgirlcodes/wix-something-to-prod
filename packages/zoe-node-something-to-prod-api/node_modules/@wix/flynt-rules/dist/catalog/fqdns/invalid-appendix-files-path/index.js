"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.rule = void 0;
const flynt_engine_1 = require("@wix/flynt-engine");
const fqdn_utils_1 = require("../../fqdn-utils");
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const wix_protos_1 = require("@wix/wix-protos");
const entity_1 = require("@wix/wix-protos/typed/wix/api/entity");
function isValidPath(path) {
    return path && !path.startsWith('..') && !path.startsWith('/') && !path.startsWith('\\');
}
exports.rule = {
    description: 'A path in appendix_files must be valid and lead to the existing file',
    severity: flynt_engine_1.Severity.Error,
    moreInfoUrl: 'https://bo.wix.com/wix-docs/rnd/platformization-guidelines/fqdn#platformization-guidelines_fqdn_fqdn-pattern',
    run(ctx) {
        ctx.visit({
            visitMessage(message) {
                const entityOption = message.options.getTypedOption(wix_protos_1.wix.api.entity);
                if (entityOption && entityOption.value.appendixFiles) {
                    entityOption.value.appendixFiles.forEach(appendixFile => {
                        const appendixFilePath = appendixFile.path;
                        const normalizedPath = path_1.default.normalize(appendixFilePath);
                        if (ctx.assert(isValidPath(normalizedPath), {
                            errorAt: entityOption,
                            message: `the path '${appendixFilePath}' in the option 'appendix_files' of the '${(0, fqdn_utils_1.toLocalFqn)(message.fqn)}' is invalid`
                        })) {
                            const fullPath = path_1.default.join(ctx.protoDir, normalizedPath);
                            if (ctx.assert(fs_1.default.existsSync(fullPath), {
                                errorAt: entityOption,
                                message: `the path '${appendixFilePath}' in the option 'appendix_files' of the '${(0, fqdn_utils_1.toLocalFqn)(message.fqn)}' does not exist [Full path: ${fullPath}]`
                            })) {
                                if (appendixFile.type === entity_1.MessageAppendix.Type.AUTO_VELO) {
                                    ctx.assert(fs_1.default.lstatSync(fullPath).isDirectory(), {
                                        errorAt: entityOption,
                                        message: `the path '${appendixFilePath}' in the option 'appendix_files' with type 'AUTO_VELO' of the '${(0, fqdn_utils_1.toLocalFqn)(message.fqn)}' must be a directory (should not be a file)`
                                    });
                                }
                            }
                        }
                    });
                }
            }
        });
    }
};
//# sourceMappingURL=index.js.map