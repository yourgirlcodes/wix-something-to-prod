"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.rule = void 0;
const flynt_engine_1 = require("@wix/flynt-engine");
const wix_protos_1 = require("@wix/wix-protos");
exports.rule = {
    description: 'Message fields that cannot be expressed via http request parameters are not allowed in GET and DELETE requests',
    run(ctx) {
        const validated = new Set();
        ctx.visit({
            visitMethod(method) {
                const httpOption = method.options.getTypedOption(wix_protos_1.google.api.http);
                if (httpOption && (httpOption.value.get || httpOption.value.delete)) {
                    ctx.visitFrom(method.request, {
                        visitField(field) {
                            ctx.assert(validateField(field), {
                                errorAt: field,
                                message: 'Message fields that cannot be expressed via request parameters are not allowed in GET and DELETE requests'
                            });
                        }
                    });
                }
            }
        });
        function validateField(field) {
            switch (field.fieldType.kind) {
                case flynt_engine_1.FieldKind.Primitive:
                case flynt_engine_1.FieldKind.Wrapper:
                case flynt_engine_1.FieldKind.Enum:
                    return true;
                case flynt_engine_1.FieldKind.Repeated: {
                    const kind = field.fieldType.elementType.kind;
                    return kind === flynt_engine_1.FieldKind.Primitive || kind === flynt_engine_1.FieldKind.Enum;
                }
                case flynt_engine_1.FieldKind.Message: {
                    const fqn = field.fieldType.message.fqn;
                    if (fqn === '.google.protobuf.Struct' || fqn === '.google.protobuf.Value') {
                        return false;
                    }
                    if (validated.has(fqn)) {
                        return true;
                    }
                    validated.add(fqn);
                    for (const messageField of field.fieldType.message.fields) {
                        if (messageField.fieldType.kind === flynt_engine_1.FieldKind.Repeated) {
                            return false;
                        }
                        else if (!validateField(messageField)) {
                            return false;
                        }
                    }
                    return true;
                }
                default:
                    return false;
            }
        }
    }
};
//# sourceMappingURL=index.js.map