"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.rule = void 0;
const flynt_engine_1 = require("@wix/flynt-engine");
const wix_protos_1 = require("@wix/wix-protos");
const fqdn_utils_1 = require("../../fqdn-utils");
exports.rule = {
    description: 'Incompatible field type change',
    stateful: true,
    severity: flynt_engine_1.Severity.Error,
    run(ctx) {
        ctx.visitModified({
            visitField(field, prevField) {
                const report = {
                    errorAt: field,
                    message: `Incompatible field type change from ${prevField.fieldType.toString()} to ${field.fieldType.toString()}`,
                };
                assertFieldTypesAreCompatible(field.fieldType, prevField.fieldType);
                function assertFieldTypesAreCompatible(fieldType, prevFieldType) {
                    if (ctx.assert(fieldType.kind === prevFieldType.kind, report)) {
                        switch (fieldType.kind) {
                            case flynt_engine_1.FieldKind.Repeated:
                                assertFieldTypesAreCompatible(fieldType.elementType, prevFieldType.elementType);
                                break;
                            case flynt_engine_1.FieldKind.Wrapper:
                                ctx.assert(fieldType.type === prevFieldType.type, report);
                                break;
                            case flynt_engine_1.FieldKind.Primitive:
                                assertPrimitiveTypesAreCompatible(fieldType.type, prevFieldType.type);
                                break;
                            case flynt_engine_1.FieldKind.Enum:
                                ctx.assert(fieldType.enum.fqn === prevFieldType.enum.fqn, report);
                                break;
                            case flynt_engine_1.FieldKind.Message:
                                ctx.assert(fieldType.message.fqn === prevFieldType.message.fqn ||
                                    isDecomposed(fieldType.message, prevFieldType.message), report);
                                break;
                        }
                    }
                }
                function assertPrimitiveTypesAreCompatible(fieldType, prevFieldType) {
                    if (fieldType !== prevFieldType) {
                        const compatIntTypes = [flynt_engine_1.Primitives.INT32, flynt_engine_1.Primitives.UINT32, flynt_engine_1.Primitives.INT64, flynt_engine_1.Primitives.UINT64, flynt_engine_1.Primitives.BOOL];
                        const compatStrTypes = [flynt_engine_1.Primitives.STRING, flynt_engine_1.Primitives.BYTES];
                        const compatFixed32Types = [flynt_engine_1.Primitives.FIXED32, flynt_engine_1.Primitives.SFIXED32];
                        const compatFixed64Types = [flynt_engine_1.Primitives.FIXED64, flynt_engine_1.Primitives.SFIXED64];
                        ctx.assert(compatIntTypes.includes(fieldType) && compatIntTypes.includes(prevFieldType) ||
                            compatStrTypes.includes(fieldType) && compatStrTypes.includes(prevFieldType) ||
                            compatFixed32Types.includes(fieldType) && compatFixed32Types.includes(prevFieldType) ||
                            compatFixed64Types.includes(fieldType) && compatFixed64Types.includes(prevFieldType), report);
                    }
                }
                function isDecomposed(currentFieldMessage, prevFieldMessage) {
                    const decomposeOption = currentFieldMessage.options.getTypedOption(wix_protos_1.wix.api.decomposite_of);
                    if (decomposeOption) {
                        return (0, fqdn_utils_1.fqnsEqual)(decomposeOption.value, prevFieldMessage.fqn);
                    }
                    return false;
                }
            }
        });
    }
};
//# sourceMappingURL=index.js.map