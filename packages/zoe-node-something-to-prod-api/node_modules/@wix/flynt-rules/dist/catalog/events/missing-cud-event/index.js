"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.rule = void 0;
const flynt_engine_1 = require("@wix/flynt-engine");
const fqdn_utils_1 = require("../../fqdn-utils");
const wix_protos_1 = require("@wix/wix-protos");
const callback_1 = require("@wix/wix-protos/typed/wix/api/callback");
const annotations_1 = require("@wix/wix-protos/typed/wix/api/annotations");
function findEvent(method, eventType) {
    return method.options.getTypedOption(wix_protos_1.wix.api.callback)
        .concat(method.parent.options.getTypedOption(wix_protos_1.wix.api.event))
        .find(opt => opt.value.eventType === eventType);
}
function validateEvent(ctx, method, eventType) {
    ctx.assert(findEvent(method, eventType), {
        errorAt: method,
        message: `the CUD method '${method.name}' must have a '${callback_1.Callback.EventType[eventType]}' callback or the service '${method.parent.name}' must have a '${callback_1.Callback.EventType[eventType]}' event`
    });
}
exports.rule = {
    description: 'A CUD method must have either callback or event',
    moreInfoUrl: 'https://bo.wix.com/wix-docs/rnd/platformization-guidelines/events#platformization-guidelines_events_13-decide-between-event-and-callback',
    severity: flynt_engine_1.Severity.Error,
    graceUntil: new Date('2021-12-20'),
    run(ctx) {
        ctx.visit({
            visitService(service) {
                return !(0, fqdn_utils_1.isSpiService)(service);
            },
            visitMethod(method) {
                const crudMethod = method.options.getTypedOption(wix_protos_1.wix.api.crud);
                if (crudMethod) {
                    switch (crudMethod.value.method) {
                        case annotations_1.Crud.Method.CREATE:
                            validateEvent(ctx, method, callback_1.Callback.EventType.CREATED);
                            break;
                        case annotations_1.Crud.Method.UPDATE:
                            validateEvent(ctx, method, callback_1.Callback.EventType.UPDATED);
                            break;
                        case annotations_1.Crud.Method.DELETE:
                            validateEvent(ctx, method, callback_1.Callback.EventType.DELETED);
                            break;
                    }
                }
            }
        });
    }
};
//# sourceMappingURL=index.js.map