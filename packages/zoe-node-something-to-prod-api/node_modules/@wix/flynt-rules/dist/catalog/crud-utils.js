"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateFilterField = exports.validateSearchField = exports.validateWqlField = exports.validateQueryField = exports.validatePagingField = exports.validateItemsField = exports.validateIdsField = exports.validateIdField = exports.validateItemField = exports.validateFieldMask = void 0;
const fqdn_utils_1 = require("./fqdn-utils");
function validateFieldMask(fieldMaskOption, method, ctx) {
    if (fieldMaskOption && fieldMaskOption.fieldmaskField) {
        const fieldMaskField = fieldMaskOption.fieldmaskField;
        ctx.assert(method.request.fields.byName(fieldMaskField), {
            errorAt: method.request,
            message: `Missing expected fieldmask_field '${fieldMaskField}' in the '${method.request.name}'`
        });
    }
}
exports.validateFieldMask = validateFieldMask;
function validateItemField(crudOption, method, message, ctx) {
    let itemField;
    if (crudOption && crudOption.itemField) {
        itemField = crudOption.itemField;
    }
    else {
        const serviceEntityName = (0, fqdn_utils_1.resolveMainEntityName)(method.parent);
        if (!serviceEntityName) {
            return;
        }
        itemField = serviceEntityName;
    }
    ctx.assert(message.fields.byName(itemField), {
        errorAt: message,
        message: `Missing expected item_field '${itemField}' in the '${message.name}'`
    });
}
exports.validateItemField = validateItemField;
function validateIdField(crudOption, method, ctx) {
    let idField;
    if (crudOption && crudOption.idField) {
        idField = crudOption.idField;
    }
    else {
        const serviceEntityName = (0, fqdn_utils_1.resolveMainEntityName)(method.parent);
        if (!serviceEntityName) {
            return;
        }
        idField = `${serviceEntityName}_id`;
    }
    const requestField = method.request.fields.byName(idField);
    ctx.assert(requestField, {
        errorAt: method.request,
        message: `Missing expected field '${idField}' in the '${method.request.name}'`
    });
}
exports.validateIdField = validateIdField;
function validateIdsField(crudOption, method, ctx) {
    let idsField;
    if (crudOption && crudOption.idsField) {
        idsField = crudOption.idsField;
    }
    else {
        const serviceEntityName = (0, fqdn_utils_1.resolveMainEntityName)(method.parent);
        if (!serviceEntityName) {
            return;
        }
        idsField = `${serviceEntityName}_ids`;
    }
    const requestField = method.request.fields.byName(idsField);
    ctx.assert(requestField, {
        errorAt: method.request,
        message: `Missing expected field '${idsField}' in the '${method.request.name}'`
    });
}
exports.validateIdsField = validateIdsField;
function validateItemsField(crudOption, method, message, ctx) {
    if (crudOption && crudOption.itemsField) {
        const itemsField = crudOption.itemsField;
        ctx.assert(message.fields.byName(itemsField), {
            errorAt: message,
            message: `Missing expected items_field '${itemsField}' in the '${message.name}'`
        });
    }
}
exports.validateItemsField = validateItemsField;
function validatePagingField(crudOption, method, ctx) {
    if (crudOption && crudOption.paging) {
        let pagingMetadataField;
        if (crudOption.paging.pagingMetadataField) {
            pagingMetadataField = crudOption.paging.pagingMetadataField;
        }
        else {
            pagingMetadataField = 'metadata';
        }
        ctx.assert(method.response.fields.byName(pagingMetadataField), {
            errorAt: method.response,
            message: `Missing expected field '${pagingMetadataField}' in the '${method.response.name}'`
        });
    }
}
exports.validatePagingField = validatePagingField;
function validateQueryField(crudOption, method, ctx) {
    let queryField;
    if (crudOption && crudOption.queryField) {
        queryField = crudOption.queryField;
    }
    else {
        queryField = 'query';
    }
    const requestField = method.request.fields.byName(queryField);
    ctx.assert(requestField, {
        errorAt: method.request,
        message: `Missing expected field '${queryField}' in the '${method.request.name}'`
    });
}
exports.validateQueryField = validateQueryField;
function validateWqlField(crudOption, method, ctx) {
    if (crudOption && crudOption.wql && crudOption.wql.operatorFieldSupport) {
        const requiredFields = crudOption.wql.operatorFieldSupport.flatMap(ofs => ofs.requiredFields?.flatMap(rf => rf.field));
        requiredFields?.filter(f => !!f).forEach(field => ctx.assert(field && method.request.fields.byName(field), {
            errorAt: method.request,
            message: `Missing expected field '${field}' in the '${method.request.name}'`
        }));
    }
}
exports.validateWqlField = validateWqlField;
function validateSearchField(crudOption, method, ctx) {
    let searchField;
    if (crudOption && crudOption.searchField) {
        searchField = crudOption.searchField;
    }
    else {
        searchField = 'search';
    }
    const requestField = method.request.fields.byName(searchField);
    ctx.assert(requestField, {
        errorAt: method.request,
        message: `Missing expected field '${searchField}' in the '${method.request.name}'`
    });
}
exports.validateSearchField = validateSearchField;
function validateFilterField(crudOption, method, ctx) {
    let filterField;
    if (crudOption && crudOption.filterField) {
        filterField = crudOption.filterField;
    }
    else {
        filterField = 'filter';
    }
    const requestField = method.request.fields.byName(filterField);
    ctx.assert(requestField, {
        errorAt: method.request,
        message: `Missing expected field '${filterField}' in the '${method.request.name}'`
    });
}
exports.validateFilterField = validateFilterField;
//# sourceMappingURL=crud-utils.js.map