"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.rule = void 0;
const flynt_engine_1 = require("@wix/flynt-engine");
const wix_protos_1 = require("@wix/wix-protos");
const validations_1 = require("@wix/wix-protos/typed/wix/api/validations");
exports.rule = {
    description: 'Potential unannotated PII field',
    moreInfoUrl: 'https://bo.wix.com/wix-docs/rnd/platformization-guidelines/protobuf#platformization-guidelines_protobuf_pii',
    severity: flynt_engine_1.Severity.Error,
    graceUntil: new Date('2022-01-24'),
    run(ctx) {
        ctx.visit({
            visitField(field) {
                if (validFieldForPII(field)) {
                    const piiCheckResult = checkPotentialPiiInName(field.name);
                    if (!piiCheckResult.isEmpty()) {
                        const piiAnnotation = field.options.getTypedOption(wix_protos_1.wix.api.pii);
                        ctx.assert(piiAnnotation, {
                            errorAt: field,
                            message: `The field: '${field.name}', potentially contains PII data, known keywords found: ${piiCheckResult.toString()}`
                        });
                    }
                }
            }
        });
    }
};
const ignoredFormats = [validations_1.Format.GUID, validations_1.Format.DECIMAL_VALUE];
function validFieldForPII(field) {
    if (field.fieldType.kind === flynt_engine_1.FieldKind.Primitive || field.fieldType.kind === flynt_engine_1.FieldKind.Wrapper) {
        if (field.fieldType.type === flynt_engine_1.Primitives.STRING) {
            const format = field.options.getTypedOption(wix_protos_1.wix.api.format);
            if (format && ignoredFormats.includes(format.value)) {
                return false;
            }
            return true;
        }
    }
    return false;
}
const potentialSubStrings = ['firstname', 'first_name', 'forename', 'fore_name', 'lastname', 'last_name', 'surname', 'sur_name', 'fullname', 'full_name', 'address', 'zip', 'birth', 'phone', 'mail', 'creditcard', 'credit_card', 'ssn'];
const potentialTerms = ['ip', 'vat', 'vin'];
function checkPotentialPiiInName(name) {
    const lowerName = name.toLowerCase();
    const splitLowerName = lowerName.split('_');
    const subStringsFound = potentialSubStrings.filter(value => lowerName.includes(value));
    const termsFound = potentialTerms.filter(value => splitLowerName.includes(value));
    return new PotentialPiiResult(subStringsFound, termsFound);
}
class PotentialPiiResult {
    constructor(subStrings, terms) {
        this.subStrings = subStrings;
        this.terms = terms;
    }
    isEmpty() {
        return !(this.subStrings.length + this.terms.length);
    }
    toString() {
        return `[${this.subStrings.concat(this.terms).join(', ')}]`;
    }
}
//# sourceMappingURL=index.js.map