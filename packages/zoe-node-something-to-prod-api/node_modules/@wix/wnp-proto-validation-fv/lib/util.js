const {util} = require('@wix/wix-proto-runtime-toolkit');
const {camelCase} = require('@wix/wnp-rpc-common');

const options = util.options('wix.api');

function schemaIdFor(messageType) {
  return util.fqn(messageType);
}

function alias(obj) {
  function same(...keys) {
    const value = obj[keys.find(key => obj[key])];
    keys.forEach(key => obj[key] = value);
    return {same};
  }
  return {same};
}

function toMutations(mapping) {
  return (base, reflectionObject) => {
    const opts = options(reflectionObject);
    const readOnly = opts.find('readOnly').first;
    if (readOnly === true) {
      return base;
    }
    return Object.keys(mapping).reduce((base, key) => {
      const args = opts.find(key).first;
      if (args !== undefined) {
        const handler = mapping[key];
        if (typeof handler === 'function') {
          base = handler(base, args);
        } else {
          base = {...base, [handler]: args};
        }
      }
      return base;
    }, base);
  };
}

function toFormatMutations(mapping) {
  return (base, args) => {
    const handler = mapping[args];
    if (handler) {
      return handler(base);
    }
  };
}

class Path {
  constructor(path) {
    this._path = path;
  }

  static get root() {
    return new Path([]);
  }

  static fromString(string) {
    return new Path(string.split('.'));
  }

  static fromReflectionObject(reflectionObject) {
    return options(reflectionObject).find('required')
      .map(value => value.split(','))
      .reduce((acc, val) => acc.concat(val), [])
      .map(path => path.trim().split('.').slice(1).map(path => camelCase(path)))
      .map(path => new Path(path));
  }

  clone() {
    return new Path([...this._path]);
  }

  append(fragment) {
    return new Path([...this._path, fragment]);
  }

  shift(...named) {
    const fragments = named.filter(n => n).map(({name}) => name);
    return fn => {
      this._path.push(...fragments);
      const res = fn();
      this._path.splice(-fragments.length, fragments.length);
      return res;
    };
  }

  equals(that) {
    return this._path.length === that._path.length && this._path.reduce((res, fragment, index) => res && fragment === that._path[index], true);
  }

  matches(that) {
    if (this.isEmpty) {
      return that.isEmpty;
    } else {
      if (that.isEmpty || that.length > this.length) {
        return false;
      } else {
        return this._path.reduce((res, fragment, index) => (res && (fragment === that._path[index] || that._path[index] === undefined)), true);
      }
    }
  }

  follows(paths) {
    return paths.some(p => p.matches(this));
  }

  in(paths) {
    return paths.some(p => p.equals(this));
  }

  get isEmpty() {
    return this.length === 0;
  }

  get length() {
    return this._path.length;
  }

  toString() {
    return this._path.join('.');
  }
}

module.exports = {alias, Path, schemaIdFor, toFormatMutations, toMutations};
