const Long = require('long');

const INTEGER = /^[-+]?\d+$/;
const NEGATIVE_INTEGER = /^-\d+$/;

module.exports = {
  messages: {
    'long-string.base': '\'{field}\' value \'{actual}\' must be a valid integer or string integer',
    'long-string.nonNegative': '\'{field}\' value \'{actual}\' must be an instance of non-negative integer or string integer',
    'long-string.min': '\'{field}\' value \'{actual}\' must be an instance of non-negative integer or string integer greater or equal to \'{expected}\'',
    'long-string.max': '\'{field}\' value \'{actual}\' must be an instance of non-negative integer or string integer less or equal to \'{expected}\'',
  },
  alias: 'long-string',
  schema: {
    type: 'custom',
    optional: true,
    check(value, errors, schema) {
      let converted;

      const valueIsInteger = (typeof value === 'number' && Number.isInteger(value)) || (typeof value === 'string' && INTEGER.test(value));

      if (!valueIsInteger) {
        errors.push({type: 'long-string.base', actual: value});
      } else if (schema.nonNegative === true && NEGATIVE_INTEGER.test(value)) {
        errors.push({type: 'long-string.nonNegative', actual: value});
      } else {
        converted = Long.fromValue(value);

        if (converted) {
          if (typeof schema.max === 'number') {
            if (converted.gt(schema.max)) {
              errors.push({type: 'long-string.max', actual: value, expected: schema.max});
            }
          }

          if (typeof schema.min === 'number') {
            if (converted.lt(schema.min)) {
              errors.push({type: 'long-string.min', actual: value, expected: schema.min});
            }
          }
        }
      }

      return value;
    }
  }
};