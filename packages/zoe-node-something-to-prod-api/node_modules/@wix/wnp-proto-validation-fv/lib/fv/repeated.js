'use strict';

module.exports = {
  messages: {
    'repeated': '\'{field}\' must be an array',
    'repeated.empty': '\'{field}\' must not be an empty array',
    'repeated.min': '\'{field}\' must contain at least {expected} items',
    'repeated.max': '\'{field}\' must contain less than or equal to {expected} items',
    'repeated.length': '\'{field}\' must contain {expected} items',
  },
  rules: {
    repeated: function ({ schema, messages }, path, context) {
      const src = [];

      src.push(`
		if (!Array.isArray(value)) {
			${this.makeError({ type: 'repeated', actual: 'value', messages })}
			return value;
		}

		var len = value.length;
	`);

      if (schema.empty === false) {
        src.push(`
			if (len === 0) {
				${this.makeError({ type: 'repeated.empty', actual: 'value', messages })}
			}
		`);
      }

      if (typeof schema.min === 'number') {
        src.push(`
			if (len < ${schema.min}) {
				${this.makeError({ type: 'repeated.min', expected: schema.min, actual: 'len', messages })}
			}
		`);
      }

      if (typeof schema.max === 'number') {
        src.push(`
			if (len > ${schema.max}) {
				${this.makeError({ type: 'repeated.max', expected: schema.max, actual: 'len', messages })}
			}
		`);
      }

      if (typeof schema.length === 'number') {
        src.push(`
			if (len !== ${schema.length}) {
				${this.makeError({ type: 'repeated.length', expected: schema.length, actual: 'len', messages })}
			}
		`);
      }

      if (schema.items) {
        src.push(`
			var arr = value;
			var parentField = field;
			for (var i = 0; i < arr.length; i++) {
				value = arr[i];
		`);

        const itemPath = path + '[]';
        const rule = this.getRuleFromSchema(schema.items);
        const innerSource = 'arr[i] = context.fn[%%INDEX%%](arr[i], (parentField ? parentField : "") + "[" + i + "]", parent, errors, context)';
        src.push(this.compileRule(rule, context, itemPath, innerSource, 'arr[i]'));
        src.push(`
			}
		`);
        src.push(`
		return arr;
	`);
      } else {
        src.push(`
		return value;
	`);
      }

      return {
        source: src.join('\n')
      };
    }
  }
};

