function forMapKey(keyType) {
  switch (keyType) {
    case 'bool':
      return /^(?:true|false|0|1)$/;
    case 'string':
      return /.*/;
    case 'int32':
    case 'fixed32':
    case 'sfixed32':
    case 'sint32':
    case 'int64':
    case 'fixed64':
    case 'sfixed64':
    case 'sint64':
      return /^-?(?:0|[1-9][0-9]*)$/;
    case 'uint32':
    case 'uint64':
      return /^(?:0|[1-9][0-9]*)$/;
    default:
      throw new Error(`unexpected map key type ${keyType}`);
  }
}

module.exports = {
  messages: {
    'map.base': '\'{field}\' must be an object',
    'map.key': '\'{field}\' map contains an invalid key \'{actual}\'',
    'map.min': '\'{field}\' map must contain at least {expected} keys, but got {actual} keys',
    'map.max': '\'{field}\' map must contain less than or equal to {expected} keys, but got {actual} keys',
  },
  rules: {
    map: function ({schema, messages}, path, context) {
      const src = [];
      src.push(`
		    if (typeof value !== 'object') {
			    ${this.makeError({ type: 'map.base', actual: 'value', messages })}
			    return value;
		    }
		    const length = Object.keys(value).length;
	    `);

      if (typeof schema.min === 'number') {
        src.push(`
        if (length < ${schema.min}) {
          ${this.makeError({ type: 'map.min', actual: 'value', messages, expected: schema.min })}
        }
        `);
      }

      if (typeof schema.max === 'number') {
        src.push(`
        if (length > ${schema.max}) {
          ${this.makeError({ type: 'map.max', actual: 'value', messages, expected: schema.max })}
        }
        `);
      }

      src.push(`
        const map = value;
        const parentField = field;
        for (const key in map) {
          value = map[key];
          if (!${forMapKey(schema.key)}.test(key)) {
            ${this.makeError({ type: 'map.key', actual: 'key', messages })}
            return value;
          }
		  `);

      const rule = this.getRuleFromSchema(schema.items);

      const innerSource = 'map[key] = context.fn[%%INDEX%%](map[key], (parentField ? parentField : "") + "[" + key + "]", parent, errors, context)';
      src.push(this.compileRule(rule, context, path, innerSource, 'map[key]'));
      src.push(`
			  }
		  `);

      src.push('return map;');

      return {
        source: src.join('\n')
      };
    }
  }
};
