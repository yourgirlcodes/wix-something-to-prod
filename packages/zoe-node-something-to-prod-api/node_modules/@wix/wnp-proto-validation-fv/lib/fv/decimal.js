const BigNumber = require('bignumber.js');

module.exports = {
  messages: {
    'string.decimal.lte': '"{field}" must be less than or equal to "{expected}"',
    'string.decimal.lt': '"{field}" must be less than "{expected}"',
    'string.decimal.gte': '"{field}" must be greater than or equal to "{expected}"',
    'string.decimal.gt': '"{field}" must be greater than "{expected}"',
    'string.decimal.maxScale': '"{field}" must be have at most "{expected}" decimal places',
    'string.decimalValue': '"{field}" must be string representing a decimal number',
  },
  alias: 'decimal',
  schema: {
    type: 'custom',
    optional: true,
    check(value, errors, schema) {
      if (typeof value === 'string') {
        const number = new BigNumber(value);
        if (isNaN(number)) {
          errors.push({type: 'string.decimalValue', actual: value});
        } else {
          Object.keys(schema.ops || {}).forEach(op => {
            const validationValue = new BigNumber(schema.ops[op]);
            if (!number[op](validationValue)) {
              errors.push({type: `string.decimal.${op}`, actual: value, expected: validationValue.toString()});
            }
          });
        }

        if (schema.maxScale) {
          if (number.decimalPlaces() > schema.maxScale) {
            return errors.push({type: 'string.decimal.maxScale', expected: schema.maxScale});
          }
        }
      }
      return value;
    }
  }
}; 