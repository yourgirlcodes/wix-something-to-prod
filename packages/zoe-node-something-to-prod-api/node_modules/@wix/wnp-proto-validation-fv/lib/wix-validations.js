const {toMutations, toFormatMutations} = require('./util');
const _ = require('lodash');

const FORMAT_MAPPING = toFormatMutations({
  'EMAIL': () => ({type: 'emailAddress', optional: true}),
  'HOSTNAME': () => ({type: 'hostname', optional: true}),
  'IPV4': () => ({type: 'ipv4', optional: true}),
  'IPV6': () => ({type: 'ipv6', optional: true}),
  'PHONE': () => ({type: 'phone'}),
  'CREDIT_CARD': () => ({type: 'luhn', optional: true}),
  'GUID': () => ({type: 'guid', optional: true}),
  'COUNTRY': () => ({type: 'country', optional: true}),
  'LANGUAGE': () => ({type: 'language', optional: true}),
  'WEB_URL': () => ({type: 'url', optional: true}),
  'URI': () => ({type: 'uri', optional: true}),
  'CURRENCY': () => ({type: 'currencyCode'}),
  'LANGUAGE_TAG': () => ({type: 'languageTag', optional: true}),
  'COLOR_HEX': () => ({type: 'colorHex'}),
  'DECIMAL_VALUE': () => ({type: 'decimal', optional: true}),
});

const fieldSchemas = toMutations({
  min: 'min',
  max: 'max',
  maxLength: 'max',
  minLength: (base, args) => ({...base, min: args, empty: false}),
  format: FORMAT_MAPPING,
  'decimalValue.gt': (base, args) => ({...base, ops: {'gt': args, ...(base.ops || {})}}),
  'decimalValue.gte': (base, args) => ({...base, ops: {'gte': args, ...(base.ops || {})}}),
  'decimalValue.lt': (base, args) => ({...base, ops: {'lt': args, ...(base.ops || {})}}),
  'decimalValue.lte': (base, args) => ({...base, ops: {'lte': args, ...(base.ops || {})}}),
  'decimalValue.maxScale': (base, args) => Object.assign({maxScale: args}, base),
});

const collectionSchemas = toMutations({
  minSize: 'min',
  maxSize: 'max',
});

function wixValidations(requiredPaths = []) {
  const decorator = {
    afterField(schema, path, field) {
      let base = fieldSchemas(schema, field);
      if (path.in(requiredPaths)) {
        base = {...base, optional: false};
        if (field.type === 'string') {
          base = {...base, empty: false};
        }
      }
      return base;
    },
    afterCollectionField(schema, path, field) {
      let base = collectionSchemas(schema, field);
      return path.in(requiredPaths) ? {...base, optional: false, empty: false} : base;
    },
    afterOneOf(schema, path) {
      const oneofs = _(schema.oneofs)
        .mapValues((oneof, name) => path.clone().append(name).in(requiredPaths) ? {...oneof, optional: false} : oneof)
        .value();
      return {...schema, oneofs};
    },
  };

  function schemaId(id, type, path) {
    return path.follows(requiredPaths) ? `${id}:${path}` : id;
  }

  return {decorator, schemaId};
}

module.exports = wixValidations;

