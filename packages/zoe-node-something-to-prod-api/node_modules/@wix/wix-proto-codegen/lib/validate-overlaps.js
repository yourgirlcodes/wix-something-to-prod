const _ = require('lodash'),
  {util} = require('@wix/wix-proto-runtime-toolkit'),
  {throwError} = require('./validation-error');

function validateOverlaps(routeList) {
  const routes = routeList.map(route => ({
    ...route,
    sample: toSample(route.path)
  }));

  const routesByService = _.groupBy(routes, (route) => util.fqn(route.method.parent));
  Object.values(routesByService).forEach((serviceRoutes) => {
    const routesByVerb = _.groupBy(serviceRoutes, 'verb');
    const starRoutes = routesByVerb['*'] || [];
    delete routesByVerb['*'];

    Object.values(routesByVerb).forEach((routes) => {
      checkOverlaps(routes, starRoutes);
    });

    checkOverlaps(starRoutes, []);
  });
}

// Replace all variables to a hard coded value
function toSample(path) {
  return path.replace(/{([.\w]+)(?:=(.*))?}/g, (match, param, pathSegments) => {
    return (pathSegments || '*');
  });
}

function checkOverlaps(routes, starRoutes) {
  let route = routes.shift();
  while (route) {
    for (const otherRoute of [...routes, ...starRoutes]) {
      checkOverlap(route, otherRoute);
    }
    route = routes.shift();
  }
}

function checkOverlap(route1, route2) {
  if (route1.sample === route2.sample) {
    throwError(route1.method.parent, `URL mappings overlap detected:\n  ${routeDetails(route1)}\n  ${routeDetails(route2)}`);
  }
}

function routeDetails(route) {
  return `${util.fqn(route.method || {})} \t${route.verb.toUpperCase()} \t${route.path}`;
}

module.exports = {validateOverlaps};
