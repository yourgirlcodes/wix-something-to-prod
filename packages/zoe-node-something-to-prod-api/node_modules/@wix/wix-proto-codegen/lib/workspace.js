const {Module} = require('./module'),
  {Root} = require('./root'),
  {dirname} = require('path'),
  {validateProto} = require('./validate-proto');

function resolveToPath(moduleIdOrPath) {
  if (moduleIdOrPath.startsWith('@wix/')) {
    try {
      return dirname(require.resolve(`${moduleIdOrPath}/package.json`, {paths: [process.cwd()]}));
    } catch (e) {
      // swallow
    }
  }
  return moduleIdOrPath;
}

class Workspace {

  constructor(seedModuleIdOrPath) {
    this._seedModulePath = resolveToPath(seedModuleIdOrPath);
    this._module = undefined;
    this._root = undefined;
  }

  resolveDependencies({strictMode = false, alternateCommentMode = false, preferTrailingComment = false, stdCase} = {}) {
    this._module = Module.fromDir(this._seedModulePath);
    this._root = new Root(this._module, {strictMode, alternateCommentMode, preferTrailingComment, stdCase});
  }

  validate({skipOptionsValidation = false} = {}) {
    try {
      validateProto(this._root, {skipOptionsValidation});
    } catch (err) {
      if (err.node && err.node.filename) {
        throw this._enrichError(err, err.node.filename);
      }
      throw err;
    }
  }

  async loadProto() {
    await this._root.init();
    return this._root;
  }

  _enrichError(err, file) {
    const module = this._root.moduleForFile(file);
    if (file && module) {
      Object.assign(err, {file, module: module.name});
    }
    return err;
  }

  toString() {
    return this._module.toString();
  }
}

module.exports = {Workspace};
