function visitor(proto) {

  let predicate;

  const traverser = {filterOut, visit};

  function filterOut(p) {
    predicate = p;
    return traverser;
  }

  function filteredOut(node) {
    return predicate && predicate(node);
  }

  function visit(handlers) {

    function traverseRecursively(node) {

      node.isOfType = function (type) {
        return this.constructor.name === type.name;
      };

      function forEachTraverse(key) {
        if (node[key]) {
          node[key].forEach(traverseRecursively);
        }
      }

      const before = `before${node.constructor.name}`;
      const after = `after${node.constructor.name}`;

      if (handlers[before] && !filteredOut(node)) {
        handlers[before](node);
      }

      forEachTraverse('nestedArray');
      forEachTraverse('fieldsArray');
      forEachTraverse('methodsArray');

      if (handlers[after] && !filteredOut(node)) {
        handlers[after](node);
      }
    }

    traverseRecursively(proto);
  }

  return traverser;
}

module.exports = visitor;
