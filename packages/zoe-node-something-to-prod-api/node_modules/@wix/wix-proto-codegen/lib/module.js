const resolvePkg = require('resolve-pkg'),
  path = require('path'),
  shelljs = require('shelljs'),
  chalk = require('chalk'),
  treeify = require('treeify'),
  defaultLog = require('@wix/wix-log')('wix-proto-codegen');

shelljs.config.silent = true;

const WHITELISTED = new Set(['@wix/cruderator-api-template']);

class Module {

  constructor(modulePath, log = defaultLog) {
    this._path = modulePath;
    this._package = loadPackageJsonOrEmpty(modulePath);
    this._children = [];
    this._log = log;
    this._parent = undefined;
  }

  get name() {
    return this._package.name;
  }

  get path() {
    return this._path;
  }

  get isProto() {
    return WHITELISTED.has(this._package.name) || this._package.wnp_type === 'proto';
  }

  get parent() {
    return this._parent;
  }

  get _dependencies() {
    return Object.keys({...this._package.dependencies, ...this._package.devDependencies});
  }

  toString() {
    function rec(module) {
      const deps = module.children.map(rec).reduce((acc, tree) => ({...acc, ...tree}), {});
      const files = module.protoFiles()
        .map(file => path.relative(module.path, file))
        .map(file => chalk.green(file))
        .reduce((acc, file) => ({...acc, [file]: null}), {});
      return {[chalk.yellow(module.name)]: {...files, ...deps}};
    }
    const json = rec(this);
    return treeify.asTree(json);
  }

  toAbsolute(relativePath) {
    return ['proto', 'src/main/proto']
      .map(dir => path.join(this.path, dir, relativePath))
      .find(path => shelljs.test('-f', path));
  }

  protoFiles() {
    // copying array due to https://github.com/shelljs/shelljs/issues/446
    return [...shelljs.ls(path.join(this._path, '/{proto,src/main/proto}/**/*.proto'))];
  }

  get children() {
    return this._children;
  }

  resolve(id) {
    const path = resolvePkg(id, {cwd: this.path});
    if (!path) {
      this._log.info(`failed to resolve ${id} dependency of ${this.name}, skipping`);
    }
    return path;
  }

  static fromDir(dir, log) {

    function rec(dir, isRoot) {
      const m = new Module(dir, log);
      if (isRoot || m.isProto) {
        m._children = m._dependencies.map(dep => m.resolve(dep)).map(d => rec(d, false)).filter(m => m);
        m._children.forEach(child => child._parent = m);
        return m;
      }
    }
    return rec(dir, true);
  }
}

function loadPackageJsonOrEmpty(modulePath) {
  try {
    return require(path.join(modulePath, 'package.json'));
  } catch (err) {
    return {
      name: '<missing package.json>',
      dependencies: [],
      devDependencies: []
    };
  }
}

module.exports = {Module};


