const e = require('estree-builder'),
  {walk} = require('estree-walker');

const STEREOTYPE = {
  EMPTY: 0,
  MESSAGE: 1  
};

const EMPTY = {
  type: 'Literal',
  value: '',
  stereotype: STEREOTYPE.EMPTY
};

module.exports = () => {
  return enrich(EMPTY);
};

function enrich(ast) {
  
  ast.withError = error => {
    const {path} = collect(ast);
    const msg = e.str(`: ${error}`);
    msg.stereotype = STEREOTYPE.MESSAGE;
    return enrich(build({path, msg}));
  };
  
  ast.replace = replacement => {
    const {msg, path} = collect(ast);
    path.splice(-1, 1, replacement);
    const next = build({path, msg});
    return enrich(next);
  };
  
  ast.append = other => {
    const {msg, path} = collect(ast);
    
    if (path.length > 0) {
      path.push(e('+', e.str('.'), other));
    } else {
      path.push(other);
    }
    
    const next = build({path, msg});
    
    return enrich(next);
  };
  
  ast.appendError = (error, dot) => {
    const {path} = collect(ast);
    return enrich(build({path, msg: dot ? e('+', e.str('.'), error) : error}));
  };
  
  ast.indexed = idx => {
    const {msg, path} = collect(ast);
    path.push(e.str('['));
    path.push(idx);
    path.push(e.str(']'));
    return enrich(build({path, msg}));
  };
  
  return ast;
}

function collect(ast) {
  let msg;
  const path = [];
  walk(ast, {
    enter: node => {
      switch (node.stereotype) {
        case STEREOTYPE.EMPTY:
          break;
        case STEREOTYPE.MESSAGE:
          msg = node;
          break;
        default:
          if (node.type !== 'BinaryExpression') {
            path.push(node);
          }
          break;
      }
    }
  });
  return {msg, path};
}

function build({path, msg = EMPTY}) {
  return path.reduceRight((acc, value) => {
    return e('+', value, acc);
  }, msg);
}
