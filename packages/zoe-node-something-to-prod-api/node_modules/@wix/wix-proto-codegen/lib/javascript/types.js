const e = require('estree-builder'),
  verification = require('./verification'),
  _ = require('lodash'),
  protobuf = require('@wix/wnp-protobufjs'),
  {toJSON, fromJSON} = require('./json-converters'),
  {toGRPC, fromGRPC} = require('./grpc-converters'),
  {fixupName} = require('./hacks'),
  {CUSTOM_TYPES} = require('./custom-types'),
  {id, __proto, __fqn__, __options__, __root__, escapeIdentifier} = require('./util'),
  {util: runtimeUtil} = require('@wix/wix-proto-runtime-toolkit'),
  {isFromDescriptor} = require('../pbjs/descriptor');

const GENERATED_GOOGLE_TYPES = new Set([
  'google.protobuf.Any',
  'google.protobuf.Empty',
  'google.protobuf.Duration',
  'google.protobuf.Timestamp',
  'google.protobuf.Struct',
  'google.protobuf.FieldMask',
  'google.protobuf.DoubleValue',
  'google.protobuf.FloatValue',
  'google.protobuf.Int64Value',
  'google.protobuf.UInt64Value',
  'google.protobuf.Int32Value',
  'google.protobuf.UInt32Value',
  'google.protobuf.BoolValue',
  'google.protobuf.StringValue',
  'google.protobuf.BytesValue',
  'google.protobuf.Value',
  'google.protobuf.ListValue',
]);

function declareField(acc, def, name) {
  const fixedName = escapeIdentifier(fixupName(name));
  acc.push(e.statement(e('=', e('.', e.this(), e.id(fixedName)), e('&&', e.id('props'), e('.', e.id('props'), e.id(fixedName))))));
}

function constructor(type) {
  return e.method(
    'constructor',
    e.fn([e.id('props')], e.block(_.transform(type.fields, declareField, []))),
    'constructor',
    false,
    false);
}

function verify(type, opts) {
  return e.method(
    'verify',
    e.fn([e.id('msg'), e.id('helper'), e('=', e.id('errors'), id('helper.verification.Errors.empty()'))], verification.forType(type, opts)),
    'method',
    false,
    true);
}

function toJSONMethod(type, opts) {
  return e.method(
    'toJSON',
    toJSON(type, opts),
    'method',
    false,
    true);
}

function fromJSONMethod(type, opts) {
  return e.method(
    'fromJSON',
    fromJSON(type, opts),
    'method',
    false,
    true);
}

function toGRPCMethod(type, opts) {
  return e.method(
    'toGRPC',
    toGRPC(type, opts),
    'method',
    false,
    true); // static
}

function fromGRPCMethod(type, opts) {
  return e.method(
    'fromGRPC',
    fromGRPC(type, opts),
    'method',
    false,
    true); //static
}

function isGoogleType(name) {
  return name.startsWith('google.protobuf') && !GENERATED_GOOGLE_TYPES.has(name) && !isFromDescriptor(name);
}

function typeMethods(type, opts) {
  return [
    constructor(type),
    toJSONMethod(type, opts),
    fromJSONMethod(type, opts),
    toGRPCMethod(type, opts),
    fromGRPCMethod(type, opts)
  ].concat(opts && opts.generateVerify ? [verify(type, opts)] : []);
}

function createType(type, opts) {
  const name = runtimeUtil.fqn(type);
  if (CUSTOM_TYPES[name]) {
    return CUSTOM_TYPES[name];
  } else if (name && !isGoogleType(name)) {
    return e.statement(e.call(e.fn([], [
      e.class(type.name, null, typeMethods(type, opts)),
      ...type.nestedArray.map(t => {
        const created = create(t, opts);
        if (created) {
          return e.statement(e('=', e('.', e.id(type.name), e.id(t.name)), created));
        }
      }).filter(e => e),
      ...type.nestedArray.map(t => e.statement(e('=', e('.', e.id(type.name), e.id(t.name)), create(t, opts)))),
      __proto(type.name, name),
      __fqn__(type),
      __options__(type),
      __root__(type),
      e.return(e.id(type.name))
    ]), []));
  }
}

function createEnum(enumDef, {stringEnums = false, generateVerify} = {}) {
  const fn = (acc, id, label) => {
    acc.push(e('obj-prop', e.id(`'${label}'`), stringEnums ? e.str(label) : e.str(id)));
    acc.push(e('obj-prop', e.str(id), e.id(`'${label}'`)));
  };

  const name = runtimeUtil.fqn(enumDef);

  if (!isGoogleType(name)) {
    return e('obj-raw', _.transform(enumDef.values, fn, []).concat(generateVerify ? [verification.forEnum(enumDef, {stringEnums})] : []));
  }
}

function create(def, opts) {
  let res;
  switch (def.constructor.name) {
    case protobuf.Type.name:
      res = createType(def, opts);
      break;
    case protobuf.Enum.name:
      res = createEnum(def, opts);
      break;
    case protobuf.Field.name:
      break;
    default:
      throw new Error(`unsupported construct ${def.constructor.name}`);
  }
  return res;
}

module.exports = {createType, createEnum, create};
