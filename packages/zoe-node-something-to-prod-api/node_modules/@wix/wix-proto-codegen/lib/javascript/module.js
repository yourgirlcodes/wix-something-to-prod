const namespace = require('./namespace'),
  e = require('estree-builder'),
  {set, id, getGeneratorVersion, BUILT_IN_IDENTIFIER} = require('./util'),
  hash = require('object-hash'),
  visitor = require('../proto-ast-traverse');

const LONG_TYPES = new Set(['int64', 'uint64', 'sint64', 'fixed64', 'sfixed64']);

const emptyObj = e('object-raw', []);

function create(ast, opts) {

  const body = [
    __wrapBuiltInTypes(),
    e.const('$root', emptyObj),
    __options(ast, opts),
    __lookup(ast),
    ...namespace.create(e.id('$root'), ast.root, opts),
    set(['module', 'exports'], e.id('$root'))
  ];

  if (opts && opts.tsExportDefault === true) {
    body.push(set(['module', 'exports', 'default'], e.id('$root')));
  }

  if (!(opts && opts.stringLongs) && isLongPresent(ast)) {
    body.unshift(e.const('Long', e.call(e.id('require'), [e.str('long')])));
  }

  return {
    'type': 'Program',
    body,
    'sourceType': 'script'
  };
}

function __wrapBuiltInTypes() {
  return e.const(id(BUILT_IN_IDENTIFIER), e('object-raw', [
    e('obj-prop', e.str('Number'), id('Number')),
    e('obj-prop', e.str('Array'), id('Array')),
    e('obj-prop', e.str('Object'), id('Object')),
    e('obj-prop', e.str('Buffer'), id('Buffer')),
  ]));
}

function __lookup(ast) {
  const root = e.const('root', e.call(id('pbjs.Root.fromJSON'), [e.json(ast.toJSON({keepComments: true}))]));
  const lookup = e.arrow([id('path')], [e.return(e.call(id('root.lookup'), [id('path')]))]);
  const ret = e.return(e.call(id('$root.__lookup'), []));
  const replace = e(';', e('=', id('$root.__lookup'), e.function([], [e.return(lookup)])));
  return e(';', e('=', id('$root.__lookup'), e.function([id('pbjs')], [root, replace, ret])));
}

function __options(ast, {stringEnums = false, stringLongs = false, stdCase = false} = {}) {
  return e(';', e('=', id('$root', '__options'), e('object', {
    stringEnums: e(stringEnums),
    stringLongs: e(stringLongs),
    stdCase: e(stdCase),
    generatorVersion: e.str(getGeneratorVersion()),
    contentHash: e.str(hash(ast.toJSON()))
  })));
}

function isLongPresent(ast) {

  let res = false;

  visitor(ast).visit({

    beforeField: ({type}) => {
      res = res || LONG_TYPES.has(type);
    },

    beforeMapField: ({type, keyType}) => {
      res = res || LONG_TYPES.has(type) || LONG_TYPES.has(keyType);
    }
  });

  return res;
}

module.exports = {create};
