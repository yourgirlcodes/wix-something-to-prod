class Any {
  constructor(typeUrl, {packed, unpacked}) {
    this._typeUrl = typeUrl;
    this._packed = packed;
    this._unpacked = unpacked;
    this.__isAny__ = true;

  }

  static pack(type, value) {
    const typeUrl = Any.typeUrl(type);
    return new Any(typeUrl, {unpacked: {type, value: JSON.parse(JSON.stringify(value))}});
  }

  unpack(type) {
    if (!this.is(type)) {
      throw new TypeError('incorrect type');
    }

    if (this._unpacked) {
      return new this._unpacked.type(this._unpacked.value);
    } else {
      return this._packed.unpack(type);
    }
  }

  static isAny(value) {
    return (value && value.__isAny__) === true;
  }

  is(type) {
    return this._typeUrl === Any.typeUrl(type);
  }

  get typeName() {
    return Any._typeName(this._typeUrl);
  }

  get typeUrl() {
    return this._typeUrl;
  }

  static typeUrl(type) {
    const fqn = type && type.prototype && type.prototype.__fqn__;
    if (!fqn) {
      throw new TypeError('unknown type');
    }
    return `type.googleapis.com/${fqn}`;
  }

  static _typeName(typeUrl) {
    return typeUrl.substring(typeUrl.lastIndexOf('/') + 1);
  }

  static toJSON(any, helper) {
    if (any) {
      return {
        typeUrl: any._typeUrl,
        value: ((any._packed && any._packed.buffer) || helper.protobuf.encode(any._unpacked.type, any._unpacked.value)).toString('base64'),
      };
    }
  }

  static fromJSON(any, helper) {
    if (any) {
      const {value, typeUrl} = any;
      const buffer = Buffer.from(value, 'base64');
      const unpack = type => helper.protobuf.decode(type, buffer);
      return new Any(typeUrl, {packed: {unpack, buffer}});
    }
  }

  static toGRPC(any, helper) {
    if (any) {
      if (any._unpacked) {
        return {
          typeUrl: any.typeUrl,
          value: helper.protobuf.encode(any._unpacked.type, any._unpacked.value),
        };
      } else {
        return {
          typeUrl: any.typeUrl,
          value: any._packed.buffer,
        };
      }
    }
  }

  static fromGRPC(any, helper) {
    if (any) {
      const {value, typeUrl} = any;
      const buffer = value;
      const unpack = type => helper.protobuf.decode(type, buffer);
      return new Any(typeUrl, {packed: {unpack, buffer}});
    }
  }
}

_protobuf.Any.prototype.__fqn__ = 'google.protobuf.Any';
_protobuf.Any.prototype.__proto = pbjs => $root.__lookup(pbjs)(_protobuf.Any.prototype.__fqn__);
