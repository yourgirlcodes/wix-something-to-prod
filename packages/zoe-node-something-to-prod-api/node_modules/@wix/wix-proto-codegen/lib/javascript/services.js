const e = require('estree-builder'),
  _ = require('lodash'),
  {getCamelCaseImpl} = require('@wix/wnp-rpc-common'),
  {util: runtimeUtil} = require('@wix/wix-proto-runtime-toolkit'),
  {set, fqn, id, protoProp, __proto, __protoFunc, __fqn__, __options__, __root__} = require('./util');

function create(service, opts = {}) {
  const className = service.name;

  return e.statement(e.call(e.fn([], [
    e.class(className, null, methods(service, opts)),
    ...methodMessages(service, opts),
    ...methodProto(service, opts),
    tag(className),
    __fqn__(service),
    __proto(className, runtimeUtil.fqn(service)),
    __options__(service),
    __root__(service),
    __filename(className),
    e.return(e.id(className))
  ]), []));
}

function __filename(className) {
  return protoProp(id([className, 'prototype']), '__filename', e.id('__filename'));
}

function methodMessages(service, {stdCase}) {
  return service.methodsArray.map(method => {
    const {resolvedRequestType, resolvedResponseType} = method.resolve();
    return set(methodPropertyPath(service, method, '_messageTypes', stdCase), e.fn([], [
      e.return(e.arr([fqn(resolvedRequestType), fqn(resolvedResponseType)]))
    ]));
  });
}

function methodProto(service, {stdCase}) {
  return service.methodsArray.map(method => {
    return set(
      methodPropertyPath(service, method, '__proto', stdCase),
      __protoFunc(runtimeUtil.fqn(method))
    );
  });
}

function methodPropertyPath(service, method, property, stdCase) {
  const methodCamelCase = getCamelCaseImpl(stdCase).methodCamelCase;

  return [service.name, 'prototype', methodCamelCase(method.name), property];
}

function tag(className) {
  return protoProp(id([className, 'prototype']), '__isRpcService__', e('true'));
}

function methods(service, {stdCase}) {
  const methodCamelCase = getCamelCaseImpl(stdCase).methodCamelCase;

  function method(m) {
    const name = methodCamelCase(m.name);
    return e.method(name, e.fn([e.id('aspects'), e.id('msg')], [e.throw(e.new(e.id('TypeError'), [e.str(`method ${name} is abstract`)]))]));
  }

  return _.transform(service.methods, (acc, value) => acc.push(method(value)), []);
}

module.exports = {create};
