import { VError, Info, MultiError } from 'verror';
export { Info };
export declare enum ErrorKind {
    userError = "userError",
    systemError = "systemError",
    recoverableError = "recoverableError"
}
export declare class CiError extends VError {
    readonly kind: ErrorKind;
    constructor(options: {
        name?: string;
        error?: unknown;
        message: string;
        info?: Info;
        kind?: ErrorKind;
    });
}
export declare class CiMultiError extends MultiError {
    readonly kind: ErrorKind;
    constructor(options: {
        name?: string;
        errors: unknown[];
        info?: Info;
    });
}
export declare function isCiError(e: unknown): e is CiError | CiMultiError;
export declare function extractCiErrors(e: CiError | CiMultiError, errorKind?: ErrorKind): CiError[];
export interface GroupedErrors {
    userErrors: CiError[];
    systemErrors: unknown[];
}
export declare function groupByErrorKind(e: unknown): GroupedErrors;
export declare function getErrorMessages(error: Error | CiError | CiMultiError): string[];
export declare const errorForEach: typeof import("verror").errorForEach;
export declare const getFullStack: (initialError: unknown) => string;
export declare const getInfo: (initialError: unknown) => Info;
export declare function getTags(error: CiError): any;
export declare function kind(error?: Error, errorKind?: ErrorKind): ErrorKind;
