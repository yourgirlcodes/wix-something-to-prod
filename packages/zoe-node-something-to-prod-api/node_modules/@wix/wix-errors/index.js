const assert = require('assert'),
  {wix} = require('./lib/generated/proto-generated'),
  {constructMessage} = require('./lib/message'),
  {GrpcStatus} = require('./lib/grpc-status'),
  trailers = require('./lib/trailers'),
  {
    WixBaseError,
    WixError,
    wixBusinessError,
    WixBusinessError,
    wixSystemError,
    WixSystemError,
    WixUnsupportedBrowserError,
    HttpStatus,
    ErrorCode,
    extractMetadata,
    isBusinessError,
    ThrottledError,
    throwAsLocalError,
  } = require('@wix/wnp-errors-base'),
  {SchemaBuilder, validator, attempt} = require('@wix/wnp-proto-validation-fv');

const detailsSchema = validator.compile(new SchemaBuilder({wixValidations: false}).forMessageClass(wix.api.Details));

const {GRPC_STATUS_DETAILS} = trailers;

class GrpcStatusError extends WixBaseError {
  constructor(status, message, metadata, cause, name, {callInfo} = {}) {
    if (callInfo) {
      validateCallInfo(callInfo);
    }
    const code = GrpcStatus.asNumber(status) || GrpcStatus.UNKNOWN;
    super(constructMessage(code, message, {callInfo}), {cause, name});
    this.code = code;
    this.callInfo = callInfo;
    if (metadata) {
      this.metadata = metadata;
    }
    if (this.details || this.httpStatusCode < 500) {
      this._exposeMessage = true;
    }
  }

  get httpStatusCode() {
    return GrpcStatus.toHttpStatus(this.code);
  }

  get details() {
    return this.metadata && this.metadata[GRPC_STATUS_DETAILS];
  }

  get validationError() {
    return this.details && this.details.validationError;
  }

  get applicationError() {
    return this.details && this.details.applicationError;
  }

  withCallInfo(callInfo) {
    validateCallInfo(callInfo);
    const copy = new GrpcStatusError(this.code, this.message, this.metadata, this.cause, this.name, {callInfo});
    copy.stack = this.stack;
    return copy;
  }

  putStatusInErrorName() {
    let code = this.details && this.details.applicationError && this.details.applicationError.code;
    code = code ? `_${code}` : '';
    this.name = `${this.name}_${GrpcStatus.asString(this.code)}${code}`;
    return this;
  }

  static applicationError(...args) {
    if (typeof args[0] === 'object') {
      const {code, message, applicationError, name, cause} = args[0];
      return new GrpcStatusError(code, message, wrapErrorDetails({applicationError}), cause, name);
    } else {
      const [code, message, applicationError, name] = args;
      return new GrpcStatusError(code, message, wrapErrorDetails({applicationError}), null, name);
    }
  }

  static validationError(...args) {
    if (typeof args[0] === 'object') {
      const {code, message, validationError, cause} = args[0];
      return new GrpcStatusError(code, message, wrapErrorDetails({validationError}), cause,
        'GrpcValidationError');
    } else {
      const [code, message, validationError] = args;
      return new GrpcStatusError(code, message, wrapErrorDetails({validationError}), null, 'GrpcValidationError');
    }
  }
}

function validateCallInfo(callInfo) {
  assert(callInfo && typeof callInfo === 'object', 'object required');
  assert(typeof callInfo.service === 'string', 'service is required and must be a string');
  assert(typeof callInfo.url === 'string', 'url is required and must be a string');
  assert(typeof callInfo.method === 'string', 'method is required and must be a string');
}

function wrapErrorDetails(details) {
  validateDetailsSchema(details);
  return {[GRPC_STATUS_DETAILS]: details};
}

function validateDetailsSchema(details) {
  attempt(detailsSchema, details, {error: TypeError, prefix: 'Invalid error details: '});
}

module.exports = {
  WixError,
  wixBusinessError,
  WixBusinessError,
  wixSystemError,
  WixSystemError,
  WixUnsupportedBrowserError,
  HttpStatus,
  ErrorCode,
  extractMetadata,
  isBusinessError,
  GrpcStatusError,
  GrpcStatus,
  ThrottledError,
  wix,
  trailers,
  throwAsLocalError,
};
