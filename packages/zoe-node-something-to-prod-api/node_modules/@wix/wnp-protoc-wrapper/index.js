const shelljs = require('shelljs'),
  util = require('util'),
  glob = require('glob'),
  {execFile} = require('child_process'),
  {existsSync} = require('fs'),
  {platform, arch} = require('process'),
  {getBinaryType} = require('./lib/utils'),
  path = require('path'),
  log = require('@wix/wix-log')('protoc-wrapper');

const PROTOC_EXEC = path.join(__dirname, 'protoc', 'bin', `protoc_${getBinaryType()}`);

if (!existsSync(PROTOC_EXEC)) {
  throw new Error(`unsupported platform: ${platform}/${arch}`);
}

function gerProtoFiles(baseFolder) {
  return util.promisify(glob)('**/*.proto', {cwd: baseFolder, nodir: true, absolute: true});
}

function validate({baseFolder, includeFolders}) {

  if (!baseFolder) {
    throw new Error('baseFolder property is mandatory');
  }

  if (!shelljs.test('-d', baseFolder)) {
    throw new Error(`baseFolder "${baseFolder}" does not exist`);
  }

  if (!Array.isArray(includeFolders)) {
    throw new Error('includeFolders property must be an array of strings');
  }
}

async function prepareProtocArgs({baseFolder, includeFolders, outputFile, cliOptions}) {

  const args = ['-o', outputFile || '/dev/null'];
  args.push('-I', baseFolder);
  includeFolders.forEach(folder => args.push('-I', folder));
  (await gerProtoFiles(baseFolder)).forEach(name => args.push(name));

  return args.concat(cliOptions);
}

async function protoc({baseFolder, includeFolders = [], outputFile, cliOptions = []} = {}) {
  validate({baseFolder, includeFolders});

  const args = await prepareProtocArgs({baseFolder, includeFolders, outputFile, cliOptions});

  return new Promise((resolve, reject) => {
    execFile(PROTOC_EXEC, args, (error, stdout, stderr) => {
      if (error) {
        log.error('Protoc execution failed.', error);
        reject(stderr ? new Error(stderr) : error);
      } else {
        log.debug('Protoc execution completed.');
        resolve();
      }
    });
  });
}


module.exports = {protoc};
