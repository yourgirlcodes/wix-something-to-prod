import {Catalog, Severity} from '..';
import {getCatalog} from '../scripts';
import {create} from 'handlebars';
import fs from 'fs';
import path from 'path';
import {getRuleSeverity} from '../lib/rule-severity';

async function getRules(catalog: Catalog, outputDir: string) {
  const result = [];
  for (const ruleDef of catalog.ruleDefinitions) {
    const loadedRule = await ruleDef.getRule();
    const docPath = await ruleDef.getDocPath();
    const ruleSeverity = getRuleSeverity(loadedRule);
    let severity = ruleSeverity.gracePeriod?.severityAfterGrace || ruleSeverity.severity;
    const breakIfNew = !loadedRule.stateful && loadedRule.breakIfNew;
    let comment = '';
    if (breakIfNew) {
      comment = '(if new)';
      severity = Severity.Error;
    } else if (ruleSeverity.gracePeriod) {
      comment = `(from *${ruleSeverity.gracePeriod.graceUntil.toISOString().split('T')[0]}*)`;
    }
    const rule = {
      name: ruleDef.name,
      path: path.relative(outputDir, ruleDef.path),
      category: path.basename(path.dirname(ruleDef.path)),
      description: loadedRule.description,
      docUrl: catalog.getDocUrl(docPath),
      severity,
      comment,
      strict: loadedRule.strict,
      stateful: loadedRule.stateful === true ? ':white_check_mark:' : undefined,
    };
    if (rule.category === 'test-rules') {
      continue;
    }
    result.push(rule);
  }
  result.sort((rule1, rule2) => {
    return rule1.path.localeCompare(rule2.path);
  });
  return result;
}

async function createDocs() {
  const outputDir = process.cwd();
  const catalogDir = path.resolve(process.argv[2]);
  const catalog = getCatalog(catalogDir);
  const templateFile = fs.readFileSync(path.join(__dirname, 'rule-docs.tmpl.md'), 'utf-8');
  const handlebars = create();
  const template = handlebars.compile(templateFile);

  const templateContext = {rules: await getRules(catalog, outputDir)};
  const doc = template(templateContext);
  fs.writeFileSync(path.join(outputDir, 'README.md'), doc);
}

createDocs().finally(() => {
});
