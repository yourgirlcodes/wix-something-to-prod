import {Catalog} from '..';
import {getCatalog} from '../scripts';
import {create} from 'handlebars';
import fs from 'fs';
import path from 'path';

async function getRules(catalog: Catalog) {
  const result = [];
  for (const ruleDef of catalog.ruleDefinitions) {
    const rule = {
      path: path.relative(catalog.catalogDir, ruleDef.path),
      docUrl: catalog.getDocUrl(await ruleDef.getDocPath()),
    };
    result.push(rule);
  }
  result.sort((rule1, rule2) => {
    return rule1.path.localeCompare(rule2.path);
  });
  return result;
}

async function createLoader() {
  const catalogDir = path.resolve(process.argv[2]);
  const catalog = getCatalog(catalogDir);
  const templateFile = fs.readFileSync(path.join(__dirname, 'catalog-loader.tmpl'), 'utf-8');
  const handlebars = create();
  const template = handlebars.compile(templateFile);

  const templateContext = {rules: await getRules(catalog), catalog};
  const doc = template(templateContext);
  fs.writeFileSync(path.join(catalogDir, 'gen-index.ts'), doc);
  console.log(`Generated catalog for ${templateContext.rules.length} Flynt rules`);
}

createLoader().finally(undefined);
