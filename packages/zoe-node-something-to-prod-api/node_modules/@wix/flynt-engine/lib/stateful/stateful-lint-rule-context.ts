import {AddedVisitor, ModifiedVisitor, RemovedVisitor, StatefulLintRuleContext, StatefulVisitor} from '../stateful/rule-api';
import {LintRuleContextConfig, LintRuleContextImpl} from '../lint-rule-context';
import {SyntaxTree, SyntaxTreeContainers, Visitor, visitSyntaxTree, visitSyntaxTreeFrom} from '@wix/proto-syntax-tree';
import {adaptAddedVisitor, adaptModifiedVisitor, adaptRemovedVisitor, adaptStatefulVisitor} from './stateful-visitor-adapter';
import {NewStateProviderImpl, PrevStateProviderImpl} from './state-provider';
import {StatefulLintRule} from '../../index';
import assert from 'assert';

export class StatefulLintRuleContextImpl extends LintRuleContextImpl<StatefulLintRule> implements StatefulLintRuleContext {
  readonly prevSt: SyntaxTree;

  constructor(ruleName: string, rule: StatefulLintRule, config: LintRuleContextConfig, st: SyntaxTree, prevSyntaxTree: SyntaxTree) {
    super(ruleName, rule, config, st);
    this.prevSt = prevSyntaxTree;
  }

  async runRule() {
    await this.rule.run(this);
  }

  private doVisit(st: SyntaxTree, visitor: Visitor) {
    visitSyntaxTree(st, this.skipNonLintedElements(visitor));
  }

  private doVisitFrom(from: SyntaxTreeContainers, visitTree: SyntaxTree, visitor: Visitor) {
    assert(from.st === visitTree);
    visitSyntaxTreeFrom(from, this.skipNonLintedElements(visitor));
  }

  visit(visitor: StatefulVisitor): void {
    this.doVisit(this.st,
      adaptStatefulVisitor(visitor, new PrevStateProviderImpl(this.prevSt))
    );
  }

  visitFrom(from: SyntaxTreeContainers, visitor: StatefulVisitor) {
    this.doVisitFrom(from, this.st,
      adaptStatefulVisitor(visitor, new PrevStateProviderImpl(this.prevSt))
    );
  }

  visitAdded(visitor: AddedVisitor): void {
    this.doVisit(this.st,
      adaptAddedVisitor(visitor, new PrevStateProviderImpl(this.prevSt))
    );
  }

  visitAddedFrom(from: SyntaxTreeContainers, visitor: AddedVisitor) {
    this.doVisitFrom(from, this.st,
      adaptAddedVisitor(visitor, new PrevStateProviderImpl(this.prevSt))
    );
  }

  visitModified(visitor: ModifiedVisitor): void {
    this.doVisit(this.st,
      adaptModifiedVisitor(visitor, new PrevStateProviderImpl(this.prevSt))
    );
  }

  visitModifiedFrom(from: SyntaxTreeContainers, visitor: ModifiedVisitor) {
    this.doVisitFrom(from, this.st,
      adaptModifiedVisitor(visitor, new PrevStateProviderImpl(this.prevSt))
    );
  }

  visitRemoved(visitor: RemovedVisitor): void {
    //Removed is different from other visitors in that it traverses the previous syntax tree
    this.doVisit(this.prevSt,
      adaptRemovedVisitor(visitor, new NewStateProviderImpl(this.st))
    );
  }

  visitRemovedFrom(from: SyntaxTreeContainers, visitor: RemovedVisitor) {
    const prevFrom = new PrevStateProviderImpl(this.prevSt).getState(from);
    if (prevFrom) {
      this.doVisitFrom(prevFrom, this.prevSt,
        adaptRemovedVisitor(visitor, new NewStateProviderImpl(this.st))
      );
    }
  }
}
