import {SyntaxTree, Type} from '@wix/proto-syntax-tree';

export interface PrevStateProvider {
  getPrevState<T extends Type>(type: T): T | undefined;
}

export interface NewStateProvider {
  getNewState<T extends Type>(type: T): T | undefined;
}

export class StateProvider {
  private readonly stateSt: SyntaxTree;

  constructor(stateSt: SyntaxTree) {
    this.stateSt = stateSt;
  }

  getState<T extends Type>(type: T): T | undefined {
    const prevElem = this.stateSt.findType(type.fqn);
    if (prevElem && prevElem.typeName === type.typeName) {
      return prevElem as T;
    }
  }
}

export class PrevStateProviderImpl extends StateProvider implements PrevStateProvider {
  constructor(prevStateSt: SyntaxTree) {
    super(prevStateSt);
  }

  getPrevState<T extends Type>(type: T): T | undefined {
    return this.getState(type);
  }
}

export class NewStateProviderImpl extends StateProvider implements NewStateProvider {
  constructor(newStateSt: SyntaxTree) {
    super(newStateSt);
  }

  getNewState<T extends Type>(type: T): T | undefined {
    return this.getState(type);
  }
}
