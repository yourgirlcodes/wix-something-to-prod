import {BaseCatalogImpl} from './catalog';
import path from 'path';
import {LintRule, RuleDefinition} from '../index';

interface CatalogInfo {
  rules: RuleLoaderInfo[];
}

interface RuleLoaderInfo {
  path: string;
  docUrl: string;
  ruleModule: Promise<any>;
}

export class PreLoadedCatalog extends BaseCatalogImpl {
  constructor(catalogDir: string, info: CatalogInfo) {
    super(catalogDir);
    this.loadRuleDefinitions(info.rules);
  }

  private loadRuleDefinitions(rules: RuleLoaderInfo[]) {
    for (const ruleInfo of rules) {
      const fullRulePath = path.join(this.catalogDir, ruleInfo.path);
      const ruleDef = new PreloadedRule(fullRulePath, ruleInfo);
      this.ruleDefinitions.push(ruleDef);
    }
  }

  getDocUrl(ruleDocPath: string) {
    return ruleDocPath;
  }
}

class PreloadedRule implements RuleDefinition {
  name: string;
  path: string;

  constructor(fullRulePath: string, private readonly ruleInfo: RuleLoaderInfo) {
    this.name = path.basename(fullRulePath);
    this.path = fullRulePath;
  }

  async getDocPath(): Promise<string> {
    return this.ruleInfo.docUrl;
  }

  async getRule(): Promise<LintRule> {
    return (await this.ruleInfo.ruleModule).rule;
  }

}
