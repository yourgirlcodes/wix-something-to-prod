import {SyntaxTree} from '@wix/proto-syntax-tree';
import {ProtoLinter} from './lib/proto-linter';
import {LintRuleContext} from './lib/rule-api';
import {StatefulLintRuleContext} from './lib/stateful/rule-api';
import {GracePeriod, Severity} from './lib/rule-severity';

export * from './lib/rule-api';
export * from './lib/stateful/rule-api';

export * from '@wix/proto-syntax-tree';
export {PreLoadedCatalog} from './lib/pre-loaded-catalog';
export {Severity, GracePeriod} from './lib/rule-severity';

export interface BaseLintRule {
  description: string;
  moreInfoUrl?: string;
  severity?: Severity;
  graceUntil?: Date;
  strict?: boolean;
}

export interface StaticLintRule extends BaseLintRule {
  stateful?: false;
  breakIfNew?: boolean;

  run(ctx: LintRuleContext): void | Promise<void>;
}

export interface StatefulLintRule extends BaseLintRule {
  stateful: true;

  run(ctx: StatefulLintRuleContext): void | Promise<void>;
}

export type LintRule = StaticLintRule | StatefulLintRule;

export interface RuleDefinition {
  name: string;
  path: string;

  getRule(): Promise<LintRule>;
  getDocPath(): Promise<string>;
}

export interface LintResult {
  readonly resultId?: string;
  readonly ruleId: string;
  readonly ruleDoc: string;
  readonly message: string;
  readonly severity: Severity;
  readonly gracePeriod?: GracePeriod;
  readonly strict?: boolean;

  readonly filePath?: string;
  readonly line?: number;
  readonly column?: number;
}

export interface DisabledResult {
  readonly resultId: string;
  readonly ruleId: string;
  readonly filePath: string;
  readonly line: number;
  readonly column: number;
  readonly disabledBy: {
    readonly line: number;
    readonly id: string;
  };
}

export interface RuleError {
  readonly ruleId: string;
  readonly error: string;
}

export interface LintResults {
  results: LintResult[];
  disabled: DisabledResult[];
  executionErrors: RuleError[];
}

export interface LintConfig {
  catalog: string | Catalog;
  rules: {[ruleName: string]: Severity | undefined};
  date?: Date;
  severity?: Severity;
}

export interface ProtoModule {
  st: SyntaxTree;
  moduleDir: string;
  protoDir: string;
}

export interface Catalog {
  readonly catalogDir: string;

  ruleDefinitions: RuleDefinition[];
  getDocUrl(ruleDocPath: string): string;
}

export interface Linter {
  lint(proto: ProtoModule, prevProto?: ProtoModule): Promise<LintResults>;
}

export function linter(config: LintConfig): Linter {
  return new ProtoLinter(config);
}
