"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RuleDefinitionImpl = void 0;
const path_1 = __importDefault(require("path"));
const assert_1 = __importDefault(require("assert"));
const fs_1 = __importDefault(require("fs"));
class RuleDefinitionImpl {
    constructor(ruleDir, ruleModule) {
        (0, assert_1.default)(ruleDir, 'ruleDir is required');
        this.path = ruleDir;
        this.name = path_1.default.basename(ruleDir);
        if (ruleModule) {
            this._rule = Promise.resolve(ruleModule).then(module => module.rule);
        }
    }
    resolveRuleModule(ruleDir) {
        try {
            const resolved = require.resolve(path_1.default.resolve(ruleDir));
            return resolved;
        }
        catch (err) {
            throw new Error(`Invalid rule located under ${ruleDir}.
      Make sure the rule has an index.js file (or index.ts during development)
      error: ${err.toString()}`);
        }
    }
    async loadRule() {
        const resolved = this.resolveRuleModule(this.path);
        let ruleModule;
        try {
            ruleModule = await Promise.resolve().then(() => __importStar(require(resolved)));
        }
        catch (err) {
            console.error(err);
            throw err;
        }
        const rule = ruleModule.rule;
        (0, assert_1.default)(rule, `no rule is exported from ${resolved}`);
        this.validateRule(rule);
        return rule;
    }
    validateRule(rule) {
        (0, assert_1.default)(rule.description && typeof rule.description === 'string', 'rule description is required');
        (0, assert_1.default)(rule.run && typeof rule.run === 'function', 'rule must implement a run function');
    }
    async getRule() {
        if (!this._rule) {
            this._rule = this.loadRule();
        }
        return await this._rule;
    }
    async getDocPath() {
        const readMePath = path_1.default.join(this.path, 'README.md');
        if (fs_1.default.existsSync(readMePath)) {
            return readMePath;
        }
        const rule = await this.getRule();
        return rule.moreInfoUrl;
    }
}
exports.RuleDefinitionImpl = RuleDefinitionImpl;
//# sourceMappingURL=rule-definition.js.map