"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FsCatalog = void 0;
const catalog_1 = require("./catalog");
const glob_1 = __importDefault(require("glob"));
const rule_definition_1 = require("./rule-definition");
const assert_1 = __importDefault(require("assert"));
const path_1 = __importDefault(require("path"));
const fs_1 = __importDefault(require("fs"));
const valid_url_1 = require("valid-url");
class FsCatalog extends catalog_1.BaseCatalogImpl {
    constructor(catalogDir) {
        super(catalogDir);
        this.ruleNames = new Set();
        this.catalogDocUrl = this.getCatalogDocUrl();
        this.loadRuleDefinitions();
    }
    loadRuleDefinitions() {
        const ruleDirs = this.getRuleDirs();
        for (const ruleDir of ruleDirs) {
            this.addRuleDef(ruleDir);
        }
    }
    getRuleDirs() {
        return glob_1.default.sync('./*/*/', { cwd: this.catalogDir, absolute: true });
    }
    addRuleDef(ruleDir) {
        const ruleDef = new rule_definition_1.RuleDefinitionImpl(ruleDir);
        (0, assert_1.default)(!this.ruleNames.has(ruleDef.name), `A rule with the name ${ruleDef.name} already exists`);
        this.ruleNames.add(ruleDef.name);
        this.ruleDefinitions.push(ruleDef);
    }
    getDocUrl(ruleDocPath) {
        (0, assert_1.default)(ruleDocPath, 'ruleDocPath must be a non empty string');
        if ((0, valid_url_1.isWebUri)(ruleDocPath)) {
            return ruleDocPath;
        }
        const docsUrl = this.catalogDocUrl;
        if (docsUrl) {
            const relPath = path_1.default.relative(this.catalogDir, ruleDocPath);
            return docsUrl + relPath;
        }
        return ruleDocPath;
    }
    getCatalogDocUrl() {
        const pkjJson = path_1.default.join(this.catalogDir, 'catalog.json');
        if (fs_1.default.existsSync(pkjJson)) {
            const doc = JSON.parse(fs_1.default.readFileSync(pkjJson, 'utf-8')).docs;
            if (doc.endsWith('/')) {
                return doc;
            }
            else {
                return doc + '/';
            }
        }
    }
}
exports.FsCatalog = FsCatalog;
//# sourceMappingURL=fs-catalog.js.map