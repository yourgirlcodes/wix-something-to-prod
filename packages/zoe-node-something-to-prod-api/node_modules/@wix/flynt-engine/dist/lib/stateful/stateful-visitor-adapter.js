"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.adaptRemovedVisitor = exports.adaptAddedVisitor = exports.adaptModifiedVisitor = exports.adaptStatefulVisitor = void 0;
const proto_syntax_tree_1 = require("@wix/proto-syntax-tree");
const shouldVisitMap = {
    visitFile: 'shouldVisitFile',
    visitService: 'shouldVisitService',
    visitMessage: 'shouldVisitMessage',
    visitEnum: 'shouldVisitEnum',
    visitMethod: undefined,
    visitField: undefined,
    visitOneof: undefined,
    visitEnumValue: undefined,
    visitExtension: undefined,
};
function getShouldVisitMethod(visitor, method) {
    const shouldVisitMethod = shouldVisitMap[method];
    if (shouldVisitMethod) {
        return visitor[shouldVisitMethod];
    }
}
function adaptStatefulVisitor(visitor, ctx) {
    const result = {};
    for (const method of proto_syntax_tree_1.visitorMethods) {
        const func = visitor[method];
        if (func) {
            if (func.length === 1) {
                result[method] = function (elem) {
                    return func.call(visitor, elem);
                };
            }
            else {
                result[method] = function (elem) {
                    const prevState = ctx.getPrevState(elem);
                    return func.call(visitor, elem, prevState);
                };
            }
        }
    }
    return result;
}
exports.adaptStatefulVisitor = adaptStatefulVisitor;
function adaptModifiedVisitor(visitor, ctx) {
    const result = {};
    for (const method of proto_syntax_tree_1.visitorMethods) {
        const func = visitor[method];
        const shouldVisit = getShouldVisitMethod(visitor, method);
        if (func) {
            result[method] = function (elem) {
                if (shouldVisit && !shouldVisit.call(visitor, elem)) {
                    return false;
                }
                const prevState = ctx.getPrevState(elem);
                if (prevState) {
                    return func.call(visitor, elem, prevState);
                }
            };
        }
        else if (shouldVisit) {
            result[method] = function (elem) {
                return shouldVisit.call(visitor, elem);
            };
        }
    }
    return result;
}
exports.adaptModifiedVisitor = adaptModifiedVisitor;
function adaptAddedVisitor(visitor, ctx) {
    const result = {};
    for (const method of proto_syntax_tree_1.visitorMethods) {
        const func = visitor[method];
        const shouldVisit = getShouldVisitMethod(visitor, method);
        if (func) {
            result[method] = function (elem) {
                if (shouldVisit && !shouldVisit.call(visitor, elem)) {
                    return false;
                }
                const prevState = ctx.getPrevState(elem);
                if (!prevState) {
                    func.call(visitor, elem);
                    return false;
                }
            };
        }
        else {
            const isContainer = proto_syntax_tree_1.visitorContainerMethods.includes(method);
            if (isContainer || shouldVisit) {
                result[method] = function (elem) {
                    if (shouldVisit && !shouldVisit.call(visitor, elem)) {
                        return false;
                    }
                    if (isContainer && !ctx.getPrevState(elem)) {
                        return false;
                    }
                };
            }
        }
    }
    return result;
}
exports.adaptAddedVisitor = adaptAddedVisitor;
function adaptRemovedVisitor(visitor, ctx) {
    const result = {};
    for (const method of proto_syntax_tree_1.visitorMethods) {
        const func = visitor[method];
        const shouldVisit = getShouldVisitMethod(visitor, method);
        if (func) {
            result[method] = function (elem) {
                if (shouldVisit && !shouldVisit.call(visitor, elem)) {
                    return false;
                }
                const newState = ctx.getNewState(elem);
                if (!newState) {
                    if (elem.typeName === proto_syntax_tree_1.TypeName.File || func.length === 1) {
                        func.call(visitor, elem);
                    }
                    else {
                        const parent = ctx.getNewState(elem.parent);
                        func.call(visitor, elem, parent);
                    }
                    return false;
                }
            };
        }
        else {
            const isContainer = proto_syntax_tree_1.visitorContainerMethods.includes(method);
            if (isContainer || shouldVisit) {
                result[method] = function (elem) {
                    if (shouldVisit && !shouldVisit.call(visitor, elem)) {
                        return false;
                    }
                    if (isContainer && !ctx.getNewState(elem)) {
                        return false;
                    }
                };
            }
        }
    }
    return result;
}
exports.adaptRemovedVisitor = adaptRemovedVisitor;
//# sourceMappingURL=stateful-visitor-adapter.js.map