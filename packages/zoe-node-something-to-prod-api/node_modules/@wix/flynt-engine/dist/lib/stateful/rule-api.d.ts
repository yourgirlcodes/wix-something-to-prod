import { Enum, EnumValue, Extension, Field, Message, Method, Oneof, ProtoFile, Service, SyntaxTree, SyntaxTreeContainers } from '@wix/proto-syntax-tree';
import { LintRuleContext } from '../rule-api';
export interface StatefulLintRuleContext extends LintRuleContext {
    readonly prevSt: SyntaxTree;
    visit(visitor: StatefulVisitor): void;
    visitFrom(from: SyntaxTreeContainers, visitor: StatefulVisitor): void;
    visitModified(visitor: ModifiedVisitor): void;
    visitModifiedFrom(from: SyntaxTreeContainers, visitor: ModifiedVisitor): void;
    visitAdded(visitor: AddedVisitor): void;
    visitAddedFrom(from: SyntaxTreeContainers, visitor: AddedVisitor): void;
    visitRemoved(visitor: RemovedVisitor): void;
    visitRemovedFrom(from: SyntaxTreeContainers, visitor: RemovedVisitor): void;
}
export interface StatefulVisitor {
    visitFile?(file: ProtoFile, prevFile: ProtoFile | undefined): boolean | void;
    visitService?(service: Service, prevService: Service | undefined): boolean | void;
    visitMessage?(message: Message, prevMessage: Message | undefined): boolean | void;
    visitEnum?(enm: Enum, prevEnum: Enum | undefined): boolean | void;
    visitMethod?(method: Method, prevMethod: Method | undefined): void;
    visitField?(field: Field, prevField: Field | undefined): void;
    visitOneof?(oneof: Oneof, prevOneof: Oneof | undefined): void;
    visitEnumValue?(enumValue: EnumValue, prevEnumValue: EnumValue | undefined): void;
    visitExtension?(extension: Extension, prevExtension: Extension | undefined): void;
}
export interface ShouldVisit {
    shouldVisitFile?(file: ProtoFile): boolean;
    shouldVisitService?(service: Service): boolean;
    shouldVisitMessage?(message: Message): boolean;
    shouldVisitEnum?(enm: Enum): boolean;
}
export interface AddedVisitor extends ShouldVisit {
    visitFile?(file: ProtoFile): undefined | void;
    visitService?(service: Service): undefined | void;
    visitMessage?(message: Message): undefined | void;
    visitEnum?(enm: Enum): undefined | void;
    visitMethod?(method: Method): void;
    visitField?(field: Field): void;
    visitOneof?(oneof: Oneof): void;
    visitEnumValue?(enumValue: EnumValue): void;
    visitExtension?(extension: Extension): void;
}
export interface ModifiedVisitor extends ShouldVisit {
    visitFile?(file: ProtoFile, prevFile: ProtoFile): boolean | void;
    visitService?(service: Service, prevService: Service): boolean | void;
    visitMessage?(message: Message, prevMessage: Message): boolean | void;
    visitEnum?(enm: Enum, prevEnum: Enum): boolean | void;
    visitMethod?(method: Method, prevMethod: Method): void;
    visitField?(field: Field, prevField: Field): void;
    visitOneof?(oneof: Oneof, prevOneof: Oneof): void;
    visitEnumValue?(enumValue: EnumValue, prevEnumValue: EnumValue): void;
    visitExtension?(extension: Extension, prevExtension: Extension): void;
}
export interface RemovedVisitor extends ShouldVisit {
    visitFile?(file: ProtoFile): undefined | void;
    visitService?(service: Service, parent: ProtoFile): undefined | void;
    visitMessage?(message: Message, parent: ProtoFile | Message): undefined | void;
    visitEnum?(enm: Enum, parent: ProtoFile | Message): undefined | void;
    visitMethod?(method: Method, parent: Service): void;
    visitField?(field: Field, parent: Message): void;
    visitOneof?(oneof: Oneof, parent: Message): void;
    visitEnumValue?(enumValue: EnumValue, parent: Enum): void;
    visitExtension?(extension: Extension, parent: ProtoFile): void;
}
