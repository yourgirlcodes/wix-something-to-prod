import { SyntaxTree, SyntaxTreeContainers, TypeName, Visitor } from '@wix/proto-syntax-tree';
import { LintReport, LintRuleContext } from './rule-api';
import { LintRule, StaticLintRule } from '../index';
export interface LintRuleContextConfig {
    cwd: string;
    protoDir: string;
}
export interface ReportLocation {
    readonly resultId?: string;
    readonly filePath?: string;
    readonly line?: number;
    readonly column?: number;
}
export interface RuleReport extends ReportLocation {
    readonly message: string;
}
export interface DisabledReport extends Required<ReportLocation> {
    readonly disabledBy: DisableLocation;
}
export interface DisableLocation {
    readonly id: string;
    readonly line: number;
}
export declare type RunResults = {
    lintResults: RuleReport[];
    disabledReports: DisabledReport[];
};
export declare abstract class LintRuleContextImpl<T extends LintRule> implements LintRuleContext {
    constructor(ruleName: string, rule: T, config: LintRuleContextConfig, st: SyntaxTree);
    private readonly _ruleName;
    private readonly _errMessage;
    private readonly _config;
    protected readonly rule: T;
    readonly results: RuleReport[];
    readonly disabledReports: DisabledReport[];
    readonly st: SyntaxTree;
    get moduleDir(): string;
    get protoDir(): string;
    run(): Promise<RunResults>;
    abstract runRule(): void | Promise<void>;
    report({ errorAt, message }?: LintReport): void;
    visitFrom(node: SyntaxTreeContainers, visitor: Visitor): void;
    visit(visitor: Visitor): void;
    protected skipNonLintedElements(visitor: Visitor): Visitor;
    assert<T>(value: T, rep?: LintReport): value is NonNullable<T>;
    reportIf<T>(value: T, rep?: LintReport): value is NonNullable<T>;
    private checkIfCurrentRuleDisabled;
    assertTypeExists(fqn: string, typeName: TypeName, rep?: LintReport): void;
}
export declare class StaticLintRuleContextImpl extends LintRuleContextImpl<StaticLintRule> {
    runRule(): Promise<void>;
}
