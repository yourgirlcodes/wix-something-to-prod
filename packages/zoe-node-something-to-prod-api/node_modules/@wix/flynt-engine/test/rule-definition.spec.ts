import {RuleDefinitionImpl} from '../lib/rule-definition';
import path from 'path';

describe('rule definition', () => {
  describe('validateRule', () => {
    it('fails if rule does not have a description', async () => {
      const ruleDef = new RuleDefinitionImpl('/dummy');
      expect(() => ruleDef.validateRule({run: () => void (0)} as any)).toThrow(/description.*required/);
    });

    it('fails if rule does not have a run function', async () => {
      const ruleDef = new RuleDefinitionImpl('/dummy');
      expect(() => ruleDef.validateRule({description: 'x', run: undefined} as any)).toThrow(/implement.*run.*function/);
    });
  });

  describe('rule', () => {
    it('loads a rule from the rule directory', async () => {
      const ruleDef = new RuleDefinitionImpl('./test/rules/no-digits');
      const rule = await ruleDef.getRule();
      expect(rule.description).toEqual('digits not allowed in field names');
      expect(rule.run).toBeInstanceOf(Function);
    });

    it('returns the same rule if getRule is called more than once', async () => {
      const ruleDef = new RuleDefinitionImpl('./test/rules/no-digits');
      const rule1 = await ruleDef.getRule();
      const rule2 = await ruleDef.getRule();
      expect(rule1).toBe(rule2);
    });

    it('fails if rule does not have an index file', async () => {
      const ruleDef = new RuleDefinitionImpl('./test/rules/rule-with-no-tests');
      await expect(ruleDef.getRule()).rejects.toThrow(/invalid rule/i);
    });

    it('fails if rule does has an index file with an error', async () => {
      const ruleDef = new RuleDefinitionImpl('./test/rules/rule-with-error');
      await expect(ruleDef.getRule()).rejects.toThrow(/ruleXXX/);
    });


    it('should return undefined if no readme and no moreInfoUrl defined', async () => {
      const ruleDef = new RuleDefinitionImpl('./test/rules/without-doc-path');
      expect(await ruleDef.getDocPath()).toBeUndefined();
    });

    it('should return the path to the readme if one exists', async () => {
      const ruleDef = new RuleDefinitionImpl('./test/rules/with-readme');
      expect(await ruleDef.getDocPath()).toBe(path.join('./test/rules/with-readme', 'README.md'));
    });

    it('should return the more info url if exists', async () => {
      const ruleDef = new RuleDefinitionImpl('./test/rules/with-more-info');
      expect(await ruleDef.getDocPath()).toBe('http://www.moreinfo.com');
    });
  });
});
