import {CatalogValidator, validate} from '../lib/catalog-validator';
import {FsCatalog} from '../lib/fs-catalog';
import {PreLoadedCatalog} from '../lib/pre-loaded-catalog';
import {getCatalogInfo} from './catalogs/valid-catalog/gen-index';

describe('validator', () => {
  describe('sample catalogs', () => {
    describe('valid file system based catalog', () => {
      const ct = new FsCatalog('./test/catalogs/valid-catalog');
      validate(ct);
    });

    describe('valid preloaded catalog', () => {
      const info = getCatalogInfo();
      const ct = new PreLoadedCatalog('./test/catalogs/valid-catalog', info);
      validate(ct);
    });
  });

  describe('basic validations', () => {
    it('should return false if catalog contains top level rules', async () => {
      const ct = new FsCatalog('./test/catalogs/top-level-rules');
      expect(new CatalogValidator(ct).validateNoTopLevelRules()).toBe(false);
    });

    it('fails if catalog dir does not exist', () => {
      const ct = new FsCatalog('xxx');
      expect(() => new CatalogValidator(ct).validate()).toThrow(/catalog.*exist/);
    });

    it('fails to create a catalog with no rules', () => {
      const ct = new FsCatalog('./test/catalogs/empty');
      expect(() => new CatalogValidator(ct).validate()).toThrow(/catalog.*empty/);
    });
  });


});
