import {isRuleDisabled, isRuleDisabledInComment} from '../lib/comment-parser';
import {generateSyntaxTreeFromSource, SyntaxTree} from '@wix/proto-syntax-tree';

describe('comment parser', () => {
  describe('disabled rule', () => {
    const testCases = [
      {
        comment: 'flynt-disable rule-1',
        checks: [
          {disabled: true, rules: ['rule-1']},
          {disabled: false, rules: ['rule-2']}
        ],
      },
      {
        comment: 'flynt-disable rule-1, rule-2,rule-3',
        checks: [{disabled: true, rules: ['rule-1', 'rule-2', 'rule-3']}],
      },
      {
        comment: '      flynt-disable rule-1\n flynt-disable rule-2,rule-3\n',
        checks: [{disabled: true, rules: ['rule-1', 'rule-2', 'rule-3']}],
      },
      {
        comment: '      flynt-disable rule-1\n xflynt-disable rule-2,rule-3\n',
        checks: [
          {disabled: true, rules: ['rule-1']},
          {disabled: false, rules: ['rule-2', 'rule-3']},
        ],
      },
      {
        comment: 'flynt-disable rule-1 rule-2',
        checks: [
          {disabled: true, rules: ['rule-1 rule-2']},
          {disabled: false, rules: ['rule-1', 'rule-2']},
        ],
      },
    ];

    for (const testCase of testCases) {
      describe(`comment "${testCase.comment.replace(/\n/g, '\\n')}"`, () => {
        for (const check of testCase.checks) {
          for (const rule of check.rules) {
            it(`isRuleDisabledInComment() should return "${check.disabled}" for rule "${rule}"`, async () => {
              expect(isRuleDisabledInComment(testCase.comment, rule)).toEqual(check.disabled);
            });
          }
        }
      });
    }

    describe('source code info', () => {
      let st: SyntaxTree;

      beforeAll(async () => {
        st = await generateSyntaxTreeFromSource('./test/modules/comments');
      });

      const testCases = [
        {
          name: 'syntax',
          scInfo: () => st.files[0].detailedSourceCode.syntax,
          checks: [
            {disabled: true, rules: ['rule-1', 'rule-5', 'flynt-disable rule-6']},
            {disabled: false, rules: ['rule-6', 'rule-2', 'rule-3']},
          ],
        },
        {
          name: '.Message',
          scInfo: () => st.getMessage('.Message').sourceCode,
          checks: [
            {disabled: true, rules: ['rule-2', 'rule-3', 'rule-4', 'rule-5 2', 'rule-6', 'rule-7',]},
            {disabled: false, rules: ['rule-5', 'rule-1']},
          ],
        },
        {
          name: '.Message.field1',
          scInfo: () => st.getField('.Message.field1').sourceCode,
          checks: [
            {disabled: true, rules: ['rule-2', 'rule-3', 'rule-4']},
            {disabled: false, rules: ['rule-1', 'rule-5']},
          ],
        },
        {
          name: '.Message.field2',
          scInfo: () => st.getField('.Message.field2').sourceCode,
          checks: [
            {disabled: true, rules: ['rule-1','rule-2', 'rule-3', 'rule-4', 'rule-5', 'rule-6', 'rule-7',]},
          ],
        },
      ];

      for (const testCase of testCases) {
        describe(`"${testCase.name}" sourceCodeInfo`, () => {
          for (const check of testCase.checks) {
            for (const rule of check.rules) {
              it(`isRuleDisabled() should return "${check.disabled}" for rule "${rule}"`, async () => {
                const scInfo = testCase.scInfo();
                expect(isRuleDisabled(scInfo, rule)).toEqual(check.disabled);
              });
            }
          }
        });
      }

    });

  });
});
