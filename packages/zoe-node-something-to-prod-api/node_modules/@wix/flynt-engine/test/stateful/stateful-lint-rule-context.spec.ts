import {generateSyntaxTreeFromSource, SyntaxTree, Type} from '@wix/proto-syntax-tree';
import {StatefulLintRuleContextImpl} from '../../lib/stateful/stateful-lint-rule-context';
import {StatefulLoggingVisitor} from '../test-utils';
import {StatefulLintRule} from '../../index';

describe('StatefulLintRuleContext', () => {
  const defConfig = {cwd: '/cwd', protoDir: '/proto'};
  let currentSt: SyntaxTree;
  let prevSt: SyntaxTree;
  let ctx: StatefulLintRuleContextImpl;

  describe('ctor', () => {
    beforeAll(async () => {
      currentSt = await generateSyntaxTreeFromSource('./test/modules/stateful/previous/proto', ['./test/modules/stateful/previous/include']);
      prevSt = await generateSyntaxTreeFromSource('./test/modules/stateful/previous/proto', ['./test/modules/stateful/previous/include']);
      ctx = new StatefulLintRuleContextImpl('some-rule-id', fakeRule('default error message'), defConfig, currentSt, prevSt);
    });

    it('basics', async () => {
      expect(ctx.st).toEqual(currentSt);
      expect(ctx.prevSt).toEqual(prevSt);
      expect(ctx.moduleDir).toEqual(defConfig.cwd);
    });
  });


  describe('visitor', () => {
    describe('equal trees', () => {
      beforeAll(async () => {
        currentSt = await generateSyntaxTreeFromSource('./test/modules/stateful/previous/proto', ['./test/modules/stateful/previous/include']);
        prevSt = await generateSyntaxTreeFromSource('./test/modules/stateful/previous/proto', ['./test/modules/stateful/previous/include']);
        ctx = new StatefulLintRuleContextImpl('some-rule-id', fakeRule('default error message'), defConfig, currentSt, prevSt);
      });

      it('visit modified - all items are visited', async () => {
        const loggingVisitor = new StatefulLoggingVisitor();
        ctx.visitModified(loggingVisitor);
        expect(loggingVisitor.visited).toEqual([
          ['com/wix/messages.proto [File]', 'com/wix/messages.proto'],
          ['.com.wix.Message [Message]', '.com.wix.Message'],
          ['.com.wix.Message.NestedMessage [Message]', '.com.wix.Message.NestedMessage'],
          ['.com.wix.Message.NestedMessage.str_field [Field]', '.com.wix.Message.NestedMessage.str_field'],
          ['.com.wix.Message.NestedEnum [Enum]', '.com.wix.Message.NestedEnum'],
          ['.com.wix.Message.NestedEnum.NESTED_VAL0 [EnumValue]', '.com.wix.Message.NestedEnum.NESTED_VAL0'],
          ['.com.wix.Message.NestedEnum.NESTED_VAL1 [EnumValue]', '.com.wix.Message.NestedEnum.NESTED_VAL1'],
          ['.com.wix.Message.one_of [Oneof]', '.com.wix.Message.one_of'],
          ['.com.wix.Message.int_field [Field]', '.com.wix.Message.int_field'],
          ['.com.wix.Message.int64_field [Field]', '.com.wix.Message.int64_field'],
          ['.com.wix.Message.common_message [Field]', '.com.wix.Message.common_message'],
          ['.com.wix.Deprecated [Message]', '.com.wix.Deprecated'],
          ['.com.wix.Deprecated.some_field [Field]', '.com.wix.Deprecated.some_field'],
          ['.com.wix.Enum [Enum]', '.com.wix.Enum'],
          ['.com.wix.Enum.VAL_0 [EnumValue]', '.com.wix.Enum.VAL_0'],
          ['.com.wix.Enum.VAL_1 [EnumValue]', '.com.wix.Enum.VAL_1'],
          ['com/wix/options.proto [File]', 'com/wix/options.proto'],
          ['.com.wix.str_opt [Extension]', '.com.wix.str_opt'],
          ['com/wix/service.proto [File]', 'com/wix/service.proto'],
          ['.com.wix.Service [Service]', '.com.wix.Service'],
          ['.com.wix.Service.Method [Method]', '.com.wix.Service.Method'],
          ['.com.wix.Service.Method1 [Method]', '.com.wix.Service.Method1'],
          ['.com.wix.Request [Message]', '.com.wix.Request'],
          ['.com.wix.Request.message [Field]', '.com.wix.Request.message'],
          ['.com.wix.Response [Message]', '.com.wix.Response']
        ]);
      });

      it('visit added - nothing is visited', async () => {
        const loggingVisitor = new StatefulLoggingVisitor();
        ctx.visitAdded(loggingVisitor);
        expect(loggingVisitor.visited).toEqual([]);
      });

      it('visit - all items are visited', async () => {
        const loggingVisitor = new StatefulLoggingVisitor();
        ctx.visit(loggingVisitor);
        expect(loggingVisitor.visited).toEqual([
          ['com/wix/messages.proto [File]', 'com/wix/messages.proto'],
          ['.com.wix.Message [Message]', '.com.wix.Message'],
          ['.com.wix.Message.NestedMessage [Message]', '.com.wix.Message.NestedMessage'],
          ['.com.wix.Message.NestedMessage.str_field [Field]', '.com.wix.Message.NestedMessage.str_field'],
          ['.com.wix.Message.NestedEnum [Enum]', '.com.wix.Message.NestedEnum'],
          ['.com.wix.Message.NestedEnum.NESTED_VAL0 [EnumValue]', '.com.wix.Message.NestedEnum.NESTED_VAL0'],
          ['.com.wix.Message.NestedEnum.NESTED_VAL1 [EnumValue]', '.com.wix.Message.NestedEnum.NESTED_VAL1'],
          ['.com.wix.Message.one_of [Oneof]', '.com.wix.Message.one_of'],
          ['.com.wix.Message.int_field [Field]', '.com.wix.Message.int_field'],
          ['.com.wix.Message.int64_field [Field]', '.com.wix.Message.int64_field'],
          ['.com.wix.Message.common_message [Field]', '.com.wix.Message.common_message'],
          ['.com.wix.Deprecated [Message]', '.com.wix.Deprecated'],
          ['.com.wix.Deprecated.some_field [Field]', '.com.wix.Deprecated.some_field'],
          ['.com.wix.Enum [Enum]', '.com.wix.Enum'],
          ['.com.wix.Enum.VAL_0 [EnumValue]', '.com.wix.Enum.VAL_0'],
          ['.com.wix.Enum.VAL_1 [EnumValue]', '.com.wix.Enum.VAL_1'],
          ['com/wix/options.proto [File]', 'com/wix/options.proto'],
          ['.com.wix.str_opt [Extension]', '.com.wix.str_opt'],
          ['com/wix/service.proto [File]', 'com/wix/service.proto'],
          ['.com.wix.Service [Service]', '.com.wix.Service'],
          ['.com.wix.Service.Method [Method]', '.com.wix.Service.Method'],
          ['.com.wix.Service.Method1 [Method]', '.com.wix.Service.Method1'],
          ['.com.wix.Request [Message]', '.com.wix.Request'],
          ['.com.wix.Request.message [Field]', '.com.wix.Request.message'],
          ['.com.wix.Response [Message]', '.com.wix.Response']
        ]);
      });

      it('all visited items are equal to previous version', async () => {
        const set = new Set<string>();
        ctx.visit({
          visitFile(elem, prevState) {
            expectSameElem(elem, prevState);
            set.add(elem.typeName);
          },
          visitService(elem, prevState) {
            expectSameElem(elem, prevState);
            set.add(elem.typeName);
          },
          visitMethod(elem, prevState) {
            expectSameElem(elem, prevState);
            set.add(elem.typeName);
          },
          visitMessage(elem, prevState) {
            expectSameElem(elem, prevState);
            set.add(elem.typeName);
          },
          visitEnum(elem, prevState) {
            expectSameElem(elem, prevState);
            set.add(elem.typeName);
          },
          visitEnumValue(elem, prevState) {
            expectSameElem(elem, prevState);
            set.add(elem.typeName);
          },
          visitField(elem, prevState) {
            expectSameElem(elem, prevState);
            set.add(elem.typeName);
          },
          visitOneof(elem, prevState) {
            expectSameElem(elem, prevState);
            set.add(elem.typeName);
          },
          visitExtension(elem, prevState) {
            expectSameElem(elem, prevState);
            set.add(elem.typeName);
          }
        });

        //Just confirm all types were visited
        expect([...set]).toEqual(expect.arrayContaining(['File', 'Message', 'Field', 'Enum', 'EnumValue', 'Oneof', 'Extension', 'Service', 'Method']));
      });
    });

    describe('modified trees', () => {
      beforeAll(async () => {
        currentSt = await generateSyntaxTreeFromSource('./test/modules/stateful/current/proto', ['./test/modules/stateful/current/include']);
        prevSt = await generateSyntaxTreeFromSource('./test/modules/stateful/previous/proto', ['./test/modules/stateful/previous/include']);
        ctx = new StatefulLintRuleContextImpl('some-rule-id', fakeRule('default error message'), defConfig, currentSt, prevSt);
      });

      it('visit modified - visits only elements that exist in both trees', async () => {
        const loggingVisitor = new StatefulLoggingVisitor();
        ctx.visitModified(loggingVisitor);
        expect(loggingVisitor.visited).toEqual([
          ['com/wix/messages.proto [File]', 'com/wix/messages.proto'],
          ['.com.wix.Message [Message]', '.com.wix.Message'],
          ['.com.wix.Message.NestedMessage [Message]', '.com.wix.Message.NestedMessage'],
          ['.com.wix.Message.NestedMessage.str_field [Field]', '.com.wix.Message.NestedMessage.str_field'],
          ['.com.wix.Message.NestedEnum [Enum]', '.com.wix.Message.NestedEnum'],
          ['.com.wix.Message.NestedEnum.NESTED_VAL0 [EnumValue]', '.com.wix.Message.NestedEnum.NESTED_VAL0'],
          ['.com.wix.Message.NestedEnum.NESTED_VAL1 [EnumValue]', '.com.wix.Message.NestedEnum.NESTED_VAL1'],
          ['.com.wix.Message.one_of [Oneof]', '.com.wix.Message.one_of'],
          ['.com.wix.Message.int_field [Field]', '.com.wix.Message.int_field'],
          //['.com.wix.Message.int64_field [Field]', '.com.wix.Message.int64_field'], //This field was removed
          ['.com.wix.Message.common_message [Field]', '.com.wix.Message.common_message'],
          ['.com.wix.Enum [Enum]', '.com.wix.Enum'],
          ['.com.wix.Enum.VAL_0 [EnumValue]', '.com.wix.Enum.VAL_0'],
          ['.com.wix.Enum.VAL_1 [EnumValue]', '.com.wix.Enum.VAL_1'],
          ['com/wix/options.proto [File]', 'com/wix/options.proto'],
          ['.com.wix.str_opt [Extension]', '.com.wix.str_opt'],
          ['com/wix/service.proto [File]', 'com/wix/service.proto'],
          ['.com.wix.Service [Service]', '.com.wix.Service'],
          ['.com.wix.Service.Method [Method]', '.com.wix.Service.Method'],
          ['.com.wix.Service.Method1 [Method]', '.com.wix.Service.Method1'],
          ['.com.wix.Request [Message]', '.com.wix.Request'],
          ['.com.wix.Request.message [Field]', '.com.wix.Request.message'],
          ['.com.wix.Response [Message]', '.com.wix.Response']
        ]);
      });

      it('visit added - visits only elements that were added', async () => {
        const loggingVisitor = new StatefulLoggingVisitor();
        ctx.visitAdded(loggingVisitor);
        expect(loggingVisitor.visited).toEqual([
          ['.com.wix.Message.NestedEnum.NESTED_VAL2 [EnumValue]'],
          ['.com.wix.Message.bool_field [Field]'],
          ['.com.wix.NewMessage [Message]'],
        ]);
      });

      it('visit - visits modified and new elements', async () => {
        const loggingVisitor = new StatefulLoggingVisitor();
        ctx.visit(loggingVisitor);
        expect(loggingVisitor.visited).toEqual([
          ['com/wix/messages.proto [File]', 'com/wix/messages.proto'],
          ['.com.wix.Message [Message]', '.com.wix.Message'],
          ['.com.wix.Message.NestedMessage [Message]', '.com.wix.Message.NestedMessage'],
          ['.com.wix.Message.NestedMessage.str_field [Field]', '.com.wix.Message.NestedMessage.str_field'],
          ['.com.wix.Message.NestedEnum [Enum]', '.com.wix.Message.NestedEnum'],
          ['.com.wix.Message.NestedEnum.NESTED_VAL0 [EnumValue]', '.com.wix.Message.NestedEnum.NESTED_VAL0'],
          ['.com.wix.Message.NestedEnum.NESTED_VAL1 [EnumValue]', '.com.wix.Message.NestedEnum.NESTED_VAL1'],
          ['.com.wix.Message.NestedEnum.NESTED_VAL2 [EnumValue]', undefined],
          ['.com.wix.Message.one_of [Oneof]', '.com.wix.Message.one_of'],
          ['.com.wix.Message.int_field [Field]', '.com.wix.Message.int_field'],
          //['.com.wix.Message.int64_field [Field]', '.com.wix.Message.int64_field'], //This field was removed
          ['.com.wix.Message.bool_field [Field]', undefined],
          ['.com.wix.Message.common_message [Field]', '.com.wix.Message.common_message'],
          ['.com.wix.NewMessage [Message]', undefined],
          ['.com.wix.NewMessage.field_1 [Field]', undefined],
          ['.com.wix.NewMessage.field_2 [Field]', undefined],
          ['.com.wix.Enum [Enum]', '.com.wix.Enum'],
          ['.com.wix.Enum.VAL_0 [EnumValue]', '.com.wix.Enum.VAL_0'],
          ['.com.wix.Enum.VAL_1 [EnumValue]', '.com.wix.Enum.VAL_1'],
          ['com/wix/options.proto [File]', 'com/wix/options.proto'],
          ['.com.wix.str_opt [Extension]', '.com.wix.str_opt'],
          ['com/wix/service.proto [File]', 'com/wix/service.proto'],
          ['.com.wix.Service [Service]', '.com.wix.Service'],
          ['.com.wix.Service.Method [Method]', '.com.wix.Service.Method'],
          ['.com.wix.Service.Method1 [Method]', '.com.wix.Service.Method1'],
          ['.com.wix.Request [Message]', '.com.wix.Request'],
          ['.com.wix.Request.message [Field]', '.com.wix.Request.message'],
          ['.com.wix.Response [Message]', '.com.wix.Response']
        ]);
      });

      it('visit removed - visits only elements that were removed', async () => {
        const loggingVisitor = new StatefulLoggingVisitor();
        ctx.visitRemoved(loggingVisitor);
        expect(loggingVisitor.visited).toEqual([
          ['.com.wix.Message.int64_field [Field]', '.com.wix.Message'],
          ['.com.wix.Deprecated [Message]', 'com/wix/messages.proto'],
        ]);
      });
    });
  });


  describe('visitFrom', () => {
    beforeAll(async () => {
      currentSt = await generateSyntaxTreeFromSource('./test/modules/stateful/current/proto', ['./test/modules/stateful/current/include']);
      prevSt = await generateSyntaxTreeFromSource('./test/modules/stateful/previous/proto', ['./test/modules/stateful/previous/include']);
      ctx = new StatefulLintRuleContextImpl('some-rule-id', fakeRule('default error message'), defConfig, currentSt, prevSt);
    });

    it('visit modified - visits only elements that exist in both trees', async () => {
      const loggingVisitor = new StatefulLoggingVisitor();
      const from = currentSt.getMessage('.com.wix.Message');
      ctx.visitModifiedFrom(from, loggingVisitor);
      expect(loggingVisitor.visited).toEqual([
        ['.com.wix.Message [Message]', '.com.wix.Message'],
        ['.com.wix.Message.NestedMessage [Message]', '.com.wix.Message.NestedMessage'],
        ['.com.wix.Message.NestedMessage.str_field [Field]', '.com.wix.Message.NestedMessage.str_field'],
        ['.com.wix.Message.NestedEnum [Enum]', '.com.wix.Message.NestedEnum'],
        ['.com.wix.Message.NestedEnum.NESTED_VAL0 [EnumValue]', '.com.wix.Message.NestedEnum.NESTED_VAL0'],
        ['.com.wix.Message.NestedEnum.NESTED_VAL1 [EnumValue]', '.com.wix.Message.NestedEnum.NESTED_VAL1'],
        ['.com.wix.Message.one_of [Oneof]', '.com.wix.Message.one_of'],
        ['.com.wix.Message.int_field [Field]', '.com.wix.Message.int_field'],
        //['.com.wix.Message.int64_field [Field]', '.com.wix.Message.int64_field'], //This field was removed
        ['.com.wix.Message.common_message [Field]', '.com.wix.Message.common_message'],
      ]);
    });

    it('visit added - visits only elements that were added', async () => {
      const loggingVisitor = new StatefulLoggingVisitor();
      const from = currentSt.getMessage('.com.wix.Message');
      ctx.visitAddedFrom(from, loggingVisitor);
      expect(loggingVisitor.visited).toEqual([
        ['.com.wix.Message.NestedEnum.NESTED_VAL2 [EnumValue]'],
        ['.com.wix.Message.bool_field [Field]'],
      ]);
    });

    it('visit - visits modified and new elements', async () => {
      const loggingVisitor = new StatefulLoggingVisitor();
      const from = currentSt.getMessage('.com.wix.Message');
      ctx.visitFrom(from, loggingVisitor);
      expect(loggingVisitor.visited).toEqual([
        ['.com.wix.Message [Message]', '.com.wix.Message'],
        ['.com.wix.Message.NestedMessage [Message]', '.com.wix.Message.NestedMessage'],
        ['.com.wix.Message.NestedMessage.str_field [Field]', '.com.wix.Message.NestedMessage.str_field'],
        ['.com.wix.Message.NestedEnum [Enum]', '.com.wix.Message.NestedEnum'],
        ['.com.wix.Message.NestedEnum.NESTED_VAL0 [EnumValue]', '.com.wix.Message.NestedEnum.NESTED_VAL0'],
        ['.com.wix.Message.NestedEnum.NESTED_VAL1 [EnumValue]', '.com.wix.Message.NestedEnum.NESTED_VAL1'],
        ['.com.wix.Message.NestedEnum.NESTED_VAL2 [EnumValue]', undefined],
        ['.com.wix.Message.one_of [Oneof]', '.com.wix.Message.one_of'],
        ['.com.wix.Message.int_field [Field]', '.com.wix.Message.int_field'],
        //['.com.wix.Message.int64_field [Field]', '.com.wix.Message.int64_field'], //This field was removed
        ['.com.wix.Message.bool_field [Field]', undefined],
        ['.com.wix.Message.common_message [Field]', '.com.wix.Message.common_message'],
      ]);
    });

    it('visit removed - visits only elements that were removed', async () => {
      const loggingVisitor = new StatefulLoggingVisitor();
      const from = currentSt.getMessage('.com.wix.Message');
      ctx.visitRemovedFrom(from, loggingVisitor);
      expect(loggingVisitor.visited).toEqual([
        ['.com.wix.Message.int64_field [Field]', '.com.wix.Message'],
      ]);
    });
  });
});

function expectSameElem(elem: Type, prevState: Type | undefined) {
  expect(JSON.stringify(elem)).toStrictEqual(JSON.stringify(prevState));
}

function fakeRule(description: string): StatefulLintRule {
  return {
    stateful: true,
    description,
    run() {
    }
  };
}
