"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.protoc = exports.getProtoFiles = exports.getProtocExec = void 0;
const assert_1 = __importDefault(require("assert"));
const util_1 = __importDefault(require("util"));
const glob_1 = __importDefault(require("glob"));
const child_process_1 = require("child_process");
const fs_1 = require("fs");
const process_1 = require("process");
const path_1 = __importDefault(require("path"));
const debug_1 = __importDefault(require("debug"));
const log = (0, debug_1.default)('wix:flynt:protoc');
function getProtocExec() {
    const PROTOC_EXECS = {
        'linux': path_1.default.join(__dirname, 'bin/protoc-linux-x86'),
        'darwin': path_1.default.join(__dirname, 'bin/protoc-darwin-x86'),
    };
    const protocExe = PROTOC_EXECS[process_1.platform];
    (0, assert_1.default)(protocExe, `unsupported platform: ${process_1.platform}`);
    (0, assert_1.default)((0, fs_1.existsSync)(protocExe), `${protocExe} not found`);
    return protocExe;
}
exports.getProtocExec = getProtocExec;
function getProtoFiles(folder) {
    return util_1.default.promisify(glob_1.default)('**/*.proto', { cwd: folder, nodir: true });
}
exports.getProtoFiles = getProtoFiles;
function validate(includeFolders) {
    if (!Array.isArray(includeFolders)) {
        throw new Error('includeFolders property must be an array of strings');
    }
}
async function prepareProtocArgs({ protoFiles, includeFolders, outputFile, cliOptions = [] }) {
    const args = [];
    args.push('-o', outputFile || '/dev/null');
    protoFiles.forEach(name => args.push(name));
    includeFolders.forEach(folder => args.push('-I', folder));
    return args.concat(cliOptions);
}
async function protoc(opts) {
    validate(opts.includeFolders);
    const args = await prepareProtocArgs(opts);
    const protocExec = process.env.PROTOC || getProtocExec();
    log('executing protoc with the following parameters', { protoc: protocExec, args });
    try {
        return await util_1.default.promisify(child_process_1.execFile)(protocExec, args);
    }
    catch (e) {
        if (e.stderr) {
            throw new Error(`protoc execution failed:\n${e.stderr.trim()}`);
        }
        else {
            console.error(`protoc execution failed:\n${e}`);
            throw e;
        }
    }
}
exports.protoc = protoc;
//# sourceMappingURL=protoc.js.map