"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateBinaryFileDescriptorFromProtoFiles = exports.generateBinaryFileDescriptor = void 0;
const assert_1 = __importDefault(require("assert"));
const tmp_1 = __importDefault(require("tmp"));
const protoc_1 = require("./protoc");
const fs_1 = __importDefault(require("fs"));
const debug_1 = __importDefault(require("debug"));
const log = (0, debug_1.default)('wix:flynt:protoc');
async function generateFileDescriptor(opts) {
    const { name: outputFile } = tmp_1.default.fileSync({ postfix: `fd.${opts.fileExt}` });
    log('generating file descriptor to: ', outputFile);
    await (0, protoc_1.protoc)({
        protoFiles: opts.protoFiles || [],
        includeFolders: opts.include || [],
        outputFile,
        cliOptions: ['--include_imports', '--include_source_info']
    });
    return fs_1.default.readFileSync(outputFile);
}
async function generateBinaryFileDescriptor(mainProtoFolder, opts = {}) {
    (0, assert_1.default)(mainProtoFolder, 'mainProtoFolder is required');
    const protoFiles = await (0, protoc_1.getProtoFiles)(mainProtoFolder);
    const include = [mainProtoFolder].concat(opts.include ?? []);
    const data = await generateFileDescriptor({ fileExt: 'bin', include, protoFiles });
    return data;
}
exports.generateBinaryFileDescriptor = generateBinaryFileDescriptor;
async function generateBinaryFileDescriptorFromProtoFiles(opts) {
    return await generateFileDescriptor({ fileExt: 'bin', include: opts.include, protoFiles: opts.protoFiles });
}
exports.generateBinaryFileDescriptorFromProtoFiles = generateBinaryFileDescriptorFromProtoFiles;
//# sourceMappingURL=gen-file-descriptor.js.map