import assert from 'assert';
import tmp from 'tmp';
import {getProtoFiles, protoc} from './protoc';
import fs from 'fs';
import debug from 'debug';

const log = debug('wix:flynt:protoc');

async function generateFileDescriptor(opts: {protoFiles?: string[]; fileExt: string; include?: string[]}) {
  const {name: outputFile} = tmp.fileSync({postfix: `fd.${opts.fileExt}`});
  log('generating file descriptor to: ', outputFile);
  await protoc({
    protoFiles: opts.protoFiles || [],
    includeFolders: opts.include || [],
    outputFile,
    cliOptions: ['--include_imports', '--include_source_info']
  });

  return fs.readFileSync(outputFile);
}

export async function generateBinaryFileDescriptor(mainProtoFolder: string, opts: {include?: string[]} = {}): Promise<Buffer> {
  assert(mainProtoFolder, 'mainProtoFolder is required');
  const protoFiles = await getProtoFiles(mainProtoFolder);
  const include = [mainProtoFolder].concat(opts.include ?? []);
  const data = await generateFileDescriptor({fileExt: 'bin', include, protoFiles});
  return data;
}

export async function generateBinaryFileDescriptorFromProtoFiles(opts: {protoFiles: string[]; include: string[]}): Promise<Buffer> {
  return  await generateFileDescriptor({fileExt: 'bin', include: opts.include, protoFiles: opts.protoFiles});
}
