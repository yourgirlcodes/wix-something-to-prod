import assert from 'assert';
import util from 'util';
import glob from 'glob';
import {execFile} from 'child_process';
import {existsSync} from 'fs';
import {platform} from 'process';
import path from 'path';
import debug from 'debug';

const log = debug('wix:flynt:protoc');

export function getProtocExec() {
  const PROTOC_EXECS: {[p: string]: string} = {
    'linux': path.join(__dirname, 'bin/protoc-linux-x86'),
    'darwin': path.join(__dirname, 'bin/protoc-darwin-x86'),
  };

  const protocExe = PROTOC_EXECS[platform];
  assert(protocExe, `unsupported platform: ${platform}`);
  assert(existsSync(protocExe), `${protocExe} not found`);

  return protocExe;
}

export function getProtoFiles(folder: string) {
  return util.promisify(glob)('**/*.proto', {cwd: folder, nodir: true});
}

function validate(includeFolders: string[]) {
  if (!Array.isArray(includeFolders)) {
    throw new Error('includeFolders property must be an array of strings');
  }
}

async function prepareProtocArgs({protoFiles, includeFolders, outputFile, cliOptions = []}: protocOptions) {
  const args = [];

  args.push('-o', outputFile || '/dev/null');

  protoFiles.forEach(name => args.push(name));
  includeFolders.forEach(folder => args.push('-I', folder));

  return args.concat(cliOptions);
}

export interface protocOptions {
  protoFiles: string[];
  includeFolders: string[];
  outputFile?: string;
  cliOptions?: string[];
}

export async function protoc(opts: protocOptions) {
  validate(opts.includeFolders);

  const args = await prepareProtocArgs(opts);

  const protocExec = process.env.PROTOC || getProtocExec();

  log('executing protoc with the following parameters', {protoc: protocExec, args});
  try {
    return await util.promisify(execFile)(protocExec, args);
  } catch (e: any) {
    if (e.stderr) {
      throw new Error(`protoc execution failed:\n${e.stderr.trim()}`);
    } else {
      console.error(`protoc execution failed:\n${e}`);
      throw e;
    }
  }
}

