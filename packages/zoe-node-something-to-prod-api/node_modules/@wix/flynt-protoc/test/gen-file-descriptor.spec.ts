import path from 'path';
import {generateBinaryFileDescriptor} from '..';
import {generateBinaryFileDescriptorFromProtoFiles} from '../lib/gen-file-descriptor';

describe('generateFileDescriptor', () => {

  const folderPath = (name: string) => path.join(__dirname, `protos/${name}`);

  describe('validations', () => {
    it('should validate that base folder passed', async () => {
      //@ts-expect-error testing invalid parameter
      await expect(generateBinaryFileDescriptor()).rejects.toThrow(/mainProtoFolder .* required/);
    });
  });

  it('should generate binary file descriptor', async () => {
    const fd = await generateBinaryFileDescriptor(folderPath('simple-good'));
    expect(fd).toBeInstanceOf(Buffer);
  });

  describe('proto files', () => {
    let baseFd: Buffer;

    beforeAll(async () => {
      baseFd = await generateBinaryFileDescriptor(folderPath('simple-good'));
    });

    it('generates proto for passed files', async () => {
      const fd = await generateBinaryFileDescriptorFromProtoFiles({
        protoFiles: [folderPath('simple-good/include.proto')],
        include: [folderPath('simple-good')],
      });
      expect(fd).not.toStrictEqual(baseFd);
    });

    it('generates proto for all files in folder should behave the same as proto for entire folder', async () => {
      const fd = await generateBinaryFileDescriptorFromProtoFiles({
        protoFiles: [folderPath('simple-good/include.proto'), folderPath('simple-good/service.proto')],
        include: [folderPath('simple-good')],
      });
      expect(fd).toStrictEqual(baseFd);
    });
  });
});
