const assert = require('assert');
const urlParse = require('url').parse;
const {isValidStore} = require('./wix-aspect-store');

const WIX_DOMAIN = '.wix.com';
const WIXSITE_DOMAIN = '.wixsite.com';
const EDITORX_DOMAIN = '.editorx.com';
const STAGING_DOMAIN_SUFFIX = 'wixpress.com';

module.exports = ({AspectsContext}) => {
  const resolveCookieDomain = url => {
    const {host} = urlParse(addProtocolIfMissing(url));
    if (host.endsWith(WIX_DOMAIN)) {
      return WIX_DOMAIN;
    } else if (host.endsWith(EDITORX_DOMAIN) || `.${host}` === EDITORX_DOMAIN) {
      return EDITORX_DOMAIN;
    } else if (host.endsWith(WIXSITE_DOMAIN)) {
      return WIXSITE_DOMAIN;
    } else if (host.indexOf(STAGING_DOMAIN_SUFFIX) > -1) {
      const hostParts = host.split('.');
      if (hostParts.length >= 3) {
        return '.' + hostParts[hostParts.length - 3] + '.' + hostParts[hostParts.length - 2] + '.' + hostParts[hostParts.length - 1];
      } else {
        return WIX_DOMAIN;
      }
    } else {
      // default, need to check this
      return WIX_DOMAIN;
    }
  };

  function addProtocolIfMissing(url) {
    return url.match(/^http(s)?:\/\/.*/) ? url : 'http://' + url;
  }

  const adaptAspectlessApi = (args, expectedNumberOfArgs = args.length) => {
    assert(Array.isArray(args), 'args param must be an array');
    assert(typeof expectedNumberOfArgs === 'number', 'expectedNumberOfArgs param must be a number');
    if (isValidStore(args[0])) {
      return args;
    }
    const trimmedArgs = [...args];
    while (trimmedArgs.length && typeof trimmedArgs[trimmedArgs.length - 1] === 'undefined') {
      trimmedArgs.pop();
    }
    if (trimmedArgs.length >= expectedNumberOfArgs) {
      return args;
    }
    const aspects = AspectsContext.current();
    assert(isValidStore(aspects), 'Unable to retrieve valid aspects. ' +
      'Make sure you are running in a context where current aspects are available ' +
      'or provide a valid AspectStore as the first argument.'
    );
    return [
      aspects,
      ...trimmedArgs
    ];
  };

  return {
    resolveCookieDomain,
    adaptAspectlessApi
  };
};
