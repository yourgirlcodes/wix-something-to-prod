import {copy} from 'fs-extra';
import {readdir} from 'fs/promises';
import path from 'path';
import {runGit} from '../lib/git-utils';
import {FlyntCtx, FlyntOptions} from '@wix/flynt-plugin-types';

export async function prepareRepo(repoTemplatePath: string, targetPath: string, opts: {skipBranches?: boolean; switchTo?: string; masterBranch?: string} = {}) {
  opts.masterBranch = opts.masterBranch ?? 'master';
  //console.log(`preparing a git repo in ${targetPath} based on ${repoTemplatePath}`);
  await runGit(targetPath, 'init');
  await runGit(targetPath, 'checkout', '-b', opts.masterBranch);
  //First create master branch
  await copy(path.join(repoTemplatePath, opts.masterBranch), targetPath);
  await runGit(targetPath, 'add', '--all');
  await runGit(targetPath, 'commit', '-m', 'initial commit');

  if (!opts.skipBranches) {
    const branches = (await readdir(path.join(repoTemplatePath, 'branches'), {withFileTypes: true}))
      .filter(entry => entry.isDirectory())
      .map(entry => entry.name)
      .sort();

    for (const branch of branches) {
      await runGit(targetPath, 'checkout', '-b', branch);
      await copy(path.join(repoTemplatePath, 'branches', branch), targetPath);
      await runGit(targetPath, 'add', '--all');
      await runGit(targetPath, 'commit', '-m', `created branch ${branch}`);
    }
    if (opts.switchTo) {
      await runGit(targetPath, 'checkout', opts.switchTo);
    }
  }
}

export function createContext(opts: FlyntOptions): FlyntCtx {
  return {
    opts,
    debug: () => {
    },
    reportError: async ()=>{
    }
  };
}
