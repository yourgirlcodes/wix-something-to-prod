"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.gitCreateWorktree = exports.gitDirExistsInBranch = exports.gitGetRootDir = exports.gitIsDiff = exports.runGit = void 0;
const util_1 = __importDefault(require("util"));
const child_process_1 = require("child_process");
const tmp_1 = __importDefault(require("tmp"));
const exec = util_1.default.promisify(child_process_1.execFile);
async function runGit(cwd, ...args) {
    try {
        const res = await exec('git', args, { cwd });
        return res.stdout.trim();
    }
    catch (err) {
        throw new Error(`failed to run git ${err}`);
    }
}
exports.runGit = runGit;
async function gitIsDiff(cwd, baseBranch) {
    try {
        await runGit(cwd, 'diff', '--quiet', baseBranch, '.');
        return false;
    }
    catch (e) {
        return true;
    }
}
exports.gitIsDiff = gitIsDiff;
async function gitGetRootDir(cwd) {
    try {
        return await runGit(cwd, 'rev-parse', '--show-toplevel');
    }
    catch (e) {
        return undefined;
    }
}
exports.gitGetRootDir = gitGetRootDir;
async function gitDirExistsInBranch(cwd, path, branch) {
    try {
        const dirs = await runGit(cwd, 'ls-tree', '--name-only', branch, '-d', path);
        return !!dirs;
    }
    catch (err) {
        console.error(`gitDirExistsInBranch error: ${err}`);
        return false;
    }
}
exports.gitDirExistsInBranch = gitDirExistsInBranch;
async function gitCreateWorktree(cwd, baseBranch) {
    const workTreePath = tmp_1.default.dirSync({ template: 'wt-XXXXXX' }).name;
    await runGit(cwd, 'worktree', 'add', workTreePath, baseBranch, '--no-checkout', '--detach');
    return workTreePath;
}
exports.gitCreateWorktree = gitCreateWorktree;
//# sourceMappingURL=git-utils.js.map