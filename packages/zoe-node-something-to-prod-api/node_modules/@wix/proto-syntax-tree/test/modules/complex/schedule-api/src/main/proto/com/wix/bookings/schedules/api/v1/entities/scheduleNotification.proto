syntax = "proto3";

package com.wix.bookings.schedules.api.v1;

import "com/wix/bookings/schedules/api/v1/entities/schedule.proto";
import "com/wix/bookings/schedules/api/v1/entities/session.proto";
import "google/protobuf/wrappers.proto";
import "com/wix/bookings/schedules/api/v1/entities/participantNotification.proto";
import "com/wix/bookings/schedules/api/v1/entities/properties/migrationData.proto";
import "com/wix/bookings/schedules/api/v1/entities/properties/availabilityPolicy.proto";
import "com/wix/bookings/schedules/api/v1/entities/properties/recurringInterval.proto";

message ScheduleNotification {
    oneof event {
        ScheduleCreated schedule_created = 11;
        ScheduleUpdated schedule_updated = 12;
        ScheduleCancelled schedule_cancelled = 13;
        SessionCreated session_created = 14;
        SessionUpdated session_updated = 15;
        SessionCancelled session_cancelled = 16;
        AvailabilityPolicyUpdated availability_policy_updated = 17;
        IntervalSplit interval_split = 18 [deprecated = true];
        RecurringSessionSplit recurring_session_split = 19;
        MultipleSessionsCreated multiple_sessions_created = 199; //supported only for schedule migration apis.
        MigrationEvent migration_event = 200; //supported only for schedule migration apis.
    }
    google.protobuf.BoolValue preserve_future_sessions_with_participants = 6;
    bool notify_participants = 7 [deprecated = true]; // Whether to notify participants about changed sessions. deprecated, use participant_notification
    SitePropertiesOnScheduleCreation site_properties = 8; //site properties. Optional. Given in create schedule notification.
    string instance_id = 9;
}

message ScheduleCreated {
    Schedule schedule = 1;
}

message ScheduleUpdated {
    //The old schedule before the update.
    Schedule old_schedule = 1;
    //The new schedule after the update.
    Schedule new_schedule = 2;
    //Recurring sessions updated event. If this field is given, the reason for the schedule updated event was
    //updating at least one of the given schedule's recurring sessions.
    //This event is triggered by create/update/delete recurring session apis.
    RecurringSessionsUpdated recurring_sessions = 5;
    // Whether to notify participants about the change and an optional custom message
    ParticipantNotification participant_notification = 3;

    // Whether this notification was created as a result of an anonymization request, such as GDPR.
    // An anonymized participant will have the following details:
    // name = "deleted"
    // phone = "deleted"
    // email = "deleted@deleted.com"
    google.protobuf.BoolValue triggered_by_anonymize_request = 4;
}

message ScheduleCancelled {
    Schedule schedule = 1;
    ParticipantNotification participant_notification = 2; // Whether to notify participants about the change and an optional custom message
    Schedule old_schedule = 3;
}

message SessionCreated {
    Session session = 1;
}

message SessionUpdated {
    Session old_session = 1;
    Session new_session = 2;
    ParticipantNotification participant_notification = 3; // Whether to notify participants about the change and an optional custom message

    // Whether this notification was created as a result of an anonymization request, such as GDPR.
    // An anonymized participant will have the following details:
    // name = "deleted"
    // phone = "deleted"
    // email = "deleted@deleted.com"
    google.protobuf.BoolValue triggered_by_anonymize_request = 4;

}

message SessionCancelled {
    Session session = 1;
    ParticipantNotification participant_notification = 2; // Whether to notify participants about the change and an optional custom message
}

message AvailabilityPolicyUpdated {
    AvailabilityPolicy availability_policy = 1;
}

message IntervalSplit {
    option deprecated = true;
    string schedule_id = 1;
    repeated RecurringInterval intervals = 2;
    google.protobuf.Int32Value new_schedule_version = 3;
    google.protobuf.Int32Value old_schedule_version = 4;
}

message RecurringSessionSplit {
    string schedule_id = 1;
    repeated Session recurring_sessions = 2;
    google.protobuf.Int32Value new_schedule_version = 3;
    google.protobuf.Int32Value old_schedule_version = 4;
}

message MultipleSessionsCreated {
    repeated ScheduleWithSessions schedules_with_sessions = 1;
}

message MigrationEvent {
    MigrationData migration_data = 1;
}

message ScheduleWithSessions {
    Schedule schedule = 1;
    SitePropertiesOnScheduleCreation site_properties = 2;
    repeated Session sessions = 3;
}

message SitePropertiesOnScheduleCreation {
    option deprecated = true;
    google.protobuf.StringValue time_zone = 1; //The global time zone value.
}

message RecurringSessionsUpdated {
    //Old schedule's recurring session list.
    repeated Session old_recurring_sessions = 1;
    //New schedule's recurring session list.
    repeated Session new_recurring_sessions = 2;
}
