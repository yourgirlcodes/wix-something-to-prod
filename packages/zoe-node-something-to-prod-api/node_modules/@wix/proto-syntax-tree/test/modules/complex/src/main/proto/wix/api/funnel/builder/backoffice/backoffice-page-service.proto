syntax = "proto3";

package wix.api.funnel.builder.backoffice;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";
import "google/protobuf/timestamp.proto";

import "wix/api/annotations.proto";
import "wix/api/validations.proto";
import "wix/api/permissions.proto";
import "wix/api/context.proto";
import "wix/common/paging.proto";
import "wix/common/query.proto";

import "wix/api/funnel/builder/backoffice/page.proto";

service BackofficePageService {
    rpc CreatePage (CreatePageRequest) returns (CreatePageResponse) {
        option (google.api.http).post = "/backoffice/pages";
        option (wix.api.maturity) = ALPHA;
        option (wix.api.exposure) = INTERNAL;
        option (wix.api.permission).name = "FUNNEL_INTRO.MANAGE_CONTENT";
        option (wix.api.required) = "CreatePageRequest.page";
    }

    rpc GetPage (GetPageRequest) returns (GetPageResponse) {
        option (google.api.http).get = "/backoffice/pages/{id}";
        option (wix.api.maturity) = ALPHA;
        option (wix.api.exposure) = INTERNAL;
        option (wix.api.permission).name = "FUNNEL_INTRO.MANAGE_CONTENT";
    }

    rpc ListPages (ListPagesRequest) returns (ListPagesResponse) {
        option (google.api.http).get = "/backoffice/pages";
        option (wix.api.maturity) = ALPHA;
        option (wix.api.exposure) = INTERNAL;
        option (wix.api.permission).name = "FUNNEL_INTRO.MANAGE_CONTENT";
    }

    rpc QueryPages (QueryPagesRequest) returns (QueryPagesResponse) {
        option (google.api.http).get = "/backoffice/pages/query";
        option (wix.api.maturity) = ALPHA;
        option (wix.api.exposure) = INTERNAL;
        option (wix.api.permission).name = "FUNNEL_INTRO.MANAGE_CONTENT";
    }

    rpc SetPage (SetPageRequest) returns (SetPageResponse) {
        option (google.api.http).put = "/backoffice/pages/{id}";
        option (wix.api.maturity) = ALPHA;
        option (wix.api.exposure) = INTERNAL;
        option (wix.api.permission).name = "FUNNEL_INTRO.MANAGE_CONTENT";
        option (wix.api.required) = "SetPageRequest.page";
    }

    rpc SendPageToTranslation (SendPageToTranslationRequest) returns (SendPageToTranslationResponse) {
        option (google.api.http).post = "/backoffice/pages/{id}/translate";
        option (wix.api.maturity) = ALPHA;
        option (wix.api.exposure) = INTERNAL;
        option (wix.api.permission).name = "FUNNEL_INTRO.MANAGE_CONTENT";
    }

    rpc DeletePage (DeletePageRequest) returns (DeletePageResponse) {
        option (google.api.http).delete = "/backoffice/pages/{id}";
        option (wix.api.maturity) = ALPHA;
        option (wix.api.exposure) = INTERNAL;
        option (wix.api.permission).name = "FUNNEL_INTRO.MANAGE_CONTENT";
    }
}

message CreatePageRequest {
    Page page = 1;
}

message CreatePageResponse {
    Page page = 1;
}

message GetPageRequest {
    string id = 1 [(wix.api.format) = GUID];
}

message GetPageResponse {
    Page page = 1;
}

message ListPagesRequest {
    wix.common.Paging paging = 1;
}

message ListPagesResponse {
    repeated Page pages = 1;
}

message QueryPagesRequest {
    wix.common.QueryV2 query = 1;
}

message QueryPagesResponse {
    repeated Page pages = 1;
}

message SetPageRequest {
    string id = 1 [(wix.api.format) = GUID];

    // Expected version performing the operation. Will fail on no match.
    int32 version = 2 [(wix.api.min) = 1];

    Page page = 3;
}

message SetPageResponse {
    Page page = 1;
}

message SendPageToTranslationRequest {
    string id = 1 [(wix.api.format) = GUID];

    // Expected version performing the operation. Will fail on no match.
    int32 version = 2 [(wix.api.min) = 1];
}

message SendPageToTranslationResponse {

}

message DeletePageRequest {
    string id = 1 [(wix.api.format) = GUID];
}

message DeletePageResponse {
    Page page = 1;
}

