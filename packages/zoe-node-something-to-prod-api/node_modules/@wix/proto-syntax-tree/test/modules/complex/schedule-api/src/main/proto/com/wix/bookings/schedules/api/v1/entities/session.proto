syntax = "proto3";

package com.wix.bookings.schedules.api.v1;

import "wix/api/validations.proto";
import "google/protobuf/wrappers.proto";
import "google/protobuf/timestamp.proto";
import "com/wix/bookings/common/api/v1/entities/rate.proto";
import "com/wix/bookings/schedules/api/v1/entities/participant.proto";
import "com/wix/bookings/schedules/api/v1/entities/properties/recurringInterval.proto";
import "com/wix/bookings/schedules/api/v1/entities/properties/linkedSchedule.proto";
import "com/wix/bookings/schedules/api/v1/entities/properties/externalCalendar.proto";
import "com/wix/bookings/schedules/api/v1/entities/properties/calendarDateTime.proto";
import "com/wix/bookings/schedules/api/v1/entities/properties/sessionType.proto";
import "com/wix/bookings/schedules/api/v1/entities/properties/conferencing.proto";
import "com/wix/bookings/common/api/v1/entities/location.proto";
import "wix/api/annotations.proto";

message Session {
    //Session ID.
    google.protobuf.StringValue id = 1 [(.wix.api.readOnly) = true];
    //ID of the schedule that the session belongs to. 
    string schedule_id = 2;
    //ID of the resource or service that the session's schedule belongs to.
    google.protobuf.StringValue schedule_owner_id = 3 [(.wix.api.readOnly) = true];
    //Original start date and time of the session in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)) format.
    google.protobuf.Timestamp original_start = 5;
    //An object specifying the start date and time of the session. If the session is a recurring session, `start` must contain a `localDateTime`.
    CalendarDateTime start = 6;
    //An object specifying the end date and time of the session. The `end` time must be after the `start` time and be same type as `start`.
    //If the session is a recurring session, `end` must contain a `localDateTime`.
    CalendarDateTime end = 7;
    //An object specifying a list of schedules and the way each schedule's availability is affected by the session. For example, the schedule of an instructor is a affected by sessions of the class that they instruct.
    //The array is inherited from the schedule and can be overridden even if the session is a recurring session.
    repeated LinkedSchedule affected_schedules = 8;
    //Session title.
    //The value is inherited from the schedule and can be overridden unless the session is a recurring session.
    google.protobuf.StringValue title = 9 [(.wix.api.maxLength) = 6000];
    //Tags for the session.
    //The value is inherited from the schedule and can be overridden unless the session is a recurring session.
    repeated google.protobuf.StringValue tags = 10 [(.wix.api.maxLength) = 200];
    //An object describing the location where the session takes place.
    //Defaults to the schedule location.
    //For single sessions, `session.location.businessLocation` can only be provided for locations that are defined in the schedule using `schedule.location` or `schedule.availability.locations`.
    com.wix.bookings.common.api.v1.Location location = 11;
    //Maximum number of participants that can be added to the session. Defaults to the schedule capacity.
    //The value is inherited from the schedule and can be overridden unless the session is a recurring session.
    google.protobuf.Int32Value capacity = 12 [(.wix.api.min) = 0, (.wix.api.max) = 1000];
    //The price options offered for the session.  Defaults to the schedule rate.
    //The value is inherited from the schedule and can be overridden unless the session is a recurring session.
    com.wix.bookings.common.api.v1.Rate rate = 13;
    //Time reserved after the session end time, derived from the schedule availability constraints and the time between slots. Read-only.
    //If the session is a recurring session, this field must be empty.
    google.protobuf.Int32Value time_reserved_after = 14;
    //Additional information about the session.
    //Notes are not supported for recurring sessions.
    string notes = 15 [(.wix.api.maxLength) = 10000];
    //The number of participants booked for the session. Read-only.
    //Calculated as the sum of the party sizes.
    int32 total_number_of_participants = 16 [(.wix.api.readOnly) = true];
    //List of participants booked for the session.
    //The list includes participants who have registered for this specific session, and participants who have registered for a schedule that includes this session.
    //If the session is a recurring session, this field must be empty.
    repeated Participant participants = 17;
    //A list of properties for which values were inherited from the schedule.
    //This does not include participants that were inherited from the schedule.
    repeated string inherited_fields = 18 [(.wix.api.readOnly) = true];
    //Title and description values to override session defaults when syncing to an external calendar.
    //Learn more about [syncing calendars](https://support.wix.com/en/article/wix-bookings-important-information-about-syncing-google-calendars-with-wix-bookings).
     //The value is inherited from the schedule and can be overridden unless the session is a recurring session.
    ExternalCalendarOverrides external_calendar_overrides = 19;
    //Session status.
    //<!--ONLY:VELO
    // One of:
    // - `"CONFIRMED"` Default value.
    // - `"CANCELLED"` The session was deleted.
    //<!--END:ONLY:VELO-->
    Status status = 20 [(.wix.api.readOnly) = true];
    //Recurring interval ID. Defined when a session will be a recurring session. read-only. Optional.
    //For exmaple, when creating a class service  with recurring sessions, you add a recurrence rule to create recurring sessions.
    //This field is omitted for single sessions or instances of recurring sessions.
    //Specified when the session was originally generated from a schedule recurring interval.
    //Deprecated. Use `recurringSessionId`.
    google.protobuf.StringValue recurring_interval_id = 21 [(.wix.api.readOnly) = true, deprecated = true];
    //The ID of the recurring session if this session is an instance of a recurrence. Use this ID to update the recurrence and all of the instances.
    google.protobuf.StringValue recurring_session_id = 211 [(.wix.api.readOnly) = true];
    //Session type.
    //<!--ONLY:VELO
    // One of:
    // - `"EVENT"` Reserved period of time on the schedule. For example, an appointment, class, course, or blocked time. Events are visible in the Dashboard in the Bookings app's [Booking Calendar](https://support.wix.com/en/article/wix-bookings-about-the-wix-bookings-calendar) page.
    // - `"WORKING_HOURS"` Placeholder for available time on a resource’s schedule.
    //<!--END:ONLY:VELO-->
    SessionType type = 22;
    //A conference created for the session according to the details set in the schedule's conference provider information.
    //If the session is a recurring session, this field is inherited from the schedule.
    CalendarConference calendar_conference = 23;
    //A string representing a recurrence rule (RRULE) for a recurring session, as defined in [iCalendar RFC 5545](https://icalendar.org/iCalendar-RFC-5545/3-3-10-recurrence-rule.html).
    //If the session is an instance of a recurrence pattern, the `instanceOfRecurrence` property will be contain the recurrence rule and this property will be empty.
    //The RRULE defines a rule for repeating a session.
    //Supported parameters are:
    //
    //|Keyword|Description|Supported values|
    //|--|--|---|
    //|`FREQ`|The frequency at which the session is recurs. Required.|`WEEKLY`|
    //|`INTERVAL`|How often, in terms of `FREQ`, the session recurs. Default is 1. Optional.|
    //|`UNTIL`|The UTC end date and time of the recurrence. Optional.|
    //|`BYDAY`|Day of the week when the event should recur. Required.|One of: `MO`, `TU`, `WE`, `TH`, `FR`, `SA`, `SU`|
    //
    //
    // For example, a session that repeats every second week on a Monday until January 7, 2022 at 8 AM:
    //`"FREQ=WEEKLY;INTERVAL=2;BYDAY=MO;UNTIL=20220107T080000Z"`
    //
    // <!--ORIGINAL COMMENTS:
    //  `FREQ` — The frequency with which the session should be repeated (such as DAILY or WEEKLY).  
    // Supported `WEEKLY` value is supported.
    //  INTERVAL — Works together with FREQ to specify how often the session should be repeated. For example, FREQ=WEEKLY;INTERVAL=2 means once every two weeks. Optional. Default value is 1.
    //  COUNT — The number of times this event should be repeated. Not yet supported.
    //  UNTIL — The UTC date & time until which the session should be repeated. This parameter is optional. When it is not specified, the event repeats forever.
    //          The format is a short ISO date, followed by 'T' and a short time with seconds and without milliseconds, terminated by the UTC designator 'Z'. For example, until Jan. 19th 2018 at 7:00 AM: 'UNTIL=20180119T070000Z'.
    //  BYDAY - The days of the week when the event should be repeated. Currently, only a single day is supported. This parameter is mandatory.
    //       Possible values are: MO, TU, WE, TH, FR, SA, SU
    //       Note that DTSTART and DTEND lines are not allowed in this field; session start and end times are specified in the start and end fields.
    //       **Example**: FREQ=WEEKLY;INTERVAL=2;BYDAY=MO;UNTIL=20200427T070000Z
    //ORIGINAL COMMENTS-->
    google.protobuf.StringValue recurrence = 24;
    //A string representing a recurrence rule (RRULE) if the session is an instance of a recurrence pattern.
    //Empty when the session is not an instance of a recurrence rule, or if the session defines a recurrence pattern, and `recurrence` is not empty.
    google.protobuf.StringValue instance_of_recurrence = 25 [(.wix.api.readOnly) = true];
    // An object containing the session and schedule versions.
    Version version = 100 [(.wix.api.readOnly) = true, (.wix.api.field_exposure) = INTERNAL];

    message Version {
        //Schedule version number, updated each time the schedule is updated.
        int32 schedule_version = 1;
        //Session version number, updated each time the session is updated.
        int32 session_version = 2;
    }

    enum Status {
        UNDEFINED = 0;
        //The session is confirmed. Default status.
        CONFIRMED = 1;
        //The session is cancelled.
        //A cancelled session can be the cancellation of a recurring session that should no longer be displayed or a deleted single session.
        //The ListSessions returns cancelled sessions only if 'includeDelete' flag is set to true.
        CANCELLED = 2;
    }
}
