syntax = "proto3";

package com.wixpress.achievements.api.v1;

import "google/api/annotations.proto";
import "google/protobuf/wrappers.proto";
import "com/wixpress/achievements/api/v1/messages.proto";

message CreateChallengeRequest {
    google.protobuf.StringValue prototype_id = 1;
    Challenge.Settings settings = 2;
    string action_id = 3;
}

message CreateChallengeResponse {
    Challenge challenge = 1;
    string action_id = 2;
}

message GetChallengeRequest {
    string challenge_id = 1;
}

message GetChallengeResponse {
    Challenge challenge = 1;
}

message ListChallengesRequest {
    google.protobuf.StringValue member_id = 2;
    repeated MemberRole member_roles = 3;
    repeated Challenge.State states = 4;

    enum MemberRole {
        Owner = 0;
        Participant = 1;
        Viewer = 2;
    }
}

message ListChallengesResponse {
    int32 total_count = 1;
    repeated MemberChallenge member_challenges = 2;

    message MemberChallenge {
        Challenge challenge = 1;
        repeated ParticipantSummary participants = 2;
    }

    message ParticipantSummary {
        string participant_id = 1;
        Participant.State state = 3;
    }
}

message UpdateChallengeRequest {
    string challenge_id = 1;
    string action_id = 4;

    oneof update {
        Challenge.Settings settings = 2;
        Challenge.State state = 3;
    }
}

message UpdateChallengeResponse {
    Challenge challenge = 1;
    string action_id = 2;
}

message DeleteChallengeRequest {
    string challenge_id = 1;
    string action_id = 2;
}

message DeleteChallengeResponse {
    string action_id = 1;
}

message CreateStepRequest {
    string challenge_id = 1;
    string parent_id = 2;
    string prototype_id = 3;
    string action_id = 5;
}

message CreateStepResponse {
    string action_id = 2;
}

message ListStepsRequest {
    string challenge_id = 1;
    string parent_id = 2;
}

message ListStepsResponse {
}

message GetStepRequest {
    string challenge_id = 1;
    string step_id = 2;
}

message GetStepResponse {
}

message UpdateStepRequest {
    string challenge_id = 1;
    string step_id = 2;
    string action_id = 4;
}

message UpdateStepResponse {
    string action_id = 2;
}

message DeleteStepRequest {
    string challenge_id = 1;
    string step_id = 2;
    string action_id = 3;
}

message DeleteStepResponse {
    string action_id = 1;
}

message GetInvitationLinkRequest {
    string challenge_id = 1;
}

message GetInvitationLinkResponse {
    InvitationLink invitation_link = 1;
}

message InvitationLink {
    string url = 1;
}

message ListSampleChallengesRequest {
    string locale = 2;
}

message ListSampleChallengesResponse {
    int32 total_count = 1;
    repeated Challenge challenges = 2;
}

service ChallengesService {
    rpc ListChallenges (ListChallengesRequest) returns (ListChallengesResponse) {
        option (google.api.http) = {
            get: "/api/v1/challenges"
        };
    };

    rpc CreateChallenge (CreateChallengeRequest) returns (CreateChallengeResponse) {
        option (google.api.http) = {
            post: "/api/v1/challenges"
        };
    };

    rpc GetChallenge (GetChallengeRequest) returns (GetChallengeResponse) {
        option (google.api.http) = {
            get: "/api/v1/challenges/{challenge_id}"
        };
    };

    rpc UpdateChallenge (UpdateChallengeRequest) returns (UpdateChallengeResponse) {
        option (google.api.http) = {
            patch: "/api/v1/api/v1/challenges/{challenge_id}"
        };
    };

    rpc DeleteChallenge (DeleteChallengeRequest) returns (DeleteChallengeResponse) {
        option (google.api.http) = {
            delete: "/api/v1/challenges/{challenge_id}"
        };
    };

    rpc ListSteps (ListStepsRequest) returns (ListStepsResponse) {
        option (google.api.http) = {
            get: "/api/v1/challenges/{challenge_id}/steps"
        };
    };

    rpc CreateStep (CreateStepRequest) returns (CreateStepResponse) {
        option (google.api.http) = {
            post: "/api/v1/challenges/{challenge_id}/steps"
        };
    };

    rpc GetStep (GetStepRequest) returns (GetStepResponse) {
        option (google.api.http) = {
            get: "/api/v1/challenges/{challenge_id}/steps/{step_id}"
        };
    };

    rpc UpdateStep (UpdateStepRequest) returns (UpdateStepResponse) {
        option (google.api.http) = {
            patch: "/api/v1/challenges/{challenge_id}/steps/{step_id}"
        };
    };

    rpc DeleteStep (DeleteStepRequest) returns (DeleteStepResponse) {
        option (google.api.http) = {
            delete: "/api/v1/challenges/{challenge_id}/steps/{step_id}"
        };
    };

    rpc GetInvitationLink (GetInvitationLinkRequest) returns (GetInvitationLinkResponse) {
        option (google.api.http) = {
            get: "/api/v1/challenges/{challenge_id}/invitation-link"
        };
    };

    rpc ListSampleChallenges (ListSampleChallengesRequest) returns (ListSampleChallengesResponse) {
        option (google.api.http) = {
            get: "/api/v1/sample-challenges"
        };
    };
}
