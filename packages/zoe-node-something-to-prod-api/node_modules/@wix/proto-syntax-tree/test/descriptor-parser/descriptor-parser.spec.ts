import {generateBinaryFileDescriptor} from '@wix/flynt-protoc';
import * as pb from 'google-protobuf/google/protobuf/descriptor_pb';
import {parsePbFileDescriptorSet} from '../../lib/descriptor-parser/descriptor-parser';

export async function genDescriptor(mainProtoFolder: string) {
  const buffer = await generateBinaryFileDescriptor(mainProtoFolder, {include: ['./include']});
  return buffer;
}

describe('parsePbFileDescriptorSet', () => {
  describe('simple options', () => {
    describe('parsing', () => {
      let fds: pb.FileDescriptorProto[];

      beforeAll(async () => {
        const fdsBytes = await genDescriptor('./test/modules/descriptor-parser/simple-options');
        fds = parsePbFileDescriptorSet([fdsBytes])[0].getFileList();
      });

      describe('primitives', () => {
        it('TYPE_DOUBLE', async () => {
          const optionValue = fds[1].getOptions()!.getExtension<any>(pb.FileOptions.extensions[20001]);
          expect(optionValue).toEqual(2000.1);
        });

        it('TYPE_FLOAT', async () => {
          const optionValue = fds[1].getOptions()!.getExtension<any>(pb.FileOptions.extensions[20002]);
          expect(optionValue).toBeCloseTo(2.0002, 5);
        });

        it('TYPE_INT64', async () => {
          const optionValue = fds[1].getOptions()!.getExtension<any>(pb.FileOptions.extensions[20003]);
          expect(optionValue).toEqual(-20003);
        });

        it('TYPE_UINT64', async () => {
          const optionValue = fds[1].getOptions()!.getExtension<any>(pb.FileOptions.extensions[20004]);
          expect(optionValue).toEqual(20004);
        });

        it('TYPE_INT32', async () => {
          const optionValue = fds[1].getOptions()!.getExtension<any>(pb.FileOptions.extensions[20005]);
          expect(optionValue).toEqual(-20005);
        });

        it('TYPE_FIXED64', async () => {
          const optionValue = fds[1].getOptions()!.getExtension<any>(pb.FileOptions.extensions[20006]);
          expect(optionValue).toEqual(20006);
        });

        it('TYPE_FIXED32', async () => {
          const optionValue = fds[1].getOptions()!.getExtension<any>(pb.FileOptions.extensions[20007]);
          expect(optionValue).toEqual(20007);
        });

        it('TYPE_BOOL', async () => {
          const optionValue = fds[1].getOptions()!.getExtension<any>(pb.FileOptions.extensions[20008]);
          expect(optionValue).toEqual(true);
        });

        it('TYPE_STRING', async () => {
          const optionValue = fds[1].getOptions()!.getExtension<any>(pb.FileOptions.extensions[20009]);
          expect(optionValue).toEqual('20009');
        });

        it('TYPE_BYTES', async () => {
          const optionValue = fds[1].getOptions()!.getExtension<any>(pb.FileOptions.extensions[20010]);
          expect(optionValue).toEqual(Uint8Array.from(Buffer.from('20010')));
        });

        it('TYPE_UINT32', async () => {
          const optionValue = fds[1].getOptions()!.getExtension<any>(pb.FileOptions.extensions[20011]);
          expect(optionValue).toEqual(20011);
        });

        it('TYPE_ENUM', async () => {
          const optionValue = fds[1].getOptions()!.getExtension<any>(pb.FileOptions.extensions[20012]);
          expect(optionValue).toEqual(1);
        });

        it('TYPE_SFIXED32', async () => {
          const optionValue = fds[1].getOptions()!.getExtension<any>(pb.FileOptions.extensions[20013]);
          expect(optionValue).toEqual(20013);
        });

        it('TYPE_SFIXED64', async () => {
          const optionValue = fds[1].getOptions()!.getExtension<any>(pb.FileOptions.extensions[20014]);
          expect(optionValue).toEqual(20014);
        });

        it('TYPE_SINT32', async () => {
          const optionValue = fds[1].getOptions()!.getExtension<any>(pb.FileOptions.extensions[20015]);
          expect(optionValue).toEqual(-20015);
        });

        it('TYPE_SINT64', async () => {
          const optionValue = fds[1].getOptions()!.getExtension<any>(pb.FileOptions.extensions[20016]);
          expect(optionValue).toEqual(-20016);
        });
      });

      describe('repeated', () => {
        it('TYPE_STRING', async () => {
          const optionValue = fds[1].getOptions()!.getExtension<any>(pb.FileOptions.extensions[30009]);
          expect(optionValue).toEqual(['30009.1', '30009.2', '30009.3']);
        });

        it('TYPE_ENUM', async () => {
          const optionValue = fds[1].getOptions()!.getExtension<any>(pb.FileOptions.extensions[30012]);
          expect(optionValue).toEqual([2]);
        });
      });
    });

    describe('option locations', () => {
      let fds: pb.FileDescriptorProto[];
      let file: pb.FileDescriptorProto;

      beforeAll(async () => {
        const fdsBytes = await genDescriptor('./test/modules/descriptor-parser/all-option-locations');
        fds = parsePbFileDescriptorSet([fdsBytes])[0].getFileList();
        file = fds[2];
      });

      it('file', async () => {
        const optionValue = file.getOptions()!.getExtension<any>(pb.FileOptions.extensions[40000]);
        expect(optionValue).toEqual('xyz');
      });

      it('service', async () => {
        const optionValue = file.getServiceList()[0].getOptions()!.getExtension<any>(pb.ServiceOptions.extensions[40000]);
        expect(optionValue).toEqual('xyz');
      });

      it('method', async () => {
        const optionValue = file.getServiceList()[0].getMethodList()[0].getOptions()!.getExtension<any>(pb.MethodOptions.extensions[40000]);
        expect(optionValue).toEqual('xyz');
      });

      it('message', async () => {
        const optionValue = file.getMessageTypeList()[0].getOptions()!.getExtension<any>(pb.MessageOptions.extensions[40000]);
        expect(optionValue).toEqual('xyz');
      });

      it('field', async () => {
        const optionValue = file.getMessageTypeList()[0].getFieldList()[0].getOptions()!.getExtension<any>(pb.FieldOptions.extensions[40000]);
        expect(optionValue).toEqual('xyz');
      });

      it('enum', async () => {
        const optionValue = file.getEnumTypeList()[0].getOptions()!.getExtension<any>(pb.EnumOptions.extensions[40000]);
        expect(optionValue).toEqual('xyz');
      });

      it('enumValue', async () => {
        const optionValue = file.getEnumTypeList()[0].getValueList()[0].getOptions()!.getExtension<any>(pb.EnumValueOptions.extensions[40000]);
        expect(optionValue).toEqual('xyz');
      });

      it('Oneof', async () => {
        const optionValue = file.getMessageTypeList()[0].getOneofDeclList()[0].getOptions()!.getExtension<any>(pb.OneofOptions.extensions[40000]);
        expect(optionValue).toEqual('xyz');
      });
    });
  });

  describe('complex options', () => {
    let fds: pb.FileDescriptorProto[];
    let file: pb.FileDescriptorProto;

    beforeAll(async () => {
      const fdsBytes = await genDescriptor('./test/modules/descriptor-parser/complex-options');
      fds = parsePbFileDescriptorSet([fdsBytes])[0].getFileList();
      file = fds[2];
    });

    it('message', async () => {
      const optionValue = file.getOptions()!.getExtension<any>(pb.FileOptions.extensions[40000]);
      expect(optionValue).toBeDefined();

      expect(optionValue['typeDouble']).toEqual(2000.1);
      expect(optionValue['typeFloat']).toBeCloseTo(2.0002, 5);
      expect(optionValue['typeInt64']).toEqual(-20003);
      expect(optionValue['typeUint64']).toEqual(20004);
      expect(optionValue['typeInt32']).toEqual(-20005);
      expect(optionValue['typeFixed64']).toEqual(20006);
      expect(optionValue['typeFixed32']).toEqual(20007);
      expect(optionValue['typeBool']).toEqual(true);
      expect(optionValue['typeString']).toEqual('20009');
      expect(optionValue['typeBytes']).toEqual(Uint8Array.from(Buffer.from('20010')));
      expect(optionValue['typeUint32']).toEqual(20011);
      expect(optionValue['typeEnum']).toEqual(1);
      expect(optionValue['typeSfixed32']).toEqual(20013);
      expect(optionValue['typeSfixed64']).toEqual(20014);
      expect(optionValue['typeSint32']).toEqual(-20015);
      expect(optionValue['typeSint64']).toEqual(-20016);
      expect(optionValue['repeatedString']).toEqual(['a', 'b', 'c', 'd']);
      expect(optionValue['complex']).toEqual({
        'typeSint64': -20016
      });
      expect(optionValue['emptyRepeatedInt']).toBeUndefined();
    });
  });

  describe('complex proto', () => {
    let fdsBytes: Buffer;

    beforeAll(async () => {
      fdsBytes = await generateBinaryFileDescriptor('./test/modules/very-complex', {include: [
        './include',
        './test/google-includes',
      ]});
    });

    it('parses a very complex proto', async () => {
      expect(() => parsePbFileDescriptorSet([fdsBytes])).not.toThrow();
    });
  });
});
