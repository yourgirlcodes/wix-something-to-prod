import tmp from 'tmp';
import path from 'path';
import fs from 'fs';
import {generateSyntaxTreeFromSource} from '../lib';
import {Enum, EnumValue, Extension, Field, Message, Method, Oneof, ProtoFile, Service, Type} from '../lib/api';
import {Visitor} from '../lib/visitor';

export function proto(strings: TemplateStringsArray, ...expressions: any) {
  return strings.reduce((result, currentString, i) => (
    `${result}${currentString}${expressions[i] || ''}`
  ), '');
}

export async function genSt(proto: string, imports?: string[]) {
  const finalProto = `syntax = "proto3";
package foo.bar;
  ${imports ? imports.map(imp => `import "${imp}";`).join('\n') : ''}
  ${proto}
`;

  const {name: mainProtoFolder} = tmp.dirSync({});
  const protoFile = path.join(mainProtoFolder, 'singleFile.proto');
  fs.writeFileSync(protoFile, finalProto);
  try {
    return await generateSyntaxTreeFromSource(mainProtoFolder);
  } catch (err) {
    console.log(finalProto);
    throw err;
  }
}


export class LoggingVisitor implements Visitor {
  visited: string[] = [];
  skip: Set<string>;

  constructor(skipFqns: string[] = []) {
    this.skip = new Set(skipFqns);
  }

  private log(item: Type) {
    this.visited.push(`${item.fqn} [${item.typeName}]`);
  }

  visitFile(item: ProtoFile) {
    if (this.skip.has(item.fqn)) {
      return false;
    }
    this.log(item);
  }

  visitService(item: Service) {
    if (this.skip.has(item.fqn)) {
      return false;
    }
    this.log(item);
  }

  visitMethod(item: Method) {
    if (this.skip.has(item.fqn)) {
      return false;
    }
    this.log(item);
  }

  visitMessage(item: Message) {
    if (this.skip.has(item.fqn)) {
      return false;
    }
    this.log(item);
  }

  visitField(item: Field) {
    if (this.skip.has(item.fqn)) {
      return false;
    }
    this.log(item);
  }

  visitOneof(item: Oneof) {
    if (this.skip.has(item.fqn)) {
      return false;
    }
    this.log(item);
  }

  visitEnum(item: Enum) {
    if (this.skip.has(item.fqn)) {
      return false;
    }
    this.log(item);
  }

  visitEnumValue(item: EnumValue) {
    if (this.skip.has(item.fqn)) {
      return false;
    }
    this.log(item);
  }

  visitExtension(item: Extension) {
    if (this.skip.has(item.fqn)) {
      return false;
    }
    this.log(item);
  }
}
