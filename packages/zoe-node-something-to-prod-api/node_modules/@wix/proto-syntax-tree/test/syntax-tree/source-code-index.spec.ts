import {LocationIndex} from '../../lib/syntax-tree/source-code-index';

class Location {
  constructor(readonly pathList: number[]) {
  }
}

describe('source-code-index', () => {
  describe('location-index', () => {
    const locationIndex = new LocationIndex([
      new Location([1, 2, 3]),
      new Location([1, 2, 3, 4]),
      new Location([1, 2, 3, 5]),
      new Location([1, 2, 3, 6]),
      new Location([1, 2, 4, 3]),
      new Location([1, 2, 5, 6]),
    ]);

    describe('find location', () => {
      it('by exact path', async () => {
        const location = locationIndex.findByPath([1, 2, 4, 3]);
        expect(location).toBeDefined();
        expect(location!.pathList).toEqual([1, 2, 4, 3]);
      });

      it('by path prefix', async () => {
        const location = locationIndex.findByPathPrefix([1, 2, 3]);
        expect(location).toBeDefined();
        expect(location!.pathList.slice(0, 3)).toEqual([1, 2, 3]);

        const location2 = locationIndex.findByPathPrefix([1, 2, 5]);
        expect(location2).toBeDefined();
        expect(location2!.pathList).toEqual([1, 2, 5, 6]);

      });

      it('by path prefix and multiple possible last element', async () => {
        const location = locationIndex.findByPathPrefixAndLastElements([1, 2, 3], [2, 6]);
        expect(location).toBeDefined();
        expect(location!.pathList).toEqual([1, 2, 3, 6]);

        const location2 = locationIndex.findByPathPrefixAndLastElements([1, 2, 3], [5, 6]);
        expect(location2).toBeDefined();
        expect(location2!.pathList).toEqual([1, 2, 3, 5]);
      });
    });

    describe('does not find location', () => {
      it('by exact path', async () => {
        const location = locationIndex.findByPath([1, 2, 9, 9]);
        expect(location).toBeUndefined();
      });

      it('by path prefix', async () => {
        const location = locationIndex.findByPathPrefix([1, 2, 3, 7]);
        expect(location).toBeUndefined();
      });

      it('by path prefix and multiple possible last element', async () => {
        const location = locationIndex.findByPathPrefixAndLastElements([1, 2, 3], [8, 9]);
        expect(location).toBeUndefined();
      });
    });
  });

});
