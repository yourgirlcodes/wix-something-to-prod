import {initDetailedSourceCode} from '../../lib/syntax-tree/source-code-details';
import {SourceCodeIndex} from '../../lib/syntax-tree/source-code-index';
import {SourceCodeContainer} from '../../lib/api';

describe('source code details', () => {

  it('retrieving mySourceCodeInfo calls getSourceCodeInfoByPath', async () => {
    const fake = new FakeSourceCodeIndex();
    const fakeContainer = {fqn: 'x'} as SourceCodeContainer;
    const pathInfo = {fullPath: [6, 6, 6]};
    const det = initDetailedSourceCode(pathInfo, fake, fakeContainer);
    const spy = jest.spyOn(fake, 'getSourceCodeInfoByPath');

    const _sc = det.mySourceCodeInfo;
    expect(spy).toHaveBeenCalledWith(pathInfo, fakeContainer);
  });

  it('retrieving source code details calls getSourceCodeInfoBySubPath', async () => {
    const fake = new FakeSourceCodeIndex();
    const pathInfo = {fullPath: [6, 6, 6]};
    const fakeContainer = {fqn: 'x'} as SourceCodeContainer;
    const det = initDetailedSourceCode(pathInfo, fake, fakeContainer, {
      'key1': 2,
      'key2': 1,
    });
    const spy = jest.spyOn(fake, 'getSourceCodeInfoBySubPath');

    const _sc = det.key2;
    expect(spy).toHaveBeenCalledWith(pathInfo, fakeContainer, 'key2', 1);
  });

  it('retrieving source code details with multiple subPaths calls getSourceCodeInfoBySubPaths', async () => {
    const fake = new FakeSourceCodeIndex();
    const pathInfo = {fullPath: [6, 6, 6]};
    const fakeContainer = {fqn: 'x'} as SourceCodeContainer;
    const det = initDetailedSourceCode(pathInfo, fake, fakeContainer, {
      'key1': 2,
      'key2': [5, 1],
    });
    const spy = jest.spyOn(fake, 'getSourceCodeInfoBySubPaths');

    const _sc = det.key2;
    expect(spy).toHaveBeenCalledWith(pathInfo, fakeContainer, 'key2', [5, 1]);
  });
});

class FakeSourceCodeIndex implements SourceCodeIndex {
  getSourceCodeInfoByPath() {
    return undefined as any;
  }

  getSourceCodeInfoByPathPrefix() {
    return undefined as any;
  }

  getSourceCodeInfoBySubPath() {
    return undefined as any;
  }

  getSourceCodeInfoBySubPaths() {
    return undefined as any;
  }
}
