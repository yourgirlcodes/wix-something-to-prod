import {readFile} from 'fs/promises';
import path from 'path';
import debug from 'debug';
import assert from 'assert';
import {SyntaxTree} from './api';
import {buildSyntaxTree, GetFileInfo} from './syntax-tree';
import {parseFileDescriptorSet} from './descriptor-parser/descriptor-parser';
import {FileDescriptorSet} from './descriptor';

const log = debug('wix:flynt:syntax-tree');

export interface GenSyntaxTreeOptions {
  includeStdProtos?: boolean;
}

export function getStdIncludeProtos() {
  return [
    path.resolve(path.join(__dirname, '../include')),
    path.resolve(path.dirname(require.resolve('@wix/extensions/package.json')), 'src', 'main', 'proto'),
  ];
}

function addMainDescriptor(descriptorsFiles: string[], mainDescriptorFile: string): string[] {
  const mainDescIndex = descriptorsFiles.indexOf(mainDescriptorFile);
  if (mainDescIndex === -1) {
    return [...descriptorsFiles, mainDescriptorFile];
  } else {
    assert(mainDescIndex === descriptorsFiles.length - 1, 'mainDescriptor should be last in descriptorsFiles');
  }
  return descriptorsFiles;
}

function genGetFileInfoFuncForProtoFiles(mainProtoFolder: string, protoFiles: string[]): GetFileInfo {
  const mainProtoFileNames = new Set<string>(protoFiles.map(protoFile => {
    if (protoFile.startsWith(mainProtoFolder)) {
      return path.relative(mainProtoFolder, protoFile);
    }
    return protoFile;
  }));

  return (protoFileName) => {
    if (mainProtoFileNames.has(protoFileName)) {
      return {
        fromInclude: false,
        path: path.resolve(mainProtoFolder, protoFileName),
      };
    } else {
      return {
        fromInclude: true,
        path: protoFileName,
      };
    }
  };
}

export function generateSyntaxTreeFromDescriptorSets(fileDescriptorSet: FileDescriptorSet[], mainProtoFolder: string) {
  const mainDescriptor = fileDescriptorSet[fileDescriptorSet.length - 1];
  const getFileInfo: GetFileInfo = genGetFileInfoFuncForProtoFiles(mainProtoFolder, Array.from(mainDescriptor.fileList, f => f.name));
  const syntaxTree = buildSyntaxTree(fileDescriptorSet, {getFileInfo});
  return syntaxTree;
}

export function generateSyntaxTreeFromDescriptorBuffers(descriptors: Buffer[], mainProtoFolder: string) {
  log('parse file descriptors');
  const fileDescriptorSet = parseFileDescriptorSet(descriptors);

  log('building syntax tree');
  const syntaxTree = generateSyntaxTreeFromDescriptorSets(fileDescriptorSet, mainProtoFolder);

  log('done building syntax tree');
  return syntaxTree;
}

export async function generateSyntaxTreeFromDescriptorFiles(mainDescriptorFile: string, mainProtoFolder: string, includeDescriptorFiles: string[]): Promise<SyntaxTree> {
  const descriptorFiles = addMainDescriptor(includeDescriptorFiles, mainDescriptorFile);
  log('reading file descriptors, count:', descriptorFiles.length);
  const descriptors = await Promise.all(descriptorFiles.map(fileName => readFile(fileName)));
  return generateSyntaxTreeFromDescriptorBuffers(descriptors, mainProtoFolder);
}

// This is used mainly in tests because the signature is convenient when you need to parse a single folder
export async function generateSyntaxTreeFromSource(mainProtoFolder: string, include: string[] = []): Promise<SyntaxTree> {
  return generateSyntaxTreeFrom({mainProtoFolder, include, includeStdProtos: true});
}

export type GenSyntaxTreeFromSourceOptions = {
  mainProtoFolder: string;
  protoFiles?: string[];
  include: string[];
  includeStdProtos?: boolean;
};

export async function generateSyntaxTreeFrom(opts: GenSyntaxTreeFromSourceOptions): Promise<SyntaxTree> {
  const include = [...opts.include];
  if (opts.includeStdProtos) {
    include.push(...getStdIncludeProtos());
  }
  log('generating file descriptor', {mainProtoFolder: opts.mainProtoFolder});
  const {generateBinaryFileDescriptorFromProtoFiles, getProtoFiles} = await import('@wix/flynt-protoc');
  const protoFiles = opts.protoFiles ?? await getProtoFiles(opts.mainProtoFolder);
  if (!opts.protoFiles) {
    include.unshift(opts.mainProtoFolder);
  }
  const fdsBinary = await generateBinaryFileDescriptorFromProtoFiles({include, protoFiles});

  const fileDescriptorSet = parseFileDescriptorSet([fdsBinary]);

  log('building syntax tree');

  const getFileInfo: GetFileInfo = genGetFileInfoFuncForProtoFiles(opts.mainProtoFolder, protoFiles);
  const syntaxTree = buildSyntaxTree(fileDescriptorSet, {getFileInfo});

  log('done building syntax tree');
  return syntaxTree;
}
