import * as pb from 'google-protobuf/google/protobuf/descriptor_pb';
import {ExtensionFieldInfo, Message} from 'google-protobuf';
import {
  CustomOptions,
  DescriptorProto,
  EnumDescriptorProto,
  EnumOptions,
  EnumReservedRange,
  EnumValueDescriptorProto,
  EnumValueOptions,
  ExtensionRange,
  FieldDescriptorProto,
  FieldOptions,
  FileDescriptorProto,
  FileDescriptorSet,
  FileOptions,
  Location,
  MessageOptions,
  MethodDescriptorProto,
  MethodOptions,
  OneofDescriptorProto,
  OneofOptions,
  ReservedRange,
  ServiceDescriptorProto,
  ServiceOptions,
  SourceCodeInfo
} from '../descriptor';

export function asFileDescriptorSet(descriptor: pb.FileDescriptorSet): FileDescriptorSet {
  return new FileDescriptorSetAdapter(descriptor);
}

function* adapt<T, U>(iterable: Iterable<T>, Adapter: new (t: T) => U): Iterable<U> {
  for (const t of iterable) {
    yield new Adapter(t);
  }
}

function optionsAdapter<T, U>(Adapter: new (t: T, e: Extensions) => U, opts: T | undefined, optClass: typeof Message): U | undefined {
  if (opts) {
    return new Adapter(opts, optClass.extensions);
  }
}

function isIterable(obj: any) {
  if (typeof obj === 'object') {
    return typeof obj[Symbol.iterator] === 'function';
  }
  return false;
}

function propertiesToJSON(obj: Record<string, any>) {
  const result = {} as Record<string, any>;
  const thisAsKv = obj;
  const props = Object.getOwnPropertyNames(Object.getPrototypeOf(obj)).sort();
  for (const prop of props) {
    const val = thisAsKv[prop];
    if (typeof val !== 'function') {
      if (isIterable(val)) {
        result[prop] = [...val];
      } else {
        result[prop] = val;
      }
    }
  }
  return result;
}

class BaseDescriptorAdapter {
  toJSON() {
    return propertiesToJSON(this);
  }
}

class FileDescriptorSetAdapter extends BaseDescriptorAdapter implements FileDescriptorSet {
  constructor(private readonly descriptor: pb.FileDescriptorSet) {
    super();
  }

  get fileList() {
    return adapt(this.descriptor.getFileList(), FileDescriptorProtoAdapter);
  }
}

type Extensions = {[key: string]: ExtensionFieldInfo<Message>};

class BaseOptionsAdapter<T extends Message> {
  constructor(protected readonly options: T, private readonly extensions: Extensions) {
  }

  toJSON() {
    return {
      ...propertiesToJSON(this),
      customOptions: this.customOptions,
    };
  }

  get customOptions(): CustomOptions {
    return new CustomOptionsAdapter(this.options, this.extensions);
  }
}

class CustomOptionsAdapter implements CustomOptions {
  constructor(options: Message, extensions: Extensions) {
    return new Proxy(this, {
      set() {
        return false;
      },

      get(target, propName: string): any {
        const fieldInfo = extensions[propName];
        if (fieldInfo) {
          return options.getExtension(fieldInfo);
        }
      },

      getOwnPropertyDescriptor(target, propName: string): PropertyDescriptor | undefined {
        const fieldInfo = extensions[propName];
        if (fieldInfo) {
          const val = options.getExtension<any>(fieldInfo);
          if (val !== undefined) {
            if (fieldInfo.isRepeated) {
              if (val.length) {
                return {configurable: true, enumerable: true};
              }
            } else {
              return {configurable: true, enumerable: true};
            }
          }
        }
      },

      ownKeys(): ArrayLike<string | symbol> {
        const result = [];
        for (const extensionNumber in extensions) {
          result.push(extensionNumber);
        }
        return result;
      }

    });
  }

  [p: number]: any;
}

class FileDescriptorProtoAdapter extends BaseDescriptorAdapter implements FileDescriptorProto {
  constructor(private readonly descriptor: pb.FileDescriptorProto) {
    super();
  }

  get name() {
    return this.descriptor.getName()!;
  }

  get package() {
    return this.descriptor.getPackage()!;
  }

  get syntax() {
    return this.descriptor.getSyntax()!;
  }

  get enumTypeList() {
    return adapt(this.descriptor.getEnumTypeList(), EnumDescriptorProtoAdapter);
  }

  get extensionList() {
    return adapt(this.descriptor.getExtensionList(), FieldDescriptorProtoAdapter);
  }

  get messageTypeList() {
    return adapt(this.descriptor.getMessageTypeList(), DescriptorProtoAdapter);
  }

  get options() {
    return optionsAdapter(FileOptionsAdapter, this.descriptor.getOptions(), pb.FileOptions);
  }

  get serviceList() {
    return adapt(this.descriptor.getServiceList(), ServiceDescriptorProtoAdapter);
  }

  get sourceCodeInfo() {
    if (this.descriptor.getSourceCodeInfo) {
      const scInfo = this.descriptor.getSourceCodeInfo();
      if (scInfo) {
        return new SourceCodeInfoAdapter(scInfo);
      }
    }
  }
}

class FileOptionsAdapter extends BaseOptionsAdapter<pb.FileOptions> implements FileOptions {
  get ccEnableArenas() {
    if (this.options.hasCcEnableArenas()) {
      return this.options.getCcEnableArenas();
    }
  }

  get ccGenericServices() {
    if (this.options.hasCcGenericServices()) {
      return this.options.getCcGenericServices();
    }
  }

  get csharpNamespace() {
    if (this.options.hasCsharpNamespace()) {
      return this.options.getCsharpNamespace();
    }
  }

  get deprecated() {
    if (this.options.getDeprecated()) {
      return this.options.getDeprecated()!;
    }
  }

  get goPackage() {
    if (this.options.hasGoPackage()) {
      return this.options.getGoPackage();
    }
  }

  get javaGenerateEqualsAndHash() {
    if (this.options.hasJavaGenerateEqualsAndHash()) {
      return this.options.getJavaGenerateEqualsAndHash();
    }
  }

  get javaGenericServices() {
    if (this.options.hasJavaGenericServices()) {
      return this.options.getJavaGenericServices();
    }
  }

  get javaMultipleFiles() {
    if (this.options.hasJavaMultipleFiles()) {
      return this.options.getJavaMultipleFiles();
    }
  }

  get javaOuterClassname() {
    if (this.options.hasJavaOuterClassname()) {
      return this.options.getJavaOuterClassname();
    }
  }

  get javaPackage() {
    if (this.options.hasJavaPackage()) {
      return this.options.getJavaPackage();
    }
  }

  get javaStringCheckUtf8() {
    if (this.options.hasJavaStringCheckUtf8()) {
      return this.options.getJavaStringCheckUtf8();
    }
  }

  get objcClassPrefix() {
    if (this.options.hasObjcClassPrefix()) {
      return this.options.getObjcClassPrefix();
    }
  }

  get optimizeFor() {
    if (this.options.hasOptimizeFor()) {
      return this.options.getOptimizeFor();
    }
  }

  get phpClassPrefix() {
    if (this.options.hasPhpClassPrefix()) {
      return this.options.getPhpClassPrefix();
    }
  }

  get phpGenericServices() {
    if (this.options.hasPhpGenericServices()) {
      return this.options.getPhpGenericServices();
    }
  }

  get phpMetadataNamespace() {
    if (this.options.hasPhpMetadataNamespace()) {
      return this.options.getPhpMetadataNamespace();
    }
  }

  get phpNamespace() {
    if (this.options.hasPhpNamespace()) {
      return this.options.getPhpNamespace();
    }
  }

  get pyGenericServices() {
    if (this.options.hasPyGenericServices()) {
      return this.options.getPyGenericServices();
    }
  }

  get rubyPackage() {
    if (this.options.hasRubyPackage()) {
      return this.options.getRubyPackage();
    }
  }

  get swiftPrefix() {
    if (this.options.hasSwiftPrefix()) {
      return this.options.getSwiftPrefix();
    }
  }
}

class DescriptorProtoAdapter extends BaseDescriptorAdapter implements DescriptorProto {
  constructor(private readonly descriptor: pb.DescriptorProto) {
    super();
  }

  get name() {
    return this.descriptor.getName()!;
  }

  get enumTypeList() {
    return adapt(this.descriptor.getEnumTypeList(), EnumDescriptorProtoAdapter);
  }

  get extensionList() {
    return adapt(this.descriptor.getExtensionList(), FieldDescriptorProtoAdapter);
  }

  get extensionRangeList() {
    return adapt(this.descriptor.getExtensionRangeList(), ExtensionRangeAdapter);
  }

  get fieldList() {
    return adapt(this.descriptor.getFieldList(), FieldDescriptorProtoAdapter);
  }

  get nestedTypeList() {
    return adapt(this.descriptor.getNestedTypeList(), DescriptorProtoAdapter);
  }

  get oneofDeclList() {
    return adapt(this.descriptor.getOneofDeclList(), OneofDescriptorProtoAdapter);
  }

  get options() {
    return optionsAdapter(MessageOptionsAdapter, this.descriptor.getOptions(), pb.MessageOptions);
  }

  get reservedNameList() {
    return this.descriptor.getReservedNameList();
  }

  get reservedRangeList() {
    return adapt(this.descriptor.getReservedRangeList(), ReservedRangeAdapter);
  }
}

class MessageOptionsAdapter extends BaseOptionsAdapter<pb.MessageOptions> implements MessageOptions {
  get deprecated() {
    if (this.options.getDeprecated()) {
      return this.options.getDeprecated();
    }
  }

  get mapEntry() {
    if (this.options.hasMapEntry()) {
      return this.options.getMapEntry();
    }
  }

  get messageSetWireFormat() {
    if (this.options.hasMessageSetWireFormat()) {
      return this.options.getMessageSetWireFormat();
    }
  }

  get noStandardDescriptorAccessor() {
    if (this.options.getNoStandardDescriptorAccessor()) {
      return this.options.getNoStandardDescriptorAccessor();
    }
  }
}

class FieldDescriptorProtoAdapter extends BaseDescriptorAdapter implements FieldDescriptorProto {
  constructor(private readonly descriptor: pb.FieldDescriptorProto) {
    super();
  }

  get defaultValue() {
    if (this.descriptor.hasDefaultValue()) {
      return this.descriptor.getDefaultValue();
    }
  }

  get extendee() {
    if (this.descriptor.hasExtendee()) {
      return this.descriptor.getExtendee()!;
    }
  }

  get jsonName() {
    return this.descriptor.getJsonName()!;
  }

  get label() {
    return this.descriptor.getLabel()!;
  }

  get name() {
    return this.descriptor.getName()!;
  }

  get number() {
    return this.descriptor.getNumber()!;
  }

  get oneofIndex() {
    if (this.descriptor.hasOneofIndex()) {
      return this.descriptor.getOneofIndex()!;
    }
  }

  get proto3Optional() {
    if (this.descriptor.hasProto3Optional()) {
      return this.descriptor.getProto3Optional()!;
    }
  }

  get type() {
    return this.descriptor.getType()!;
  }

  get typeName() {
    if (this.descriptor.hasTypeName()) {
      return this.descriptor.getTypeName()!;
    }
  }

  get options() {
    return optionsAdapter(FieldOptionsAdapter, this.descriptor.getOptions(), pb.FieldOptions);
  }
}

class FieldOptionsAdapter extends BaseOptionsAdapter<pb.FieldOptions> implements FieldOptions {
  get ctype() {
    if (this.options.hasCtype()) {
      return this.options.getCtype();
    }
  }

  get deprecated() {
    if (this.options.getDeprecated()) {
      return this.options.getDeprecated()!;
    }
  }

  get jstype() {
    if (this.options.hasJstype()) {
      return this.options.getJstype();
    }
  }

  get lazy() {
    if (this.options.hasLazy()) {
      return this.options.getLazy();
    }
  }

  get packed() {
    if (this.options.hasPacked()) {
      return this.options.getPacked();
    }
  }

  get weak() {
    if (this.options.hasWeak()) {
      return this.options.getWeak();
    }
  }
}

class EnumDescriptorProtoAdapter extends BaseDescriptorAdapter implements EnumDescriptorProto {
  constructor(private readonly descriptor: pb.EnumDescriptorProto) {
    super();
  }

  get name() {
    return this.descriptor.getName()!;
  }

  get reservedNameList() {
    return this.descriptor.getReservedNameList();
  }

  get reservedRangeList() {
    return adapt(this.descriptor.getReservedRangeList(), EnumReservedRangeAdapter);
  }

  get valueList() {
    return adapt(this.descriptor.getValueList(), EnumValueDescriptorProtoAdapter);
  }

  get options() {
    return optionsAdapter(EnumOptionsAdapter, this.descriptor.getOptions(), pb.EnumOptions);
  }
}

class EnumOptionsAdapter extends BaseOptionsAdapter<pb.EnumOptions> implements EnumOptions {
  get allowAlias() {
    if (this.options.hasAllowAlias()) {
      return this.options.getAllowAlias();
    }
  }

  get deprecated() {
    if (this.options.getDeprecated()) {
      return this.options.getDeprecated();
    }
  }
}

class ServiceDescriptorProtoAdapter extends BaseDescriptorAdapter implements ServiceDescriptorProto {
  constructor(private readonly descriptor: pb.ServiceDescriptorProto) {
    super();
  }

  get methodList() {
    return adapt(this.descriptor.getMethodList(), MethodDescriptorProtoAdapter);
  }

  get name() {
    return this.descriptor.getName()!;
  }

  get options() {
    return optionsAdapter(ServiceOptionsAdapter, this.descriptor.getOptions(), pb.ServiceOptions);
  }
}

class ServiceOptionsAdapter extends BaseOptionsAdapter<pb.ServiceOptions> implements ServiceOptions {
  get deprecated() {
    if (this.options.getDeprecated()) {
      return this.options.getDeprecated();
    }
  }
}

class MethodDescriptorProtoAdapter extends BaseDescriptorAdapter implements MethodDescriptorProto {
  constructor(private readonly descriptor: pb.MethodDescriptorProto) {
    super();
  }

  get clientStreaming() {
    if (this.descriptor.hasClientStreaming()) {
      return this.descriptor.getClientStreaming()!;
    }
  }

  get inputType() {
    return this.descriptor.getInputType()!;
  }

  get name() {
    return this.descriptor.getName()!;
  }

  get outputType() {
    return this.descriptor.getOutputType()!;
  }

  get serverStreaming() {
    if (this.descriptor.hasServerStreaming()) {
      return this.descriptor.getServerStreaming()!;
    }
  }

  get options() {
    return optionsAdapter(MethodOptionsAdapter, this.descriptor.getOptions(), pb.MethodOptions);
  }
}

class MethodOptionsAdapter extends BaseOptionsAdapter<pb.MethodOptions> implements MethodOptions {
  get deprecated() {
    if (this.options.hasDeprecated()) {
      return this.options.getDeprecated();
    }
  }

  get idempotencyLevel() {
    if (this.options.hasIdempotencyLevel()) {
      return this.options.getIdempotencyLevel();
    }
  }
}

class OneofDescriptorProtoAdapter extends BaseDescriptorAdapter implements OneofDescriptorProto {
  constructor(private readonly descriptor: pb.OneofDescriptorProto) {
    super();
  }

  get name() {
    return this.descriptor.getName()!;
  }

  get options() {
    return optionsAdapter(EmptyOptionsAdapter, this.descriptor.getOptions(), pb.OneofOptions);
  }
}

class EmptyOptionsAdapter extends BaseOptionsAdapter<pb.OneofOptions> implements OneofOptions {
}

class EnumValueDescriptorProtoAdapter extends BaseDescriptorAdapter implements EnumValueDescriptorProto {
  constructor(private readonly descriptor: pb.EnumValueDescriptorProto) {
    super();
  }

  get name() {
    return this.descriptor.getName()!;
  }

  get number() {
    return this.descriptor.getNumber()!;
  }

  get options() {
    return optionsAdapter(EnumValueOptionsAdapter, this.descriptor.getOptions(), pb.EnumValueOptions);
  }
}

class EnumValueOptionsAdapter extends BaseOptionsAdapter<pb.EnumValueOptions> implements EnumValueOptions {
  get deprecated() {
    if (this.options.hasDeprecated()) {
      return this.options.getDeprecated();
    }
  }
}

class SourceCodeInfoAdapter extends BaseDescriptorAdapter implements SourceCodeInfo {
  constructor(private readonly sourceCodeInfo: pb.SourceCodeInfo) {
    super();
  }

  get locationList() {
    return adapt(this.sourceCodeInfo.getLocationList(), LocationAdapter);
  }
}

class LocationAdapter extends BaseDescriptorAdapter implements Location {
  constructor(private readonly location: pb.SourceCodeInfo.Location) {
    super();
  }

  get leadingComments() {
    return this.location.getLeadingComments()!;
  }

  get leadingDetachedCommentsList() {
    return this.location.getLeadingDetachedCommentsList();
  }

  get pathList() {
    return this.location.getPathList();
  }

  get spanList() {
    return this.location.getSpanList();
  }

  get trailingComments() {
    return this.location.getTrailingComments()!;
  }
}

class ExtensionRangeAdapter extends BaseDescriptorAdapter implements ExtensionRange {
  constructor(private readonly extensionRange: pb.DescriptorProto.ExtensionRange) {
    super();
  }

  get end() {
    return this.extensionRange.getEnd()!;
  }

  get start() {
    return this.extensionRange.getStart()!;
  }

  get options() {
    return optionsAdapter(EmptyOptionsAdapter, this.extensionRange.getOptions(), pb.ExtensionRangeOptions);
  }
}

class ReservedRangeAdapter extends BaseDescriptorAdapter implements ReservedRange {
  constructor(private readonly reservedRange: pb.DescriptorProto.ReservedRange) {
    super();
  }

  get end() {
    return this.reservedRange.getEnd()!;
  }

  get start() {
    return this.reservedRange.getStart()!;
  }
}

class EnumReservedRangeAdapter extends BaseDescriptorAdapter implements EnumReservedRange {
  constructor(private readonly reservedRange: pb.EnumDescriptorProto.EnumReservedRange) {
    super();
  }

  get end() {
    return this.reservedRange.getEnd()!;
  }

  get start() {
    return this.reservedRange.getStart()!;
  }
}
