import {OptionType, Field, Message, Oneof, TypeName} from '../api';
import {BaseType} from './base-type';
import {SyntaxTreeImpl} from './index';
import {OptionsImpl} from './options';
import {OneofDescriptorPath} from './descriptor-paths';
import {PathInfo, pInfo, SourceCodeIndex} from './source-code-index';
import {DetailedSourceCode, initDetailedSourceCode} from './source-code-details';
import {OneofDescriptorProto} from '../descriptor';

export class OneofImpl extends BaseType implements Oneof {
  readonly typeName = TypeName.Oneof;
  readonly detailedSourceCode: DetailedSourceCode<'name'>;
  private readonly descriptor: OneofDescriptorProto;

  constructor(
    readonly st: SyntaxTreeImpl,
    descriptor: OneofDescriptorProto,
    parent: Message,
    pathInfo: PathInfo,
    sourceIdx: SourceCodeIndex,
  ) {
    super(descriptor, parent);
    this.descriptor = descriptor;
    this.parent = parent;
    this.options = new OptionsImpl(st, {options: descriptor.options, optionType: OptionType.OneofOptions}, this,
      pInfo(pathInfo, OneofDescriptorPath.options), sourceIdx);

    this.detailedSourceCode = initDetailedSourceCode(pathInfo, sourceIdx, this, {
      'name': OneofDescriptorPath.name,
    });
    st.addType(this);
  }

  addField(field: Field) {
    this.fields.push(field);
  }

  get file() {
    return this.parent.file;
  }

  toJSON() {
    return {
      typeName: this.typeName,
      name: this.name,
      options: this.options.allOptions,
      fields: this.fields.map(f => f.name),
    };
  }

  readonly fields: Field[] = [];
  readonly parent: Message;
  readonly options: OptionsImpl<OptionType.OneofOptions>;
}
