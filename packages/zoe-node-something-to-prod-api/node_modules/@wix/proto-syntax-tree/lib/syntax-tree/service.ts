import {OptionType, ProtoFile, Service, TypeName} from '../api';
import {BaseType} from './base-type';
import {SyntaxTreeImpl} from './index';
import {MethodImpl} from './method';
import {ServiceDescriptorPath} from './descriptor-paths';
import {OptionsImpl} from './options';
import {PathInfo, pInfo, SourceCodeIndex} from './source-code-index';
import {DetailedSourceCode, initDetailedSourceCode} from './source-code-details';
import {ServiceDescriptorProto} from '../descriptor';

export class ServiceImpl extends BaseType implements Service {
  readonly typeName = TypeName.Service;
  readonly detailedSourceCode: DetailedSourceCode<'name'>;
  private readonly descriptor: ServiceDescriptorProto;

  constructor(
    readonly st: SyntaxTreeImpl,
    descriptor: ServiceDescriptorProto,
    parent: ProtoFile,
    pathInfo: PathInfo,
    sourceIdx: SourceCodeIndex,
  ) {
    super(descriptor, parent);
    this.descriptor = descriptor;
    this.parent = parent;
    this.options = new OptionsImpl(st, {options: descriptor.options, optionType: OptionType.ServiceOptions}, this,
      pInfo(pathInfo, ServiceDescriptorPath.options), sourceIdx);

    this.detailedSourceCode = initDetailedSourceCode(pathInfo, sourceIdx, this, {
      'name': ServiceDescriptorPath.name,
    });

    st.addType(this);

    this.methods = [];
    let i = 0;
    for (const methodDescriptor of descriptor.methodList) {
      const method = new MethodImpl(st, methodDescriptor, this, pInfo(pathInfo, ServiceDescriptorPath.method, i++), sourceIdx);
      this.methods.push(method);
    }
  }

  get file() {
    return this.parent.file;
  }

  toJSON() {
    return {
      typeName: this.typeName,
      name: this.name,
      options: this.options.allOptions,
      methods: this.methods,
    };
  }

  readonly methods: MethodImpl[];
  readonly parent: ProtoFile;
  readonly options: OptionsImpl<OptionType.ServiceOptions>;
}
