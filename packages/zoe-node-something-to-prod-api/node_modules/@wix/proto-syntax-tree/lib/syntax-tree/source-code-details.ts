import {SourceCodeContainer, SourceCodeInfo} from '../api';
import {PathInfo, SourceCodeIndex} from './source-code-index';

export interface DetailedSourceCodeInfo {
  readonly mySourceCodeInfo: SourceCodeInfo;
}

class DetailedSourceCodeImpl implements DetailedSourceCodeInfo {
  constructor(
    private readonly pathInfo: PathInfo,
    private readonly sourceIdx: SourceCodeIndex,
    private readonly container: SourceCodeContainer,
    details?: {[key: string]: number | number[]},
  ) {
    if (details) {
      for (const [key, val] of Object.entries(details)) {
        if (Array.isArray(val)) {
          Object.defineProperty(this, key, {
            get: () => {
              return this.sourceIdx.getSourceCodeInfoBySubPaths(this.pathInfo, this.container, key, val);
            }
          });
        } else {
          Object.defineProperty(this, key, {
            get: () => {
              return this.sourceIdx.getSourceCodeInfoBySubPath(this.pathInfo, this.container, key, val);
            }
          });
        }
      }
    }
  }

  get mySourceCodeInfo(): SourceCodeInfo {
    return this.sourceIdx.getSourceCodeInfoByPath(this.pathInfo, this.container);
  }
}

export type DetailedSourceCode<T extends keyof any> = DetailedSourceCodeInfo & Record<T, SourceCodeInfo>;

export function initDetailedSourceCode<T extends {[key: string]: number | number[]}>(pathInfo: PathInfo, sourceIdx: SourceCodeIndex, container: SourceCodeContainer, details?: T): DetailedSourceCode<keyof T> {
  return new DetailedSourceCodeImpl(pathInfo, sourceIdx, container, details) as unknown as DetailedSourceCode<keyof T>;
}
