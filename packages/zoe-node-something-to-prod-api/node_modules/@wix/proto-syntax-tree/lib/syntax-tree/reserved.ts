import {Reserved, Range} from '../api';

abstract class BaseReservedImpl implements Reserved {
  constructor(private readonly descriptor: {reservedRangeList: Iterable<Range>; reservedNameList: Iterable<string>}) {
  }

  get reservedNames(): Iterable<string> {
    return this.descriptor.reservedNameList;
  }

  get reservedNumbers(): Iterable<Range> {
    return this.descriptor.reservedRangeList;
  }

  isReservedName(name: string): boolean {
    for (const resName of this.reservedNames) {
      if (resName === name) {
        return true;
      }
    }
    return false;
  }

  isReservedNumber(num: number): boolean {
    for (const range of this.reservedNumbers) {
      if (this.isNumInRange(num, range)) {
        return true;
      }
    }
    return false;
  }

  protected abstract isNumInRange(num: number, range: Range): boolean;
}


export class ReservedWithExclusiveRange extends BaseReservedImpl {
  protected isNumInRange(num: number, range: Range): boolean {
    return num >= range.start && num < range.end;
  }

}

export class ReservedWithInclusiveRange extends BaseReservedImpl {
  protected isNumInRange(num: number, range: Range): boolean {
    return num >= range.start && num <= range.end;
  }

}
