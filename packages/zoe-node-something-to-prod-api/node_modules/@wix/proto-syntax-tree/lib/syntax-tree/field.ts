import {BaseType} from './base-type';
import * as pb from 'google-protobuf/google/protobuf/descriptor_pb';
import {SyntaxTreeImpl} from './index';
import {OptionType, Field, Fields, FieldType, Message, Oneof, TypeName,} from '../api';
import {FieldTypeFactory} from './field-type';
import {OptionsImpl} from './options';
import {FieldDescriptorPath} from './descriptor-paths';
import {PathInfo, pInfo, SourceCodeIndex} from './source-code-index';
import {DetailedSourceCode, initDetailedSourceCode} from './source-code-details';
import {OneofImpl} from './one-of';
import {FieldDescriptorProto} from '../descriptor';

export class FieldsImpl extends Array<Field> implements Fields {
  byName(fieldName: string) {
    return this.find(f => f.name === fieldName);
  }
}

export class FieldImpl extends BaseType implements Field {
  readonly typeName = TypeName.Field;
  private _fieldType?: FieldType;
  readonly detailedSourceCode: DetailedSourceCode<'name' | 'label' | 'number' | 'type'>;
  private readonly descriptor: FieldDescriptorProto;

  constructor(
    readonly st: SyntaxTreeImpl,
    descriptor: FieldDescriptorProto,
    parent: Message,
    pathInfo: PathInfo,
    sourceIdx: SourceCodeIndex,
  ) {
    super(descriptor, parent);
    this.descriptor = descriptor;
    this.parent = parent;
    this.options = new OptionsImpl(st, {options: descriptor.options, optionType: OptionType.FieldOptions}, this,
      pInfo(pathInfo, FieldDescriptorPath.options), sourceIdx);

    this.detailedSourceCode = initDetailedSourceCode(pathInfo, sourceIdx, this, {
      'name': FieldDescriptorPath.name,
      'label': FieldDescriptorPath.label,
      'number': FieldDescriptorPath.number,
      'type': [FieldDescriptorPath.type, FieldDescriptorPath.typeName],
    });

    const oneofIndex = descriptor.oneofIndex;
    if (oneofIndex !== undefined) {
      const oneOf = parent.oneofs[oneofIndex] as OneofImpl;
      this.oneof = oneOf;
      oneOf.addField(this);
    }

    st.addType(this);
  }

  get fieldType(): FieldType {
    if (!this._fieldType) {
      this._fieldType = FieldTypeFactory.createFieldTypeFromDescriptor(this.st, this.descriptor);
    }
    return this._fieldType;
  }

  get file() {
    return this.parent.file;
  }

  get number(): number {
    return this.descriptor.number;
  }

  get jsonName(): string {
    return this.descriptor.jsonName;
  }

  get proto2Optional(): boolean {
    return this.descriptor.label === pb.FieldDescriptorProto.Label.LABEL_OPTIONAL;
  }

  get proto3Optional(): boolean {
    return this.descriptor.proto3Optional === true;
  }

  toJSON() {
    return {
      typeName: this.typeName,
      name: this.name,
      options: this.options.allOptions,
      number: this.number,
      fieldType: this.fieldType,
      jsonName: this.jsonName,
      proto2Optional: this.proto2Optional,
      proto3Optional: this.proto3Optional,
    };
  }

  readonly parent: Message;
  readonly oneof?: Oneof;
  readonly options: OptionsImpl<OptionType.FieldOptions>;
}
