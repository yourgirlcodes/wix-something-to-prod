import {Enum, OptionType, Message, ProtoFile, Reserved, TypeName} from '../api';
import {BaseType} from './base-type';
import {SyntaxTreeImpl} from './index';
import {EnumValueImpl} from './enumValue';
import {EnumDescriptorPath} from './descriptor-paths';
import {OptionsImpl} from './options';
import {PathInfo, pInfo, SourceCodeIndex} from './source-code-index';
import {DetailedSourceCode, initDetailedSourceCode} from './source-code-details';
import {EnumDescriptorProto} from '../descriptor';
import {ReservedWithInclusiveRange} from './reserved';

export class EnumImpl extends BaseType implements Enum {
  readonly typeName = TypeName.Enum;
  readonly detailedSourceCode: DetailedSourceCode<'name'>;
  private readonly descriptor: EnumDescriptorProto;

  constructor(
    readonly st: SyntaxTreeImpl,
    descriptor: EnumDescriptorProto,
    parent: ProtoFile | Message,
    pathInfo: PathInfo,
    sourceIdx: SourceCodeIndex,
  ) {
    super(descriptor, parent);
    this.descriptor = descriptor;
    this.parent = parent;
    this.reserved = new ReservedWithInclusiveRange(descriptor);
    this.options = new OptionsImpl(st, {options: descriptor.options, optionType: OptionType.EnumOptions}, this,
      pInfo(pathInfo, EnumDescriptorPath.options), sourceIdx);

    this.detailedSourceCode = initDetailedSourceCode(pathInfo, sourceIdx, this, {
      'name': EnumDescriptorPath.name,
    });
    st.addType(this);

    this.values = [];
    let i = 0;
    for (const enumValueDescriptor of descriptor.valueList) {
      const enumValue = new EnumValueImpl(st, enumValueDescriptor, this, pInfo(pathInfo, EnumDescriptorPath.value, i++), sourceIdx);
      this.values.push(enumValue);
    }
  }

  get file() {
    return this.parent.file;
  }

  toJSON() {
    return {
      typeName: this.typeName,
      name: this.name,
      options: this.options.allOptions,
      values: this.values,
    };
  }

  readonly values: EnumValueImpl[];
  readonly parent: Message | ProtoFile;
  readonly reserved: Reserved;
  readonly options: OptionsImpl<OptionType.EnumOptions>;
}
