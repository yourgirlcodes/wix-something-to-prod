import * as pb from 'google-protobuf/google/protobuf/descriptor_pb';
import {SyntaxTreeImpl} from './index';
import {
  ElementTypes,
  EnumFieldType,
  FieldKind,
  FieldType,
  MapFieldType,
  MapKeyTypes,
  Message,
  MessageFieldType,
  PrimitiveFieldType,
  Primitives,
  RepeatedFieldType,
  WrapperFieldType,
  WrapperTypes
} from '../api';
import {FieldDescriptorProto} from '../descriptor';

function primitiveToString(type: Primitives) {
  return Primitives[type].toLowerCase();
}

type withToJson = {
  toJSON(): any;
};

type withToString = {
  toString(): string;
};


function wrapperTypeToString(type: WrapperTypes) {
  let wrapperTypeName: string;

  function stdWrapperTypeName() {
    const typeName = Primitives[type];
    return typeName[0] + typeName.slice(1).toLowerCase();
  }

  switch (type) {
    case Primitives.UINT64:
      wrapperTypeName = 'UInt64';
      break;
    case Primitives.UINT32:
      wrapperTypeName = 'UInt32';
      break;
    default:
      wrapperTypeName = stdWrapperTypeName();
  }

  return `.google.protobuf.${wrapperTypeName}Value`;
}

export class FieldTypeFactory {
  private static createMapFieldType(mapEntryMessage: MessageFieldType): MapFieldType & withToString {
    const keyFieldType = mapEntryMessage.message.fields[0].fieldType as PrimitiveFieldType;
    const keyType = keyFieldType.type as MapKeyTypes;
    const valueType = mapEntryMessage.message.fields[1].fieldType as ElementTypes;
    return {
      kind: FieldKind.Map,
      keyType,
      valueType,
      toString() {
        return `map<${keyFieldType.toString()},${valueType.toString()}>`;
      }
    };
  }

  private static createRepeatedFileType(elementType: ElementTypes): RepeatedFieldType & withToString {
    return {
      kind: FieldKind.Repeated,
      elementType,
      toString() {
        return `repeated ${elementType.toString()}`;
      }
    };
  }

  private static createEnumFieldType(st: SyntaxTreeImpl, typeName: string): EnumFieldType & withToJson & withToString {
    return {
      kind: FieldKind.Enum,
      enum: st.getEnum(typeName),
      toString() {
        return this.enum.fqn;
      },
      toJSON() {
        return {
          kind: this.kind,
          enum: this.enum.fqn,
        };
      },
    };
  }

  private static createWrapperFieldType(message: Message): WrapperFieldType & withToJson & withToString {
    const valueField = message.fields[0];
    return {
      kind: FieldKind.Wrapper,
      type: (valueField.fieldType as PrimitiveFieldType).type as WrapperTypes,
      message,
      toString() {
        return wrapperTypeToString(this.type);
      },
      toJSON() {
        return {
          kind: this.kind,
          type: this.type,
          message: this.message.fqn,
        };
      },
    };
  }

  private static createPrimitiveFieldType(type: pb.FieldDescriptorProto.Type): PrimitiveFieldType & withToString {
    return {
      kind: FieldKind.Primitive,
      type: type as number as Primitives,
      toString() {
        return primitiveToString(this.type);
      }
    };
  }

  private static createMessageFieldType(message: Message): MessageFieldType & withToJson & withToString {
    return {
      kind: FieldKind.Message,
      message,
      toString() {
        return this.message.fqn;
      },
      toJSON() {
        return {
          kind: this.kind,
          message: this.message.fqn,
        };
      },
    };
  }

  static createFieldTypeFromDescriptor(st: SyntaxTreeImpl, descriptor: FieldDescriptorProto) {
    return FieldTypeFactory.createFieldType(st, {
      label: descriptor.label,
      type: descriptor.type,
      typeName: descriptor.typeName,
    });
  }

  static createFieldType(st: SyntaxTreeImpl, {label, type, typeName}: {label?: pb.FieldDescriptorProto.Label; type: pb.FieldDescriptorProto.Type; typeName?: string}): FieldType {
    if (label === pb.FieldDescriptorProto.Label.LABEL_REPEATED) {
      const elementType = this.createFieldType(st, {type, typeName}) as ElementTypes;
      if (elementType.kind === FieldKind.Message && elementType.message.isMapEntry) {
        return this.createMapFieldType(elementType);
      }
      return this.createRepeatedFileType(elementType);
    } else if (type === pb.FieldDescriptorProto.Type.TYPE_ENUM) {
      return this.createEnumFieldType(st, typeName!);
    } else if (type === pb.FieldDescriptorProto.Type.TYPE_MESSAGE) {
      const message = st.getMessage(typeName!);
      if (message.file.package === 'google.protobuf' && message.parent.fqn === 'google/protobuf/wrappers.proto') {
        return this.createWrapperFieldType(message);
      }
      const result = this.createMessageFieldType(message);
      return result;
    } else {
      return this.createPrimitiveFieldType(type);
    }
  }
}
