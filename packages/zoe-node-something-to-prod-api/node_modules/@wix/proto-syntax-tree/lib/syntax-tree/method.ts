import {OptionType, Message, Method, Service, TypeName} from '../api';
import {BaseType} from './base-type';
import {SyntaxTreeImpl} from './index';
import {OptionsImpl} from './options';
import {MethodDescriptorPath} from './descriptor-paths';
import {PathInfo, pInfo, SourceCodeIndex} from './source-code-index';
import {DetailedSourceCode, initDetailedSourceCode} from './source-code-details';
import {MethodDescriptorProto} from '../descriptor';

export class MethodImpl extends BaseType implements Method {
  readonly typeName = TypeName.Method;
  readonly detailedSourceCode: DetailedSourceCode<'name' | 'request' | 'response'>;
  private readonly descriptor: MethodDescriptorProto;

  constructor(
    readonly st: SyntaxTreeImpl,
    descriptor: MethodDescriptorProto,
    parent: Service,
    pathInfo: PathInfo,
    sourceIdx: SourceCodeIndex,
  ) {
    super(descriptor, parent);
    this.descriptor = descriptor;
    this.request = st.getMessage(descriptor.inputType);
    this.response = st.getMessage(descriptor.outputType);
    this.clientStreaming = descriptor.clientStreaming === true;
    this.serverStreaming = descriptor.serverStreaming === true;
    this.parent = parent;
    this.options = new OptionsImpl(st, {options: descriptor.options, optionType: OptionType.MethodOptions}, this,
      pInfo(pathInfo, MethodDescriptorPath.options), sourceIdx);

    this.detailedSourceCode = initDetailedSourceCode(pathInfo, sourceIdx, this, {
      'name': MethodDescriptorPath.name,
      'request': MethodDescriptorPath.input,
      'response': MethodDescriptorPath.output,
    });
    st.addType(this);
  }

  get file() {
    return this.parent.file;
  }

  toJSON() {
    return {
      typeName: this.typeName,
      name: this.name,
      options: this.options.allOptions,
      request: this.request.fqn,
      response: this.response.fqn,
    };
  }

  readonly request: Message;
  readonly response: Message;
  readonly clientStreaming: boolean;
  readonly serverStreaming: boolean;
  readonly parent: Service;
  readonly options: OptionsImpl<OptionType.MethodOptions>;
}
