import {Enum, EnumValue, OptionType, TypeName} from '../api';
import {BaseType} from './base-type';
import {SyntaxTreeImpl} from './index';
import {OptionsImpl} from './options';
import {EnumValueDescriptorPath} from './descriptor-paths';
import {PathInfo, pInfo, SourceCodeIndex} from './source-code-index';
import {DetailedSourceCode, initDetailedSourceCode} from './source-code-details';
import {EnumValueDescriptorProto} from '../descriptor';

export class EnumValueImpl extends BaseType implements EnumValue {
  readonly typeName = TypeName.EnumValue;
  readonly detailedSourceCode: DetailedSourceCode<'name' | 'number'>;
  private readonly descriptor: EnumValueDescriptorProto;

  constructor(
    readonly st: SyntaxTreeImpl,
    descriptor: EnumValueDescriptorProto,
    parent: Enum,
    pathInfo: PathInfo,
    sourceIdx: SourceCodeIndex,
  ) {
    super(descriptor, parent);
    this.descriptor = descriptor;
    this.parent = parent;
    this.options = new OptionsImpl(st, {options: descriptor.options, optionType: OptionType.EnumValueOptions}, this,
      pInfo(pathInfo, EnumValueDescriptorPath.options), sourceIdx);

    this.detailedSourceCode = initDetailedSourceCode(pathInfo, sourceIdx, this, {
      'name': EnumValueDescriptorPath.name,
      'number': EnumValueDescriptorPath.number,
    });
    st.addType(this);
  }

  get file() {
    return this.parent.file;
  }

  get number(): number {
    return this.descriptor.number;
  }

  toJSON() {
    return {
      typeName: this.typeName,
      name: this.name,
      options: this.options.allOptions,
      number: this.number,
    };
  }

  readonly parent: Enum;
  readonly options: OptionsImpl<OptionType.EnumValueOptions>;
}
