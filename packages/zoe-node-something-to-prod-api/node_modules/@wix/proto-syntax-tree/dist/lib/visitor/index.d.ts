import { Enum, EnumValue, Extension, Field, Message, Method, Oneof, ProtoFile, Service, Type } from '../api';
export { visitSyntaxTree, visitSyntaxTreeFrom } from './iterator';
export { skip } from './skipper';
export interface Visitor {
    visitFile?(file: ProtoFile): boolean | void;
    visitService?(service: Service): boolean | void;
    visitMessage?(message: Message): boolean | void;
    visitEnum?(enm: Enum): boolean | void;
    visitMethod?(method: Method): void;
    visitField?(field: Field): void;
    visitOneof?(oneof: Oneof): void;
    visitEnumValue?(enumValue: EnumValue): void;
    visitExtension?(extension: Extension): void;
}
export declare type SyntaxTreeContainers = ProtoFile | Service | Message | Enum;
declare type NotUndef<F> = F extends undefined ? never : F;
export declare type VisitMethods = {
    [K in keyof Visitor]-?: NotUndef<Visitor[K]> extends (elem: infer E) => any ? E extends Type ? K : never : never;
}[keyof Visitor];
export declare type VisitContainerMethods = {
    [K in keyof Visitor]-?: NotUndef<Visitor[K]> extends (elem: infer E) => any ? E extends SyntaxTreeContainers ? K : never : never;
}[keyof Visitor];
export declare const visitorMethods: VisitMethods[];
export declare const visitorContainerMethods: VisitMethods[];
export declare type Skipper = {
    [P in VisitMethods]?: NotUndef<Visitor[P]> extends (arg: infer U) => any ? (arg: U) => boolean | void : never;
};
