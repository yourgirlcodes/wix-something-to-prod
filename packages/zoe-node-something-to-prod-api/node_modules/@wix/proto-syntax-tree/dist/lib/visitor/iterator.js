"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.visitSyntaxTreeFrom = exports.visitSyntaxTree = void 0;
const api_1 = require("../api");
function visitSyntaxTree(st, visitor) {
    const iterator = new SyntaxTreeIterator(visitor);
    iterator.iterate(st);
}
exports.visitSyntaxTree = visitSyntaxTree;
function visitSyntaxTreeFrom(node, visitor) {
    const iterator = new SyntaxTreeIterator(visitor);
    iterator.iterateFrom(node);
}
exports.visitSyntaxTreeFrom = visitSyntaxTreeFrom;
class SyntaxTreeIterator {
    constructor(visitor) {
        this.visitor = visitor;
    }
    iterate(syntaxTree) {
        this.iterateFiles(syntaxTree.files);
    }
    iterateFrom(node) {
        switch (node.typeName) {
            case api_1.TypeName.File:
                this.visitFile(node);
                break;
            case api_1.TypeName.Service:
                this.visitService(node);
                break;
            case api_1.TypeName.Message:
                this.visitMessage(node);
                break;
            case api_1.TypeName.Enum:
                this.visitEnum(node);
                break;
        }
    }
    iterateFiles(files) {
        for (const file of files) {
            this.visitFile(file);
        }
    }
    visitFile(file) {
        if (this.visitor.visitFile) {
            if (this.visitor.visitFile(file) === false) {
                return;
            }
        }
        this.iterateServices(file.services);
        this.iterateMessages(file.messages);
        this.iterateEnums(file.enums);
        this.iterateExtensions(file.extensions);
    }
    iterateServices(services) {
        for (const service of services) {
            this.visitService(service);
        }
    }
    visitService(service) {
        if (this.visitor.visitService) {
            if (this.visitor.visitService(service) === false) {
                return;
            }
        }
        this.iterateMethods(service.methods);
    }
    iterateMessages(messages) {
        for (const message of messages) {
            this.visitMessage(message);
        }
    }
    visitMessage(message) {
        if (this.visitor.visitMessage) {
            if (this.visitor.visitMessage(message) === false) {
                return;
            }
        }
        this.iterateMessages(message.messages);
        this.iterateEnums(message.enums);
        this.iterateOneofs(message.oneofs);
        this.iterateFields(message.fields);
    }
    iterateEnums(enums) {
        for (const enm of enums) {
            this.visitEnum(enm);
        }
    }
    visitEnum(enm) {
        if (this.visitor.visitEnum) {
            if (this.visitor.visitEnum(enm) === false) {
                return;
            }
        }
        this.iterateEnumValues(enm.values);
    }
    iterateMethods(methods) {
        if (this.visitor.visitMethod) {
            for (const method of methods) {
                this.visitor.visitMethod(method);
            }
        }
    }
    iterateFields(fields) {
        if (this.visitor.visitField) {
            for (const field of fields) {
                this.visitor.visitField(field);
            }
        }
    }
    iterateOneofs(oneofs) {
        if (this.visitor.visitOneof) {
            for (const oneof of oneofs) {
                this.visitor.visitOneof(oneof);
            }
        }
    }
    iterateEnumValues(enumValues) {
        for (const enumValue of enumValues) {
            if (this.visitor.visitEnumValue) {
                this.visitor.visitEnumValue(enumValue);
            }
        }
    }
    iterateExtensions(extensions) {
        if (this.visitor.visitExtension) {
            for (const extension of extensions) {
                this.visitor.visitExtension(extension);
            }
        }
    }
}
//# sourceMappingURL=iterator.js.map