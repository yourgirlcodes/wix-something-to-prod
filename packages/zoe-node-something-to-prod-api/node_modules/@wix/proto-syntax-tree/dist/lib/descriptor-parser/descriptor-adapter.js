"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.asFileDescriptorSet = void 0;
const pb = __importStar(require("google-protobuf/google/protobuf/descriptor_pb"));
function asFileDescriptorSet(descriptor) {
    return new FileDescriptorSetAdapter(descriptor);
}
exports.asFileDescriptorSet = asFileDescriptorSet;
function* adapt(iterable, Adapter) {
    for (const t of iterable) {
        yield new Adapter(t);
    }
}
function optionsAdapter(Adapter, opts, optClass) {
    if (opts) {
        return new Adapter(opts, optClass.extensions);
    }
}
function isIterable(obj) {
    if (typeof obj === 'object') {
        return typeof obj[Symbol.iterator] === 'function';
    }
    return false;
}
function propertiesToJSON(obj) {
    const result = {};
    const thisAsKv = obj;
    const props = Object.getOwnPropertyNames(Object.getPrototypeOf(obj)).sort();
    for (const prop of props) {
        const val = thisAsKv[prop];
        if (typeof val !== 'function') {
            if (isIterable(val)) {
                result[prop] = [...val];
            }
            else {
                result[prop] = val;
            }
        }
    }
    return result;
}
class BaseDescriptorAdapter {
    toJSON() {
        return propertiesToJSON(this);
    }
}
class FileDescriptorSetAdapter extends BaseDescriptorAdapter {
    constructor(descriptor) {
        super();
        this.descriptor = descriptor;
    }
    get fileList() {
        return adapt(this.descriptor.getFileList(), FileDescriptorProtoAdapter);
    }
}
class BaseOptionsAdapter {
    constructor(options, extensions) {
        this.options = options;
        this.extensions = extensions;
    }
    toJSON() {
        return {
            ...propertiesToJSON(this),
            customOptions: this.customOptions,
        };
    }
    get customOptions() {
        return new CustomOptionsAdapter(this.options, this.extensions);
    }
}
class CustomOptionsAdapter {
    constructor(options, extensions) {
        return new Proxy(this, {
            set() {
                return false;
            },
            get(target, propName) {
                const fieldInfo = extensions[propName];
                if (fieldInfo) {
                    return options.getExtension(fieldInfo);
                }
            },
            getOwnPropertyDescriptor(target, propName) {
                const fieldInfo = extensions[propName];
                if (fieldInfo) {
                    const val = options.getExtension(fieldInfo);
                    if (val !== undefined) {
                        if (fieldInfo.isRepeated) {
                            if (val.length) {
                                return { configurable: true, enumerable: true };
                            }
                        }
                        else {
                            return { configurable: true, enumerable: true };
                        }
                    }
                }
            },
            ownKeys() {
                const result = [];
                for (const extensionNumber in extensions) {
                    result.push(extensionNumber);
                }
                return result;
            }
        });
    }
}
class FileDescriptorProtoAdapter extends BaseDescriptorAdapter {
    constructor(descriptor) {
        super();
        this.descriptor = descriptor;
    }
    get name() {
        return this.descriptor.getName();
    }
    get package() {
        return this.descriptor.getPackage();
    }
    get syntax() {
        return this.descriptor.getSyntax();
    }
    get enumTypeList() {
        return adapt(this.descriptor.getEnumTypeList(), EnumDescriptorProtoAdapter);
    }
    get extensionList() {
        return adapt(this.descriptor.getExtensionList(), FieldDescriptorProtoAdapter);
    }
    get messageTypeList() {
        return adapt(this.descriptor.getMessageTypeList(), DescriptorProtoAdapter);
    }
    get options() {
        return optionsAdapter(FileOptionsAdapter, this.descriptor.getOptions(), pb.FileOptions);
    }
    get serviceList() {
        return adapt(this.descriptor.getServiceList(), ServiceDescriptorProtoAdapter);
    }
    get sourceCodeInfo() {
        if (this.descriptor.getSourceCodeInfo) {
            const scInfo = this.descriptor.getSourceCodeInfo();
            if (scInfo) {
                return new SourceCodeInfoAdapter(scInfo);
            }
        }
    }
}
class FileOptionsAdapter extends BaseOptionsAdapter {
    get ccEnableArenas() {
        if (this.options.hasCcEnableArenas()) {
            return this.options.getCcEnableArenas();
        }
    }
    get ccGenericServices() {
        if (this.options.hasCcGenericServices()) {
            return this.options.getCcGenericServices();
        }
    }
    get csharpNamespace() {
        if (this.options.hasCsharpNamespace()) {
            return this.options.getCsharpNamespace();
        }
    }
    get deprecated() {
        if (this.options.getDeprecated()) {
            return this.options.getDeprecated();
        }
    }
    get goPackage() {
        if (this.options.hasGoPackage()) {
            return this.options.getGoPackage();
        }
    }
    get javaGenerateEqualsAndHash() {
        if (this.options.hasJavaGenerateEqualsAndHash()) {
            return this.options.getJavaGenerateEqualsAndHash();
        }
    }
    get javaGenericServices() {
        if (this.options.hasJavaGenericServices()) {
            return this.options.getJavaGenericServices();
        }
    }
    get javaMultipleFiles() {
        if (this.options.hasJavaMultipleFiles()) {
            return this.options.getJavaMultipleFiles();
        }
    }
    get javaOuterClassname() {
        if (this.options.hasJavaOuterClassname()) {
            return this.options.getJavaOuterClassname();
        }
    }
    get javaPackage() {
        if (this.options.hasJavaPackage()) {
            return this.options.getJavaPackage();
        }
    }
    get javaStringCheckUtf8() {
        if (this.options.hasJavaStringCheckUtf8()) {
            return this.options.getJavaStringCheckUtf8();
        }
    }
    get objcClassPrefix() {
        if (this.options.hasObjcClassPrefix()) {
            return this.options.getObjcClassPrefix();
        }
    }
    get optimizeFor() {
        if (this.options.hasOptimizeFor()) {
            return this.options.getOptimizeFor();
        }
    }
    get phpClassPrefix() {
        if (this.options.hasPhpClassPrefix()) {
            return this.options.getPhpClassPrefix();
        }
    }
    get phpGenericServices() {
        if (this.options.hasPhpGenericServices()) {
            return this.options.getPhpGenericServices();
        }
    }
    get phpMetadataNamespace() {
        if (this.options.hasPhpMetadataNamespace()) {
            return this.options.getPhpMetadataNamespace();
        }
    }
    get phpNamespace() {
        if (this.options.hasPhpNamespace()) {
            return this.options.getPhpNamespace();
        }
    }
    get pyGenericServices() {
        if (this.options.hasPyGenericServices()) {
            return this.options.getPyGenericServices();
        }
    }
    get rubyPackage() {
        if (this.options.hasRubyPackage()) {
            return this.options.getRubyPackage();
        }
    }
    get swiftPrefix() {
        if (this.options.hasSwiftPrefix()) {
            return this.options.getSwiftPrefix();
        }
    }
}
class DescriptorProtoAdapter extends BaseDescriptorAdapter {
    constructor(descriptor) {
        super();
        this.descriptor = descriptor;
    }
    get name() {
        return this.descriptor.getName();
    }
    get enumTypeList() {
        return adapt(this.descriptor.getEnumTypeList(), EnumDescriptorProtoAdapter);
    }
    get extensionList() {
        return adapt(this.descriptor.getExtensionList(), FieldDescriptorProtoAdapter);
    }
    get extensionRangeList() {
        return adapt(this.descriptor.getExtensionRangeList(), ExtensionRangeAdapter);
    }
    get fieldList() {
        return adapt(this.descriptor.getFieldList(), FieldDescriptorProtoAdapter);
    }
    get nestedTypeList() {
        return adapt(this.descriptor.getNestedTypeList(), DescriptorProtoAdapter);
    }
    get oneofDeclList() {
        return adapt(this.descriptor.getOneofDeclList(), OneofDescriptorProtoAdapter);
    }
    get options() {
        return optionsAdapter(MessageOptionsAdapter, this.descriptor.getOptions(), pb.MessageOptions);
    }
    get reservedNameList() {
        return this.descriptor.getReservedNameList();
    }
    get reservedRangeList() {
        return adapt(this.descriptor.getReservedRangeList(), ReservedRangeAdapter);
    }
}
class MessageOptionsAdapter extends BaseOptionsAdapter {
    get deprecated() {
        if (this.options.getDeprecated()) {
            return this.options.getDeprecated();
        }
    }
    get mapEntry() {
        if (this.options.hasMapEntry()) {
            return this.options.getMapEntry();
        }
    }
    get messageSetWireFormat() {
        if (this.options.hasMessageSetWireFormat()) {
            return this.options.getMessageSetWireFormat();
        }
    }
    get noStandardDescriptorAccessor() {
        if (this.options.getNoStandardDescriptorAccessor()) {
            return this.options.getNoStandardDescriptorAccessor();
        }
    }
}
class FieldDescriptorProtoAdapter extends BaseDescriptorAdapter {
    constructor(descriptor) {
        super();
        this.descriptor = descriptor;
    }
    get defaultValue() {
        if (this.descriptor.hasDefaultValue()) {
            return this.descriptor.getDefaultValue();
        }
    }
    get extendee() {
        if (this.descriptor.hasExtendee()) {
            return this.descriptor.getExtendee();
        }
    }
    get jsonName() {
        return this.descriptor.getJsonName();
    }
    get label() {
        return this.descriptor.getLabel();
    }
    get name() {
        return this.descriptor.getName();
    }
    get number() {
        return this.descriptor.getNumber();
    }
    get oneofIndex() {
        if (this.descriptor.hasOneofIndex()) {
            return this.descriptor.getOneofIndex();
        }
    }
    get proto3Optional() {
        if (this.descriptor.hasProto3Optional()) {
            return this.descriptor.getProto3Optional();
        }
    }
    get type() {
        return this.descriptor.getType();
    }
    get typeName() {
        if (this.descriptor.hasTypeName()) {
            return this.descriptor.getTypeName();
        }
    }
    get options() {
        return optionsAdapter(FieldOptionsAdapter, this.descriptor.getOptions(), pb.FieldOptions);
    }
}
class FieldOptionsAdapter extends BaseOptionsAdapter {
    get ctype() {
        if (this.options.hasCtype()) {
            return this.options.getCtype();
        }
    }
    get deprecated() {
        if (this.options.getDeprecated()) {
            return this.options.getDeprecated();
        }
    }
    get jstype() {
        if (this.options.hasJstype()) {
            return this.options.getJstype();
        }
    }
    get lazy() {
        if (this.options.hasLazy()) {
            return this.options.getLazy();
        }
    }
    get packed() {
        if (this.options.hasPacked()) {
            return this.options.getPacked();
        }
    }
    get weak() {
        if (this.options.hasWeak()) {
            return this.options.getWeak();
        }
    }
}
class EnumDescriptorProtoAdapter extends BaseDescriptorAdapter {
    constructor(descriptor) {
        super();
        this.descriptor = descriptor;
    }
    get name() {
        return this.descriptor.getName();
    }
    get reservedNameList() {
        return this.descriptor.getReservedNameList();
    }
    get reservedRangeList() {
        return adapt(this.descriptor.getReservedRangeList(), EnumReservedRangeAdapter);
    }
    get valueList() {
        return adapt(this.descriptor.getValueList(), EnumValueDescriptorProtoAdapter);
    }
    get options() {
        return optionsAdapter(EnumOptionsAdapter, this.descriptor.getOptions(), pb.EnumOptions);
    }
}
class EnumOptionsAdapter extends BaseOptionsAdapter {
    get allowAlias() {
        if (this.options.hasAllowAlias()) {
            return this.options.getAllowAlias();
        }
    }
    get deprecated() {
        if (this.options.getDeprecated()) {
            return this.options.getDeprecated();
        }
    }
}
class ServiceDescriptorProtoAdapter extends BaseDescriptorAdapter {
    constructor(descriptor) {
        super();
        this.descriptor = descriptor;
    }
    get methodList() {
        return adapt(this.descriptor.getMethodList(), MethodDescriptorProtoAdapter);
    }
    get name() {
        return this.descriptor.getName();
    }
    get options() {
        return optionsAdapter(ServiceOptionsAdapter, this.descriptor.getOptions(), pb.ServiceOptions);
    }
}
class ServiceOptionsAdapter extends BaseOptionsAdapter {
    get deprecated() {
        if (this.options.getDeprecated()) {
            return this.options.getDeprecated();
        }
    }
}
class MethodDescriptorProtoAdapter extends BaseDescriptorAdapter {
    constructor(descriptor) {
        super();
        this.descriptor = descriptor;
    }
    get clientStreaming() {
        if (this.descriptor.hasClientStreaming()) {
            return this.descriptor.getClientStreaming();
        }
    }
    get inputType() {
        return this.descriptor.getInputType();
    }
    get name() {
        return this.descriptor.getName();
    }
    get outputType() {
        return this.descriptor.getOutputType();
    }
    get serverStreaming() {
        if (this.descriptor.hasServerStreaming()) {
            return this.descriptor.getServerStreaming();
        }
    }
    get options() {
        return optionsAdapter(MethodOptionsAdapter, this.descriptor.getOptions(), pb.MethodOptions);
    }
}
class MethodOptionsAdapter extends BaseOptionsAdapter {
    get deprecated() {
        if (this.options.hasDeprecated()) {
            return this.options.getDeprecated();
        }
    }
    get idempotencyLevel() {
        if (this.options.hasIdempotencyLevel()) {
            return this.options.getIdempotencyLevel();
        }
    }
}
class OneofDescriptorProtoAdapter extends BaseDescriptorAdapter {
    constructor(descriptor) {
        super();
        this.descriptor = descriptor;
    }
    get name() {
        return this.descriptor.getName();
    }
    get options() {
        return optionsAdapter(EmptyOptionsAdapter, this.descriptor.getOptions(), pb.OneofOptions);
    }
}
class EmptyOptionsAdapter extends BaseOptionsAdapter {
}
class EnumValueDescriptorProtoAdapter extends BaseDescriptorAdapter {
    constructor(descriptor) {
        super();
        this.descriptor = descriptor;
    }
    get name() {
        return this.descriptor.getName();
    }
    get number() {
        return this.descriptor.getNumber();
    }
    get options() {
        return optionsAdapter(EnumValueOptionsAdapter, this.descriptor.getOptions(), pb.EnumValueOptions);
    }
}
class EnumValueOptionsAdapter extends BaseOptionsAdapter {
    get deprecated() {
        if (this.options.hasDeprecated()) {
            return this.options.getDeprecated();
        }
    }
}
class SourceCodeInfoAdapter extends BaseDescriptorAdapter {
    constructor(sourceCodeInfo) {
        super();
        this.sourceCodeInfo = sourceCodeInfo;
    }
    get locationList() {
        return adapt(this.sourceCodeInfo.getLocationList(), LocationAdapter);
    }
}
class LocationAdapter extends BaseDescriptorAdapter {
    constructor(location) {
        super();
        this.location = location;
    }
    get leadingComments() {
        return this.location.getLeadingComments();
    }
    get leadingDetachedCommentsList() {
        return this.location.getLeadingDetachedCommentsList();
    }
    get pathList() {
        return this.location.getPathList();
    }
    get spanList() {
        return this.location.getSpanList();
    }
    get trailingComments() {
        return this.location.getTrailingComments();
    }
}
class ExtensionRangeAdapter extends BaseDescriptorAdapter {
    constructor(extensionRange) {
        super();
        this.extensionRange = extensionRange;
    }
    get end() {
        return this.extensionRange.getEnd();
    }
    get start() {
        return this.extensionRange.getStart();
    }
    get options() {
        return optionsAdapter(EmptyOptionsAdapter, this.extensionRange.getOptions(), pb.ExtensionRangeOptions);
    }
}
class ReservedRangeAdapter extends BaseDescriptorAdapter {
    constructor(reservedRange) {
        super();
        this.reservedRange = reservedRange;
    }
    get end() {
        return this.reservedRange.getEnd();
    }
    get start() {
        return this.reservedRange.getStart();
    }
}
class EnumReservedRangeAdapter extends BaseDescriptorAdapter {
    constructor(reservedRange) {
        super();
        this.reservedRange = reservedRange;
    }
    get end() {
        return this.reservedRange.getEnd();
    }
    get start() {
        return this.reservedRange.getStart();
    }
}
//# sourceMappingURL=descriptor-adapter.js.map