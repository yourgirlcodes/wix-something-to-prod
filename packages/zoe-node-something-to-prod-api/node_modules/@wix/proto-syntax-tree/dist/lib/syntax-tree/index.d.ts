import { Enum, EnumValue, Extension, OptionType, Field, Message, Method, Oneof, ProtoFile, Service, SyntaxTree, Type } from '../api';
import { FileInfo } from './proto-file';
import { FileDescriptorSet } from '../descriptor';
export declare class SyntaxTreeError extends Error {
}
export declare class SyntaxTreeImpl implements SyntaxTree {
    readonly files: ProtoFile[];
    private readonly types;
    private readonly options;
    toJSON(): {
        files: ProtoFile[];
    };
    addType(type: Type): void;
    addOption(ext: Extension): void;
    getOptionByNumber(optionType: OptionType, optionNumber: number): Extension;
    getType(fqn: string): Type;
    findType(fqn: string): Type | undefined;
    private getAndValidateType;
    getFile(fqn: string): ProtoFile;
    getService(fqn: string): Service;
    getMethod(fqn: string): Method;
    getMessage(fqn: string): Message;
    getExtension(fqn: string): Extension;
    getEnum(fqn: string): Enum;
    getField(fqn: string): Field;
    getOneof(fqn: string): Oneof;
    getEnumValue(fqn: string): EnumValue;
}
export declare type GetFileInfo = (protoFileName: string) => FileInfo;
export interface SyntaxTreeOptions {
    getFileInfo: GetFileInfo;
}
export declare function buildSyntaxTree(fileDescriptorSets: FileDescriptorSet[], opts: SyntaxTreeOptions): SyntaxTree;
