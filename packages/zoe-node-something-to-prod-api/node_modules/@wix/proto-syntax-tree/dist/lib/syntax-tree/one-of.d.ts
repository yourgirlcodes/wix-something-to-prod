import { OptionType, Field, Message, Oneof, TypeName } from '../api';
import { BaseType } from './base-type';
import { SyntaxTreeImpl } from './index';
import { OptionsImpl } from './options';
import { PathInfo, SourceCodeIndex } from './source-code-index';
import { DetailedSourceCode } from './source-code-details';
import { OneofDescriptorProto } from '../descriptor';
export declare class OneofImpl extends BaseType implements Oneof {
    readonly st: SyntaxTreeImpl;
    readonly typeName = TypeName.Oneof;
    readonly detailedSourceCode: DetailedSourceCode<'name'>;
    private readonly descriptor;
    constructor(st: SyntaxTreeImpl, descriptor: OneofDescriptorProto, parent: Message, pathInfo: PathInfo, sourceIdx: SourceCodeIndex);
    addField(field: Field): void;
    get file(): import("../api").ProtoFile;
    toJSON(): {
        typeName: TypeName;
        name: string;
        options: import("../api").Option<any>[];
        fields: string[];
    };
    readonly fields: Field[];
    readonly parent: Message;
    readonly options: OptionsImpl<OptionType.OneofOptions>;
}
