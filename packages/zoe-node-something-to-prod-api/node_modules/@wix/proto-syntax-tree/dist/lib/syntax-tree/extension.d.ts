import { BaseType } from './base-type';
import { SyntaxTreeImpl } from './index';
import { Extension, OptionType, FieldType, ProtoFile, TypeName } from '../api';
import { PathInfo, SourceCodeIndex } from './source-code-index';
import { DetailedSourceCodeInfo } from './source-code-details';
import { FieldDescriptorProto } from '../descriptor';
export declare class ExtensionImpl extends BaseType implements Extension {
    readonly st: SyntaxTreeImpl;
    readonly typeName = TypeName.Extension;
    private _fieldType?;
    private readonly descriptor;
    readonly detailedSourceCode: DetailedSourceCodeInfo;
    constructor(st: SyntaxTreeImpl, descriptor: FieldDescriptorProto, parent: ProtoFile, pathInfo: PathInfo, sourceIdx: SourceCodeIndex);
    get fieldType(): FieldType;
    get file(): ProtoFile;
    get number(): number;
    toJSON(): {
        typeName: TypeName;
        name: string;
        number: number;
        fieldType: FieldType;
        optionType: string | undefined;
    };
    readonly parent: ProtoFile;
    readonly optionType: OptionType | undefined;
}
