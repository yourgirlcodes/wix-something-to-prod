"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FieldImpl = exports.FieldsImpl = void 0;
const base_type_1 = require("./base-type");
const pb = __importStar(require("google-protobuf/google/protobuf/descriptor_pb"));
const api_1 = require("../api");
const field_type_1 = require("./field-type");
const options_1 = require("./options");
const descriptor_paths_1 = require("./descriptor-paths");
const source_code_index_1 = require("./source-code-index");
const source_code_details_1 = require("./source-code-details");
class FieldsImpl extends Array {
    byName(fieldName) {
        return this.find(f => f.name === fieldName);
    }
}
exports.FieldsImpl = FieldsImpl;
class FieldImpl extends base_type_1.BaseType {
    constructor(st, descriptor, parent, pathInfo, sourceIdx) {
        super(descriptor, parent);
        this.st = st;
        this.typeName = api_1.TypeName.Field;
        this.descriptor = descriptor;
        this.parent = parent;
        this.options = new options_1.OptionsImpl(st, { options: descriptor.options, optionType: api_1.OptionType.FieldOptions }, this, (0, source_code_index_1.pInfo)(pathInfo, descriptor_paths_1.FieldDescriptorPath.options), sourceIdx);
        this.detailedSourceCode = (0, source_code_details_1.initDetailedSourceCode)(pathInfo, sourceIdx, this, {
            'name': descriptor_paths_1.FieldDescriptorPath.name,
            'label': descriptor_paths_1.FieldDescriptorPath.label,
            'number': descriptor_paths_1.FieldDescriptorPath.number,
            'type': [descriptor_paths_1.FieldDescriptorPath.type, descriptor_paths_1.FieldDescriptorPath.typeName],
        });
        const oneofIndex = descriptor.oneofIndex;
        if (oneofIndex !== undefined) {
            const oneOf = parent.oneofs[oneofIndex];
            this.oneof = oneOf;
            oneOf.addField(this);
        }
        st.addType(this);
    }
    get fieldType() {
        if (!this._fieldType) {
            this._fieldType = field_type_1.FieldTypeFactory.createFieldTypeFromDescriptor(this.st, this.descriptor);
        }
        return this._fieldType;
    }
    get file() {
        return this.parent.file;
    }
    get number() {
        return this.descriptor.number;
    }
    get jsonName() {
        return this.descriptor.jsonName;
    }
    get proto2Optional() {
        return this.descriptor.label === pb.FieldDescriptorProto.Label.LABEL_OPTIONAL;
    }
    get proto3Optional() {
        return this.descriptor.proto3Optional === true;
    }
    toJSON() {
        return {
            typeName: this.typeName,
            name: this.name,
            options: this.options.allOptions,
            number: this.number,
            fieldType: this.fieldType,
            jsonName: this.jsonName,
            proto2Optional: this.proto2Optional,
            proto3Optional: this.proto3Optional,
        };
    }
}
exports.FieldImpl = FieldImpl;
//# sourceMappingURL=field.js.map