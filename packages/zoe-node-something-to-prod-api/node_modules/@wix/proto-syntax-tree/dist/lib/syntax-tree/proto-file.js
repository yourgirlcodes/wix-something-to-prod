"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProtoFileImpl = void 0;
const api_1 = require("../api");
const base_type_1 = require("./base-type");
const message_1 = require("./message");
const service_1 = require("./service");
const enum_1 = require("./enum");
const descriptor_paths_1 = require("./descriptor-paths");
const extension_1 = require("./extension");
const options_1 = require("./options");
const source_code_index_1 = require("./source-code-index");
const source_code_details_1 = require("./source-code-details");
class ProtoFileImpl extends base_type_1.BaseType {
    constructor(st, descriptor, fileInfo) {
        super(descriptor, null);
        this.st = st;
        this.typeName = api_1.TypeName.File;
        this.package = descriptor.package;
        this.path = fileInfo.path;
        this.protoFolder = fileInfo.fromInclude ? api_1.ProtoFolderType.IncludeProtoFolder : api_1.ProtoFolderType.MainProtoFolder;
        this.scIndex = (0, source_code_index_1.newSourceCodeIndex)(this, descriptor);
        const pathInfo = (0, source_code_index_1.rootPathInfo)();
        this.detailedSourceCode = (0, source_code_details_1.initDetailedSourceCode)(pathInfo, this.scIndex, this, {
            'package': descriptor_paths_1.FileDescriptorPath.package,
            'syntax': descriptor_paths_1.FileDescriptorPath.syntax,
        });
        st.addType(this);
        this.extensions = [];
        let i = 0;
        for (const fieldDescriptor of descriptor.extensionList) {
            const extension = new extension_1.ExtensionImpl(st, fieldDescriptor, this, (0, source_code_index_1.pInfo)(pathInfo, descriptor_paths_1.FileDescriptorPath.extensions, i++), this.scIndex);
            this.extensions.push(extension);
        }
        this.options = new options_1.OptionsImpl(st, { options: descriptor.options, optionType: api_1.OptionType.FileOptions }, this, (0, source_code_index_1.pInfo)(pathInfo, descriptor_paths_1.FileDescriptorPath.options), this.scIndex);
        this.enums = [];
        i = 0;
        for (const enumDescriptor of descriptor.enumTypeList) {
            const anEnum = new enum_1.EnumImpl(st, enumDescriptor, this, (0, source_code_index_1.pInfo)(pathInfo, descriptor_paths_1.FileDescriptorPath.enum, i++), this.scIndex);
            this.enums.push(anEnum);
        }
        this.messages = [];
        i = 0;
        for (const messageDescriptor of descriptor.messageTypeList) {
            const message = new message_1.MessageImpl(st, messageDescriptor, this, (0, source_code_index_1.pInfo)(pathInfo, descriptor_paths_1.FileDescriptorPath.message, i++), this.scIndex);
            this.messages.push(message);
        }
        this.services = [];
        i = 0;
        for (const serviceDescriptor of descriptor.serviceList) {
            const service = new service_1.ServiceImpl(st, serviceDescriptor, this, (0, source_code_index_1.pInfo)(pathInfo, descriptor_paths_1.FileDescriptorPath.service, i++), this.scIndex);
            this.services.push(service);
        }
    }
    get file() {
        return this;
    }
    toJSON() {
        return {
            typeName: this.typeName,
            name: this.name,
            options: this.options.allOptions,
            package: this.package,
            path: this.path,
            enums: this.enums,
            messages: this.messages,
            services: this.services,
            extensions: this.extensions,
            protoFolder: api_1.ProtoFolderType[this.protoFolder],
        };
    }
}
exports.ProtoFileImpl = ProtoFileImpl;
//# sourceMappingURL=proto-file.js.map