import { OptionType, Message, ProtoFile, Reserved, TypeName } from '../api';
import { BaseType } from './base-type';
import { SyntaxTreeImpl } from './index';
import { EnumImpl } from './enum';
import { OneofImpl } from './one-of';
import { FieldsImpl } from './field';
import { OptionsImpl } from './options';
import { PathInfo, SourceCodeIndex } from './source-code-index';
import { DetailedSourceCode } from './source-code-details';
import { DescriptorProto } from '../descriptor';
export declare class MessageImpl extends BaseType implements Message {
    readonly st: SyntaxTreeImpl;
    readonly typeName = TypeName.Message;
    readonly detailedSourceCode: DetailedSourceCode<'name'>;
    private readonly descriptor;
    constructor(st: SyntaxTreeImpl, descriptor: DescriptorProto, parent: ProtoFile | Message, pathInfo: PathInfo, sourceIdx: SourceCodeIndex);
    get isMapEntry(): boolean;
    get file(): ProtoFile;
    toJSON(): {
        typeName: TypeName;
        name: string;
        options: import("../api").Option<any>[];
        fields: FieldsImpl;
        oneofs: OneofImpl[];
        messages: MessageImpl[];
        enums: EnumImpl[];
        isMapEntry: boolean;
    };
    readonly enums: EnumImpl[];
    readonly messages: MessageImpl[];
    readonly fields: FieldsImpl;
    readonly oneofs: OneofImpl[];
    readonly parent: ProtoFile | Message;
    readonly reserved: Reserved;
    readonly options: OptionsImpl<OptionType.MessageOptions>;
}
