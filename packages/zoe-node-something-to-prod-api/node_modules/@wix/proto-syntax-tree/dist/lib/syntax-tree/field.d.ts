import { BaseType } from './base-type';
import { SyntaxTreeImpl } from './index';
import { OptionType, Field, Fields, FieldType, Message, Oneof, TypeName } from '../api';
import { OptionsImpl } from './options';
import { PathInfo, SourceCodeIndex } from './source-code-index';
import { DetailedSourceCode } from './source-code-details';
import { FieldDescriptorProto } from '../descriptor';
export declare class FieldsImpl extends Array<Field> implements Fields {
    byName(fieldName: string): Field | undefined;
}
export declare class FieldImpl extends BaseType implements Field {
    readonly st: SyntaxTreeImpl;
    readonly typeName = TypeName.Field;
    private _fieldType?;
    readonly detailedSourceCode: DetailedSourceCode<'name' | 'label' | 'number' | 'type'>;
    private readonly descriptor;
    constructor(st: SyntaxTreeImpl, descriptor: FieldDescriptorProto, parent: Message, pathInfo: PathInfo, sourceIdx: SourceCodeIndex);
    get fieldType(): FieldType;
    get file(): import("../api").ProtoFile;
    get number(): number;
    get jsonName(): string;
    get proto2Optional(): boolean;
    get proto3Optional(): boolean;
    toJSON(): {
        typeName: TypeName;
        name: string;
        options: import("../api").Option<any>[];
        number: number;
        fieldType: FieldType;
        jsonName: string;
        proto2Optional: boolean;
        proto3Optional: boolean;
    };
    readonly parent: Message;
    readonly oneof?: Oneof;
    readonly options: OptionsImpl<OptionType.FieldOptions>;
}
