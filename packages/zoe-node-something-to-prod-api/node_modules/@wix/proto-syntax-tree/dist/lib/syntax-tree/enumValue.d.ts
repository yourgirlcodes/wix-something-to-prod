import { Enum, EnumValue, OptionType, TypeName } from '../api';
import { BaseType } from './base-type';
import { SyntaxTreeImpl } from './index';
import { OptionsImpl } from './options';
import { PathInfo, SourceCodeIndex } from './source-code-index';
import { DetailedSourceCode } from './source-code-details';
import { EnumValueDescriptorProto } from '../descriptor';
export declare class EnumValueImpl extends BaseType implements EnumValue {
    readonly st: SyntaxTreeImpl;
    readonly typeName = TypeName.EnumValue;
    readonly detailedSourceCode: DetailedSourceCode<'name' | 'number'>;
    private readonly descriptor;
    constructor(st: SyntaxTreeImpl, descriptor: EnumValueDescriptorProto, parent: Enum, pathInfo: PathInfo, sourceIdx: SourceCodeIndex);
    get file(): import("../api").ProtoFile;
    get number(): number;
    toJSON(): {
        typeName: TypeName;
        name: string;
        options: import("../api").Option<any>[];
        number: number;
    };
    readonly parent: Enum;
    readonly options: OptionsImpl<OptionType.EnumValueOptions>;
}
