import { OptionType, ProtoFile, Service, TypeName } from '../api';
import { BaseType } from './base-type';
import { SyntaxTreeImpl } from './index';
import { MethodImpl } from './method';
import { OptionsImpl } from './options';
import { PathInfo, SourceCodeIndex } from './source-code-index';
import { DetailedSourceCode } from './source-code-details';
import { ServiceDescriptorProto } from '../descriptor';
export declare class ServiceImpl extends BaseType implements Service {
    readonly st: SyntaxTreeImpl;
    readonly typeName = TypeName.Service;
    readonly detailedSourceCode: DetailedSourceCode<'name'>;
    private readonly descriptor;
    constructor(st: SyntaxTreeImpl, descriptor: ServiceDescriptorProto, parent: ProtoFile, pathInfo: PathInfo, sourceIdx: SourceCodeIndex);
    get file(): ProtoFile;
    toJSON(): {
        typeName: TypeName;
        name: string;
        options: import("../api").Option<any>[];
        methods: MethodImpl[];
    };
    readonly methods: MethodImpl[];
    readonly parent: ProtoFile;
    readonly options: OptionsImpl<OptionType.ServiceOptions>;
}
