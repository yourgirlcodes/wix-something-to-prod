import { OptionType, ProtoFile, ProtoFolderType, TypeName } from '../api';
import { BaseType } from './base-type';
import { SyntaxTreeImpl } from './index';
import { MessageImpl } from './message';
import { ServiceImpl } from './service';
import { EnumImpl } from './enum';
import { ExtensionImpl } from './extension';
import { OptionsImpl } from './options';
import { DetailedSourceCode } from './source-code-details';
import { FileDescriptorProto } from '../descriptor';
export interface FileInfo {
    path: string;
    fromInclude: boolean;
}
export declare class ProtoFileImpl extends BaseType implements ProtoFile {
    readonly st: SyntaxTreeImpl;
    readonly typeName = TypeName.File;
    private readonly scIndex;
    readonly detailedSourceCode: DetailedSourceCode<'package' | 'syntax'>;
    constructor(st: SyntaxTreeImpl, descriptor: FileDescriptorProto, fileInfo: FileInfo);
    get file(): ProtoFileImpl;
    toJSON(): {
        typeName: TypeName;
        name: string;
        options: import("../api").Option<any>[];
        package: string;
        path: string;
        enums: EnumImpl[];
        messages: MessageImpl[];
        services: ServiceImpl[];
        extensions: ExtensionImpl[];
        protoFolder: string;
    };
    readonly package: string;
    readonly path: string;
    readonly enums: EnumImpl[];
    readonly messages: MessageImpl[];
    readonly services: ServiceImpl[];
    readonly extensions: ExtensionImpl[];
    readonly options: OptionsImpl<OptionType.FileOptions>;
    readonly protoFolder: ProtoFolderType;
}
