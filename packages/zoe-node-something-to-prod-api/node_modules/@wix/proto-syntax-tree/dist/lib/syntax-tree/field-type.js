"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FieldTypeFactory = void 0;
const pb = __importStar(require("google-protobuf/google/protobuf/descriptor_pb"));
const api_1 = require("../api");
function primitiveToString(type) {
    return api_1.Primitives[type].toLowerCase();
}
function wrapperTypeToString(type) {
    let wrapperTypeName;
    function stdWrapperTypeName() {
        const typeName = api_1.Primitives[type];
        return typeName[0] + typeName.slice(1).toLowerCase();
    }
    switch (type) {
        case api_1.Primitives.UINT64:
            wrapperTypeName = 'UInt64';
            break;
        case api_1.Primitives.UINT32:
            wrapperTypeName = 'UInt32';
            break;
        default:
            wrapperTypeName = stdWrapperTypeName();
    }
    return `.google.protobuf.${wrapperTypeName}Value`;
}
class FieldTypeFactory {
    static createMapFieldType(mapEntryMessage) {
        const keyFieldType = mapEntryMessage.message.fields[0].fieldType;
        const keyType = keyFieldType.type;
        const valueType = mapEntryMessage.message.fields[1].fieldType;
        return {
            kind: api_1.FieldKind.Map,
            keyType,
            valueType,
            toString() {
                return `map<${keyFieldType.toString()},${valueType.toString()}>`;
            }
        };
    }
    static createRepeatedFileType(elementType) {
        return {
            kind: api_1.FieldKind.Repeated,
            elementType,
            toString() {
                return `repeated ${elementType.toString()}`;
            }
        };
    }
    static createEnumFieldType(st, typeName) {
        return {
            kind: api_1.FieldKind.Enum,
            enum: st.getEnum(typeName),
            toString() {
                return this.enum.fqn;
            },
            toJSON() {
                return {
                    kind: this.kind,
                    enum: this.enum.fqn,
                };
            },
        };
    }
    static createWrapperFieldType(message) {
        const valueField = message.fields[0];
        return {
            kind: api_1.FieldKind.Wrapper,
            type: valueField.fieldType.type,
            message,
            toString() {
                return wrapperTypeToString(this.type);
            },
            toJSON() {
                return {
                    kind: this.kind,
                    type: this.type,
                    message: this.message.fqn,
                };
            },
        };
    }
    static createPrimitiveFieldType(type) {
        return {
            kind: api_1.FieldKind.Primitive,
            type: type,
            toString() {
                return primitiveToString(this.type);
            }
        };
    }
    static createMessageFieldType(message) {
        return {
            kind: api_1.FieldKind.Message,
            message,
            toString() {
                return this.message.fqn;
            },
            toJSON() {
                return {
                    kind: this.kind,
                    message: this.message.fqn,
                };
            },
        };
    }
    static createFieldTypeFromDescriptor(st, descriptor) {
        return FieldTypeFactory.createFieldType(st, {
            label: descriptor.label,
            type: descriptor.type,
            typeName: descriptor.typeName,
        });
    }
    static createFieldType(st, { label, type, typeName }) {
        if (label === pb.FieldDescriptorProto.Label.LABEL_REPEATED) {
            const elementType = this.createFieldType(st, { type, typeName });
            if (elementType.kind === api_1.FieldKind.Message && elementType.message.isMapEntry) {
                return this.createMapFieldType(elementType);
            }
            return this.createRepeatedFileType(elementType);
        }
        else if (type === pb.FieldDescriptorProto.Type.TYPE_ENUM) {
            return this.createEnumFieldType(st, typeName);
        }
        else if (type === pb.FieldDescriptorProto.Type.TYPE_MESSAGE) {
            const message = st.getMessage(typeName);
            if (message.file.package === 'google.protobuf' && message.parent.fqn === 'google/protobuf/wrappers.proto') {
                return this.createWrapperFieldType(message);
            }
            const result = this.createMessageFieldType(message);
            return result;
        }
        else {
            return this.createPrimitiveFieldType(type);
        }
    }
}
exports.FieldTypeFactory = FieldTypeFactory;
//# sourceMappingURL=field-type.js.map