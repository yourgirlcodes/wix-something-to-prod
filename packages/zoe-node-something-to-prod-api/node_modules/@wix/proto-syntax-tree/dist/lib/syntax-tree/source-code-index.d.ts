import { ProtoFile, SourceCodeContainer, SourceCodeInfo } from '../api';
import { FileDescriptorProto } from '../descriptor';
export interface PathInfo {
    fullPath: number[];
}
export interface SourceCodeIndex {
    getSourceCodeInfoByPath(pathInfo: PathInfo, container: SourceCodeContainer): SourceCodeInfo;
    getSourceCodeInfoBySubPath(pathInfo: PathInfo, container: SourceCodeContainer, name: string, subPath: number): SourceCodeInfo;
    getSourceCodeInfoBySubPaths(pathInfo: PathInfo, container: SourceCodeContainer, name: string, subPaths: number[]): SourceCodeInfo;
    getSourceCodeInfoByPathPrefix(pathInfo: PathInfo, container: SourceCodeContainer): SourceCodeInfo;
}
export declare function rootPathInfo(): PathInfo;
export declare function pInfo(parent: PathInfo, path: number, index?: number): PathInfo;
export declare function newSourceCodeIndex(file: ProtoFile, descriptor: FileDescriptorProto): SourceCodeIndex;
interface Location {
    pathList: number[];
}
export declare class LocationIndex<T extends Location> {
    private readonly locations;
    constructor(locations: T[]);
    findByPath(actualPath: number[]): T | undefined;
    findByPathPrefix(actualPath: number[]): T | undefined;
    findByPathPrefixAndLastElements(actualPath: number[], lastElements: number[]): T | undefined;
}
export {};
