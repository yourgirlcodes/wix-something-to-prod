import { Enum, OptionType, Message, ProtoFile, Reserved, TypeName } from '../api';
import { BaseType } from './base-type';
import { SyntaxTreeImpl } from './index';
import { EnumValueImpl } from './enumValue';
import { OptionsImpl } from './options';
import { PathInfo, SourceCodeIndex } from './source-code-index';
import { DetailedSourceCode } from './source-code-details';
import { EnumDescriptorProto } from '../descriptor';
export declare class EnumImpl extends BaseType implements Enum {
    readonly st: SyntaxTreeImpl;
    readonly typeName = TypeName.Enum;
    readonly detailedSourceCode: DetailedSourceCode<'name'>;
    private readonly descriptor;
    constructor(st: SyntaxTreeImpl, descriptor: EnumDescriptorProto, parent: ProtoFile | Message, pathInfo: PathInfo, sourceIdx: SourceCodeIndex);
    get file(): ProtoFile;
    toJSON(): {
        typeName: TypeName;
        name: string;
        options: import("../api").Option<any>[];
        values: EnumValueImpl[];
    };
    readonly values: EnumValueImpl[];
    readonly parent: Message | ProtoFile;
    readonly reserved: Reserved;
    readonly options: OptionsImpl<OptionType.EnumOptions>;
}
