import { OptionType, Message, Method, Service, TypeName } from '../api';
import { BaseType } from './base-type';
import { SyntaxTreeImpl } from './index';
import { OptionsImpl } from './options';
import { PathInfo, SourceCodeIndex } from './source-code-index';
import { DetailedSourceCode } from './source-code-details';
import { MethodDescriptorProto } from '../descriptor';
export declare class MethodImpl extends BaseType implements Method {
    readonly st: SyntaxTreeImpl;
    readonly typeName = TypeName.Method;
    readonly detailedSourceCode: DetailedSourceCode<'name' | 'request' | 'response'>;
    private readonly descriptor;
    constructor(st: SyntaxTreeImpl, descriptor: MethodDescriptorProto, parent: Service, pathInfo: PathInfo, sourceIdx: SourceCodeIndex);
    get file(): import("../api").ProtoFile;
    toJSON(): {
        typeName: TypeName;
        name: string;
        options: import("../api").Option<any>[];
        request: string;
        response: string;
    };
    readonly request: Message;
    readonly response: Message;
    readonly clientStreaming: boolean;
    readonly serverStreaming: boolean;
    readonly parent: Service;
    readonly options: OptionsImpl<OptionType.MethodOptions>;
}
