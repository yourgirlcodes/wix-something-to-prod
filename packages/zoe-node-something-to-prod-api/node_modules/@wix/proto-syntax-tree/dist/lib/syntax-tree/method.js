"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MethodImpl = void 0;
const api_1 = require("../api");
const base_type_1 = require("./base-type");
const options_1 = require("./options");
const descriptor_paths_1 = require("./descriptor-paths");
const source_code_index_1 = require("./source-code-index");
const source_code_details_1 = require("./source-code-details");
class MethodImpl extends base_type_1.BaseType {
    constructor(st, descriptor, parent, pathInfo, sourceIdx) {
        super(descriptor, parent);
        this.st = st;
        this.typeName = api_1.TypeName.Method;
        this.descriptor = descriptor;
        this.request = st.getMessage(descriptor.inputType);
        this.response = st.getMessage(descriptor.outputType);
        this.clientStreaming = descriptor.clientStreaming === true;
        this.serverStreaming = descriptor.serverStreaming === true;
        this.parent = parent;
        this.options = new options_1.OptionsImpl(st, { options: descriptor.options, optionType: api_1.OptionType.MethodOptions }, this, (0, source_code_index_1.pInfo)(pathInfo, descriptor_paths_1.MethodDescriptorPath.options), sourceIdx);
        this.detailedSourceCode = (0, source_code_details_1.initDetailedSourceCode)(pathInfo, sourceIdx, this, {
            'name': descriptor_paths_1.MethodDescriptorPath.name,
            'request': descriptor_paths_1.MethodDescriptorPath.input,
            'response': descriptor_paths_1.MethodDescriptorPath.output,
        });
        st.addType(this);
    }
    get file() {
        return this.parent.file;
    }
    toJSON() {
        return {
            typeName: this.typeName,
            name: this.name,
            options: this.options.allOptions,
            request: this.request.fqn,
            response: this.response.fqn,
        };
    }
}
exports.MethodImpl = MethodImpl;
//# sourceMappingURL=method.js.map