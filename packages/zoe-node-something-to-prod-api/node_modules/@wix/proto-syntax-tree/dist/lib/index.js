"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateSyntaxTreeFrom = exports.generateSyntaxTreeFromSource = exports.generateSyntaxTreeFromDescriptorFiles = exports.generateSyntaxTreeFromDescriptorBuffers = exports.generateSyntaxTreeFromDescriptorSets = exports.getStdIncludeProtos = void 0;
const promises_1 = require("fs/promises");
const path_1 = __importDefault(require("path"));
const debug_1 = __importDefault(require("debug"));
const assert_1 = __importDefault(require("assert"));
const syntax_tree_1 = require("./syntax-tree");
const descriptor_parser_1 = require("./descriptor-parser/descriptor-parser");
const log = (0, debug_1.default)('wix:flynt:syntax-tree');
function getStdIncludeProtos() {
    return [
        path_1.default.resolve(path_1.default.join(__dirname, '../include')),
        path_1.default.resolve(path_1.default.dirname(require.resolve('@wix/extensions/package.json')), 'src', 'main', 'proto'),
    ];
}
exports.getStdIncludeProtos = getStdIncludeProtos;
function addMainDescriptor(descriptorsFiles, mainDescriptorFile) {
    const mainDescIndex = descriptorsFiles.indexOf(mainDescriptorFile);
    if (mainDescIndex === -1) {
        return [...descriptorsFiles, mainDescriptorFile];
    }
    else {
        (0, assert_1.default)(mainDescIndex === descriptorsFiles.length - 1, 'mainDescriptor should be last in descriptorsFiles');
    }
    return descriptorsFiles;
}
function genGetFileInfoFuncForProtoFiles(mainProtoFolder, protoFiles) {
    const mainProtoFileNames = new Set(protoFiles.map(protoFile => {
        if (protoFile.startsWith(mainProtoFolder)) {
            return path_1.default.relative(mainProtoFolder, protoFile);
        }
        return protoFile;
    }));
    return (protoFileName) => {
        if (mainProtoFileNames.has(protoFileName)) {
            return {
                fromInclude: false,
                path: path_1.default.resolve(mainProtoFolder, protoFileName),
            };
        }
        else {
            return {
                fromInclude: true,
                path: protoFileName,
            };
        }
    };
}
function generateSyntaxTreeFromDescriptorSets(fileDescriptorSet, mainProtoFolder) {
    const mainDescriptor = fileDescriptorSet[fileDescriptorSet.length - 1];
    const getFileInfo = genGetFileInfoFuncForProtoFiles(mainProtoFolder, Array.from(mainDescriptor.fileList, f => f.name));
    const syntaxTree = (0, syntax_tree_1.buildSyntaxTree)(fileDescriptorSet, { getFileInfo });
    return syntaxTree;
}
exports.generateSyntaxTreeFromDescriptorSets = generateSyntaxTreeFromDescriptorSets;
function generateSyntaxTreeFromDescriptorBuffers(descriptors, mainProtoFolder) {
    log('parse file descriptors');
    const fileDescriptorSet = (0, descriptor_parser_1.parseFileDescriptorSet)(descriptors);
    log('building syntax tree');
    const syntaxTree = generateSyntaxTreeFromDescriptorSets(fileDescriptorSet, mainProtoFolder);
    log('done building syntax tree');
    return syntaxTree;
}
exports.generateSyntaxTreeFromDescriptorBuffers = generateSyntaxTreeFromDescriptorBuffers;
async function generateSyntaxTreeFromDescriptorFiles(mainDescriptorFile, mainProtoFolder, includeDescriptorFiles) {
    const descriptorFiles = addMainDescriptor(includeDescriptorFiles, mainDescriptorFile);
    log('reading file descriptors, count:', descriptorFiles.length);
    const descriptors = await Promise.all(descriptorFiles.map(fileName => (0, promises_1.readFile)(fileName)));
    return generateSyntaxTreeFromDescriptorBuffers(descriptors, mainProtoFolder);
}
exports.generateSyntaxTreeFromDescriptorFiles = generateSyntaxTreeFromDescriptorFiles;
async function generateSyntaxTreeFromSource(mainProtoFolder, include = []) {
    return generateSyntaxTreeFrom({ mainProtoFolder, include, includeStdProtos: true });
}
exports.generateSyntaxTreeFromSource = generateSyntaxTreeFromSource;
async function generateSyntaxTreeFrom(opts) {
    const include = [...opts.include];
    if (opts.includeStdProtos) {
        include.push(...getStdIncludeProtos());
    }
    log('generating file descriptor', { mainProtoFolder: opts.mainProtoFolder });
    const { generateBinaryFileDescriptorFromProtoFiles, getProtoFiles } = await Promise.resolve().then(() => __importStar(require('@wix/flynt-protoc')));
    const protoFiles = opts.protoFiles ?? await getProtoFiles(opts.mainProtoFolder);
    if (!opts.protoFiles) {
        include.unshift(opts.mainProtoFolder);
    }
    const fdsBinary = await generateBinaryFileDescriptorFromProtoFiles({ include, protoFiles });
    const fileDescriptorSet = (0, descriptor_parser_1.parseFileDescriptorSet)([fdsBinary]);
    log('building syntax tree');
    const getFileInfo = genGetFileInfoFuncForProtoFiles(opts.mainProtoFolder, protoFiles);
    const syntaxTree = (0, syntax_tree_1.buildSyntaxTree)(fileDescriptorSet, { getFileInfo });
    log('done building syntax tree');
    return syntaxTree;
}
exports.generateSyntaxTreeFrom = generateSyntaxTreeFrom;
//# sourceMappingURL=index.js.map