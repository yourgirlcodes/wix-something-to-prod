import * as _HttpStatus from 'http-status-codes';

declare abstract class ErrorClass extends Error {
    readonly cause?: Error;
    readonly errorCode: number;
    readonly httpStatusCode: number;
    static isInstance(instance: Error): instance is ErrorClass;
}

export type Cause = Error | string;

export interface ErrorOptions {
  readonly cause?: Cause;
  readonly httpStatusCode?: number;
  readonly errorCode?: number;
}

export interface BusinessErrorOptions extends ErrorOptions {
  readonly escapeHtml?: boolean;
}

export class WixBaseError extends ErrorClass {

}

export class WixSystemError extends ErrorClass {
  constructor(message?: string, options?: ErrorOptions);
}

export class WixBusinessError extends ErrorClass {
  constructor(message?: string, options?: BusinessErrorOptions);
  readonly escapeHtml?: boolean;
}

export type WixUnsupportedBrowserErrorData = {
  browserName: string;
  browserVersion: string;
  continueAnyway: boolean;
};

export class WixUnsupportedBrowserError extends WixBusinessError {
  constructor(data: WixUnsupportedBrowserErrorData);
  readonly details: {errorCode: 'unsupportedBrowser'; data: WixUnsupportedBrowserErrorData};
}

export class WixError extends ErrorClass {
  constructor(message?: string, cause?: Cause);
}

export class ThrottledError extends WixSystemError {
  constructor(message?: string, cause?: Cause);
}

export interface SimpleErrorConstructor {
    new (msg?: string, cause?: Cause): ErrorClass;
}

export interface ErrorMetadata {
    name: string;
    message?: string;
    errorCode: number;
    httpStatusCode: number;
    escapeHtml?: boolean;
    details?: any;
}

type errorBuilder = (errorCode?: number, httpStatus?: number) => SimpleErrorConstructor;

export enum ErrorCode {
    UNKNOWN,
    INVALID_SESSION,
    RPC_ERROR,
    GATEKEEPER_ACCESS_DENIED,
    HEALTH_TEST_FAILED,
    SESSION_REQUIRED,
    BAD_CSRF_TOKEN,
    UNHANDLED_REJECTION,
    THROTTLED,
    GATEKEEPER_METASITE_NOT_FOUND,
    UNSUPPORTED_BROWSER,
}

type wixBusinessError = errorBuilder;
type wixSystemError = errorBuilder;


declare enum CustomHttpStatusCodes {
  CANCELLED = 499
}

export const HttpStatus: typeof _HttpStatus.StatusCodes & typeof CustomHttpStatusCodes & {
  getStatusCode(text: string): number;
  getStatusText(statusCode: number | string): string;
};

export const wixBusinessError: wixBusinessError;
export const wixSystemError: wixSystemError;
export function extractMetadata(error: Error): ErrorMetadata;
export function isBusinessError(error: Error): boolean;
export function isRemote(error: Error): boolean;
export function markRemote<T extends Error>(error: T): T;
export function markLocal<T extends Error>(error: T): T;
export function throwAsLocalError<E extends Error>(error: E): never;
